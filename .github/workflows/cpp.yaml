# This is a basic workflow to help you get started with Actions
# workflow -
name: OpenPegasus Build Matrix

env:
    # Until we figure out how to create the home subdirectory
    ACTIONS_ALLOW_UNSECURE_COMMANDS: true

# Controls when the action will run. Triggers the workflow on push, pull

on:

  push:
  # pull_request:
  # release:
    # tags:
    # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10


# A workflow run is made up of one or more jobs that can run sequentially or
# in parallel

jobs:

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }} #
    strategy:
      fail-fast: true
      matrix:
        config:
        - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc",
            build_type: "Development",
            pegasus_platform: "LINUX_X86_64_GNU",
            cc: "gcc",
            cxx: "g++",
          }
        # Ignore this one for now.
        #- {
            #name: "Ubuntu_GCC_9",
            #os: ubuntu-latest,
            #artifact: "ubuntu_gcc9",
            #build_type: "Development",
            #cc: "gcc",
            #cxx: "g++",
          #}

    steps:
      # Checks-out repository under GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Display event name, etc
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      #- name: Install dependencies on windows
        #if: startsWith(matrix.config.os, 'windows')
        #run: |
          ##choco install ninja cmake
          ##ninja --version
          ##cmake --version
        ## cmd "${{ matrix.config.environment_script }}"

      - name: Install ubuntu dependencies and updates
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt-get update
          gcc --version
      - name: Install dependencies on ubuntu9
        if: startsWith(matrix.config.name, 'Ubuntu_GCC_9')
        run: |
          echo Update gcc-9 =======================================================================
          echo gcc version before
          gcc --version
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install gcc-9 g++-9
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 90 --slave /usr/bin/g++ g++ /usr/bin/g++-9 --slave /usr/bin/gcov gcov /usr/bin/gcov-9
          echo gcc version after update
          gcc --version
      - name: Install dependencies on macos
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install p7zip cmake ninja
          ninja --version
          cmake --version

      - name: Configure OpenPegasus
        shell: bash
        run: |
            echo "Step Configure OpenPegasus for build and test common config"
            # Set the common required Env Variables PEGASUS_ROOT, PEGASUS_HOME
            # PEGASUS_PLATFORM
            echo "PEGASUS_ROOT=$GITHUB_WORKSPACE/pegasus" >> $GITHUB_ENV
            # Set path to include bin for testing
            echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH
            # Put PEGASUS_HOME in OpenPegasus directory for now
            # mkdir -p ${{ env.PEGASUS_HOME }}
            #
            echo "PEGASUS_HOME=$GITHUB_WORKSPACE" >> $GITHUB_ENV
            echo "LD_LIBRARY_PATH=$GITHUB_WORKSPACE/lib64" >> $GITHUB_ENV
            echo "PEGASUS_PLATFORM=${{ matrix.config.pegasus_platform}}" >> $GITHUB_ENV
            #
            echo "Show github env"
            githubjson=`cat $GITHUB_ENV`
            echo $githubjson
            echo "Showed json github env"

      - name: Dump GitHub context
        shell: bash
        env:
          GITHUB_CONTEXT: ${{ toJson(env) }}
        run: |
            echo "Step Dump GitHub context"
            echo "GITHUB_CONTEXT\n$GITHUB_CONTEXT\n"

      - name: Show Pegasus environment variables created in previous step
        shell: bash
        run: |
            echo "Step Show Pegasus env variables created in previous step"
            echo "Display env variables that exist"
            export
            echo "Display env variables end"

      #- name: Build OpenPegasus non-privileged
        #shell: bash
        #run: |
            #echo "show export"
            #export
            #echo "End show export"
            #echo "Start build"
            #cd pegasus
            #make world
            #echo "End build Step"
        #env:
            ## env variables required for non-root minimal build and test
            #PEGASUS_DISABLE_PROV_USERCTXT: true
            #PEGASUS_DISABLE_PRIVILEGED_TESTS: true

      - name: Build OpenPegasus privileged
        shell: bash
        run: |
            echo "show export"
            export
            echo "End show export"
            echo "Start build"
            cd pegasus
            # Execute as sudo with env variables  and the bin added to path
            sudo "PATH=$PATH:$PEGASUS_HOME/bin" \
                --preserve-env=PEGASUS_ROOT,PEGASUS_HOME,PEGASUS_PLATFORM,PEGASUS_HAS_SSL \
                make -f $PWD/Makefile world
            echo "End build Step"
        env:
            # env variables required for privileged minimal build and test
            PEGASUS_HAS_SSL: true


      #- name: Test
      #  shell: bash
      #  run: cmake --build . --config ${{ matrix.config.build_type }}
