// Copyright (c) 2005 DMTF.  All rights reserved.
// <change cr="ArchCR00066.004" type="add">Add UmlPackagePath
// qualifier values to CIM Schema.</change>
// ==================================================================
//  CIM_Profile
// ==================================================================
   [UMLPackagePath ( "CIM::Core::Settings" ), Version ( "2.7.0" ), 
    Description (
       "Profile specifies a general collection of Settings/SettingData "
       "that are logically grouped together. Note that the CIM_Profile "
       "class uses simplified naming/identity and collection "
       "algorithms, as compared to CIM_Configuration. The settings are "
       "'collected' into the Profile using the MemberOfCollection "
       "association. Note that a Profile obtains its setting data and "
       "other necessary information from collected Setting/SettingData "
       "instances, and by the definition of additional properties in "
       "subclasses. One example of a Profile is to define the "
       "collection of settings for a particular person. Another is to "
       "define the collection of settings appropriate when "
       "initializing a system. \n"
       "\n"
       "Profile is tied to a ManagedElement using the ElementProfile "
       "association. The ManagedElement provides context for the "
       "Profile, and the settings collected by Profile SHOULD be "
       "settings of the associated ManagedElement. Note that a "
       "ManagedElement MAY NOT exist when the Profile is instantiated. "
       "This is true when the Profile is used in the creation of the "
       "real world entity represented by (and then instantiated in) "
       "the ManagedElement.")]
class CIM_Profile : CIM_Collection {

      [Key, Description (
          "Within the scope of the instantiating Namespace, InstanceID "
          "opaquely and uniquely identifies an instance of this class. "
          "In order to ensure uniqueness within the NameSpace, the "
          "value of InstanceID SHOULD be constructed using the "
          "following 'preferred' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon ':', "
          "and where <OrgID> MUST include a copyrighted, trademarked "
          "or otherwise unique name that is owned by the business "
          "entity creating/defining the InstanceID, or is a registered "
          "ID that is assigned to the business entity by a recognized "
          "global authority (This is similar to the <Schema "
          "Name>_<Class Name> structure of Schema class names.) In "
          "addition, to ensure uniqueness <OrgID> MUST NOT contain a "
          "colon (':'). When using this algorithm, the first colon to "
          "appear in InstanceID MUST appear between <OrgID> and "
          "<LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD not "
          "be re-used to identify different underlying (real-world) "
          "elements. If the above 'preferred' algorithm is not used, "
          "the defining entity MUST assure that the resultant "
          "InstanceID is not re-used across any InstanceIDs produced "
          "by this or other providers for this instance's NameSpace. \n"
          "For DMTF defined instances, the 'preferred' algorithm MUST "
          "be used with the <OrgID> set to 'CIM'.")]
   string InstanceID;
};
