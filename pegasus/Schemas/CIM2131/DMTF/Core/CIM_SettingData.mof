// Copyright (c) 2005 DMTF.  All rights reserved.
// <change cr="SysDevCR00728.000" type ="change">Update of
// descriptions based on Tech Edit review.</
// <change cr="DMTFCR01378.002" type ="change">Update of description to
// support deprecation of CIM_Profile and
// CIM_Configuration.</change>
// <change cr="ArchCR00066.004" type="add">Add UmlPackagePath
// qualifier values to CIM Schema.</change>
// ==================================================================
//  CIM_SettingData
// ==================================================================
   [UMLPackagePath ( "CIM::Core::Settings" ), Abstract,
       Version ( "2.10.0" ), Description (
       "The SettingData class represents configuration-related and "
       "operational parameters for one or more ManagedElements. A "
       "ManagedElement can have multiple SettingData objects "
       "associated with it. The current operational values for the "
       "parameters of the element are reflected by properties in the "
       "Element itself or by properties in its associations. These "
       "properties do not have to be the same values that are present "
       "in the SettingData object. For example, a modem might have a "
       "SettingData baud rate of 56Kb/sec but be operating at "
       "19.2Kb/sec. \n"
       "Note: The CIM_SettingData class is very similar to "
       "CIM_Setting, yet both classes are present in the model because "
       "many implementations have successfully used CIM_Setting. "
       "However, issues have arisen that could not be resolved without "
       "defining a new class. Therefore, until a new major release "
       "occurs, both classes will exist in the model. Refer to the "
       "Core White Paper for additional information. SettingData "
       "instances can be aggregated together into higher- level "
       "SettingData objects using ConcreteComponent associations.")]
class CIM_SettingData : CIM_ManagedElement {

      [Key, Description (
          "Within the scope of the instantiating Namespace, InstanceID "
          "opaquely and uniquely identifies an instance of this class. "
          "To ensure uniqueness within the NameSpace, the value of "
          "InstanceID should be constructed using the following "
          "\"preferred\" algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon (:), "
          "and where <OrgID> must include a copyrighted, trademarked, "
          "or otherwise unique name that is owned by the business "
          "entity that is creating or defining the InstanceID or that "
          "is a registered ID assigned to the business entity by a "
          "recognized global authority. (This requirement is similar "
          "to the <Schema Name>_<Class Name> structure of Schema class "
          "names.) In addition, to ensure uniqueness, <OrgID> must not "
          "contain a colon (:). When using this algorithm, the first "
          "colon to appear in InstanceID must appear between <OrgID> "
          "and <LocalID>. \n"
          "<LocalID> is chosen by the business entity and should not "
          "be reused to identify different underlying (real-world) "
          "elements. If the above \"preferred\" algorithm is not used, "
          "the defining entity must assure that the resulting "
          "InstanceID is not reused across any InstanceIDs produced by "
          "this or other providers for the NameSpace of this instance. "
          "\nFor DMTF-defined instances, the \"preferred\" algorithm "
          "must be used with the <OrgID> set to CIM.")]
   string InstanceID;

      [Required, Override ( "ElementName" ), Description (
          "The user-friendly name for this instance of SettingData. In "
          "addition, the user-friendly name can be used as an index "
          "property for a search or query. (Note: The name does not "
          "have to be unique within a namespace.)")]
   string ElementName;
};
