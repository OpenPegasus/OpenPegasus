// ===================================================================
// Title: Core_CoreElements
// $State: Exp $
// $Date: 2005/02/17 00:09:56 $
// $RCSfile: Core_CoreElements.mof,v $
// $Revision: 1.1 $
// ===================================================================
//#pragma inLine ("Includes/copyright.inc")
// Copyright 1998-2005 Distributed Management Task Force, Inc. (DMTF).
// All rights reserved.
// DMTF is a not-for-profit association of industry members dedicated
// to promoting enterprise and systems management and interoperability.
// DMTF specifications and documents may be reproduced for uses
// consistent with this purpose by members and non-members,
// provided that correct attribution is given.
// As DMTF specifications may be revised from time to time,
// the particular version and release date should always be noted.
// 
// Implementation of certain elements of this standard or proposed
// standard may be subject to third party patent rights, including
// provisional patent rights (herein "patent rights"). DMTF makes
// no representations to users of the standard as to the existence
// of such rights, and is not responsible to recognize, disclose, or
// identify any or all such third party patent right, owners or
// claimants, nor for any incomplete or inaccurate identification or
// disclosure of such rights, owners or claimants. DMTF shall have no
// liability to any party, in any manner or circumstance, under any
// legal theory whatsoever, for failure to recognize, disclose, or
// identify any such third party patent rights, or for such party's
// reliance on the standard or incorporation thereof in its product,
// protocols or testing procedures. DMTF shall have no liability to
// any party implementing such standard, whether such implementation
// is foreseeable or not, nor to any patent owner or claimant, and shall
// have no liability or responsibility for costs or losses incurred if
// a standard is withdrawn or modified after publication, and shall be
// indemnified and held harmless by any party implementing the
// standard from any and all claims of infringement by a patent owner
// for such implementations.
// 
// For information about patents held by third-parties which have
// notified the DMTF that, in their opinion, such patent may relate to
// or impact implementations of DMTF standards, visit
// http://www.dmtf.org/about/policies/disclosures.php.
//#pragma inLine
// ===================================================================
// Description: The Core Model defines basic management concepts.
//              This file defines the concepts for the top of the CIM
//              object hierarchies (ManagedElement,
//              ManagedSystemElement,
//              LogicalElement, Systems, Services, etc.) and the 'top'
//              associations (Dependency, Component,
//              LogicalIdentity, ...).
// 
//              The object classes below are listed in an order that
//              avoids forward references. Required objects, defined
//              by other working groups, are omitted.
// ==================================================================
// Change Log for v2.9 Final
// CR1319 - Add CIM_ConcreteJob.TimeBeforeRemoval
// CR1282 - Change the description of Job.PercentComplete
// 
// Change Log for v2.8 Final
// CR1181 - Add properties/method to ConcreteJob to support state
//          and enhance kill support
// CR1203 - Reserved Range for OperationalStatus
// CR1210 - Removal of experimental qualifiers for core.
// CR1223 - Sysdev Omnibus CR - Minor MOF corrections.
// 
// Change Log for v2.8 Preliminary
// CR932  - Add power mode status to OperationalStatus.
//           Move the specific power mode states from availability
//          to a property between the PowerMgmt service and its ME.
//          Remove the overlapping properties from Logical Device.
// CR950  - Add ArrayType to CIM_ManagedSystemElement properties
// CR1006 - Improve description of ManagedSystemElement
// CR1026 - Update the InfoFormat enum for RemoteAccessPoint
// CR1019 - CIM Versioning for 2.8 Preliminary
// CR1033 - relax key types for Synchronized
// CR1030 - Update AdminDomain.NameFormat for WWN
// CR1045 - Add method for requesting a "EnabledState" change in
//          EnabledLogicalElement class / Deprecate or explain overlap
//          with LogicalDevice and Service properties and methods
// CR1052 - Updates to ProtocolEndpoint and its
//          subclasses to better align with the IF-MIB
// CR1081 - Promote CIM_Job and ConcreteJob to the Core Model to
//          avoid forward reference in EnabledLogicalElement's methods
// CR1092  - Move Service and SAP related classes to their own file
// CR1127  - Add new enums to RequestedState
// CR1128  - Addition of HostedDependency
// CR1135  - Job Recovery Properties and the RecoveryJob association
// 
// Change Log for v2.7 Final
// CR961 - Rename EnabledLogicalElement. xxxStatus properties to be
//         State.
//       - Update description of xxxState properties to reflect the
//         expected behavior of the state values.
//       - Change references to EnabledStatus and RequestedStatus to
//         EnabledState and RequestedState in the Service.
//            StartService()
//            StopService()
// CR966 - Remove the Terminal qualifier from ConcreteDependency,
//         ConcreteComponent, and ConcreteIdentity associations and
//         add text to describe the intent of the original placement
// CR968 - Remove the Experimental qualifier
// CR993 - Change property name and description of
//            ManagedSystemElement.OtherStatusDescription
// CR1009 - Add ServiceAccessURI class
// CR1135 - Job Recovery Properties and the RecoveryJob association
// 
// Change Log for v2.7
// CR641 - Add ConcreteDependency
// CR643 - Promote Component to ManagedElement, and add
//         ConcreteComponent
// CR660 - Add RemoteServiceAccessPoint and RemotePort
// CR663 - Update the Description of ActiveConnection and some of
//         its properties.  Deprecate the properties, TrafficType
//         and OtherTrafficDescription
// CR670 - Promote LogicalIdentity to ManagedElement, and add
//         ConcreteIdentity
// CR671 - Deprecate ProvidesServiceToElement
//       - Add ServiceAvailableToElement
//       - Update description for ServiceServiceDependency
// CR672 - Update description for SystemComponent to clarify its use
// CR677 - Add the array property OperationalStatus & OtherStatus
//         Description, and deprecate the existing Status property of
//         ManagedSystemElement
//       - Deprecate StartMode in Service
// CR717 - Clarify description of System.Roles
// CR747 - Add the Write Qualifier and update description of System.
//         Roles
// CR751 - Promote ActiveConnection from ProtocolEndpoint to
//         ServiceAccessPoint
// CR757 - Add EnabledLogicalElement
//       - Change subclass of System, Service, and ServiceAccessPoint
//         from LogicalElement to EnabledLogicalElement
//       - Update the descriptions to Service.StartService() and
//         Service.StopService() to explain the overlap with
//         RequestedStatus
//       - Update the deprecation of Service.StartMode to
//         EnabledDefault
// CR758 - Add ElementName to ManagedElement
// CR764 - Add ServiceAffectsElement
// CR779 - Extend ManagedSystemElement.OperationalStatus to include
//         "Completed"
// CR804 - Update the enumeration for ProtocolEndpoint.ProtocolType
// CR833 - Extend EnabledLogicalElement.EnabledStatus & .Requested
//         Status to include "In Test" and "Test" respectively
// CR834 - Extend ManagedSystemElement.OperationalStatus to include
//         "Aborted", "Dormant", and "Supported Entity in Error"
// CR844 - Add PrimaryOwnerName and PrimaryOwnerContact to Service;
//         Add Write qualifier to the same properties in System
// CR894 - Clarify the description for System.
// CR898 - Extend MaxLen qualifier on ManagedSystemElement.Name
//         from 256 to 1024 (to match subclassing requriements)
// ==================================================================

#pragma locale ("en_US")


// ==================================================================
// ManagedElement
// ==================================================================
   [Abstract, Version ( "2.7.0" ), Description (
       "ManagedElement is an abstract class that provides a common "
       "superclass (or top of the inheritance tree) for the "
       "non-association classes in the CIM Schema.")]
class CIM_ManagedElement {

      [Description (
          "The Caption property is a short textual description (one- "
          "line string) of the object."), 
       MaxLen ( 64 )]
   string Caption;

      [Description (
          "The Description property provides a textual description of "
          "the object.")]
   string Description;

      [Description (
          "A user-friendly name for the object. This property allows "
          "each instance to define a user-friendly name IN ADDITION TO "
          "its key properties/identity data, and description "
          "information. \n"
          "Note that ManagedSystemElement's Name property is also "
          "defined as a user-friendly name. But, it is often "
          "subclassed to be a Key. It is not reasonable that the same "
          "property can convey both identity and a user friendly name, "
          "without inconsistencies. Where Name exists and is not a Key "
          "(such as for instances of LogicalDevice), the same "
          "information MAY be present in both the Name and ElementName "
          "properties.")]
   string ElementName;
};


// ==================================================================
// Dependency
// ==================================================================
   [Association, Abstract, Version ( "2.6.0" ), Description (
       "CIM_Dependency is a generic association used to establish "
       "dependency relationships between ManagedElements.")]
class CIM_Dependency {

      [Key, Description (
          "Antecedent represents the independent object in this "
          "association.")]
   CIM_ManagedElement REF Antecedent;

      [Key, Description (
          "Dependent represents the object dependent on the "
          "Antecedent.")]
   CIM_ManagedElement REF Dependent;
};


// ==================================================================
// ConcreteDependency
// ==================================================================
   [Association, Version ( "2.7.0" ), Description (
       "CIM_ConcreteDependency is a generic association used to "
       "establish dependency relationships between ManagedElements. It "
       "is defined as a concrete subclass of the abstract "
       "CIM_Dependency class, to be used in place of many specific "
       "subclasses of Dependency that add no semantics - i.e., that do "
       "not clarify the type of dependency, update cardinalities, or "
       "add/remove qualifiers. Note that when defining additional "
       "semantics for Dependency that this class MUST NOT be "
       "subclassed. Specific semantics continue to be defined as "
       "subclasses of the abstract CIM_Dependency. ConcreteDependency "
       "is limited in its use as a concrete form of a general "
       "dependency. \n"
       "\n"
       "It was deemed more prudent to create this concrete subclass "
       "than to change Dependency from an abstract to a concrete "
       "class. Dependency already had multiple abstract subclasses in "
       "the CIM Schema, and wider industry usage and impact could not "
       "be anticipated.")]
class CIM_ConcreteDependency : CIM_Dependency {

      [Override ( "Antecedent" ), Description (
          "Antecedent represents the independent object in this "
          "association.")]
   CIM_ManagedElement REF Antecedent;

      [Override ( "Dependent" ), Description (
          "Dependent represents the object dependent on the "
          "Antecedent.")]
   CIM_ManagedElement REF Dependent;
};

// ==================================================================
// Component
// ==================================================================
   [Association, Abstract, Aggregation, Version ( "2.7.0" ), 
    Description (
       "CIM_Component is a generic association used to establish 'part "
       "of' relationships between Managed Elements. For example, it "
       "could be used to define the components or parts of a System.")]
class CIM_Component {

      [Key, Aggregate, Description (
          "The parent element in the association.")]
   CIM_ManagedElement REF GroupComponent;

      [Key, Description (
          "The child element in the association.")]
   CIM_ManagedElement REF PartComponent;
};


// ==================================================================
// ConcreteComponent
// ==================================================================
   [Association, Aggregation, Version ( "2.7.0" ), Description (
       "CIM_ConcreteComponent is a generic association used to "
       "establish 'part of' relationships between ManagedElements. It "
       "is defined as a concrete subclass of the abstract "
       "CIM_Component class, to be used in place of many specific "
       "subclasses of Component that add no semantics - i.e., that do "
       "not clarify the type of composition, update cardinalities, or "
       "add/remove qualifiers. Note that when defining additional "
       "semantics for Component that this class MUST NOT be "
       "subclassed. Specific semantics continue to be defined as "
       "subclasses of the abstract CIM_Component. ConcreteComponent is "
       "limited in its use as a concrete form of a general "
       "composition. \n"
       "\n"
       "It was deemed more prudent to create this concrete subclass "
       "than to change Component from an abstract to a concrete class. "
       "Industry usage and impact could not be anticipated.")]
class CIM_ConcreteComponent : CIM_Component {

      [Aggregate, Override ( "GroupComponent" ), Description (
          "The parent element in the association.")]
   CIM_ManagedElement REF GroupComponent;

      [Override ( "PartComponent" ), Description (
          "The child element in the association.")]
   CIM_ManagedElement REF PartComponent;
};


// ==================================================================
// LogicalIdentity
// ==================================================================
   [Association, Abstract, Version ( "2.7.0" ), Description (
       "CIM_LogicalIdentity is an abstract and generic association, "
       "indicating that two ManagedElements represent different "
       "aspects of the same underlying entity. This relationship "
       "conveys what could be defined with multiple inheritance. In "
       "most scenarios, the Identity relationship is determined by the "
       "equivalence of Keys or some other identifying properties of "
       "the related Elements. \n"
       "\n"
       "One of the scenarios where this relationship is reasonable is "
       "to represent that a LogicalDevice is both a 'bus' entity and a "
       "'functional' entity. For example, a Device could be both a USB "
       "(bus) and a Keyboard (functional) entity.")]
class CIM_LogicalIdentity {

      [Key, Description (
          "SystemElement represents one aspect of the Managed Element. "
          "The use of 'System' in the role name does not limit the "
          "scope of the association. The role name was defined in the "
          "original association, where the referenced elements were "
          "limited to LogicalElements. Since that time, it has been "
          "found valuable to instantiate these types of relationships "
          "for ManagedElements, such as Collections. So, the "
          "referenced elements of the association were redefined to be "
          "ManagedElements. Unfortunately, the role name could not be "
          "changed without deprecating the entire association. This "
          "was not deemed necessary just to correct the role name.")]
   CIM_ManagedElement REF SystemElement;

      [Key, Description (
          "SameElement represents an alternate aspect of the "
          "ManagedElement.")]
   CIM_ManagedElement REF SameElement;
};


// ==================================================================
// ConcreteIdentity
// ==================================================================
   [Association, Version ( "2.7.0" ), Description (
       "CIM_ConcreteIdentity associates two elements representing "
       "different aspects of the same underlying entity. It is defined "
       "as a concrete subclass of the abstract CIM_LogicalIdentity "
       "class, to be used in place of many specific subclasses of "
       "LogicalIdentity that add no semantics - i.e., that do not "
       "clarify the type of identity, update cardinalities, or "
       "add/remove qualifiers. Note -that when defining additional "
       "semantics for LogicalIdentity that this class should not be "
       "subclassed. Specifc semantics continue to be defined as "
       "subclasses of the abstract CIM_LogicalIdentity. "
       "ConcreteIdentity is limited in its use as a concrete form of a "
       "general identity relationship. \n"
       "\n"
       "It was deemed more prudent to create this concrete subclass "
       "than to change LogicalIdentity from an abstract to a concrete "
       "class. LogicalIdentity already had multiple abstract "
       "subclasses in the CIM Schema, and wider industry usage and "
       "impact could not be anticipated.")]
class CIM_ConcreteIdentity : CIM_LogicalIdentity {

      [Override ( "SystemElement" ), Description (
          "One aspect of the ManagedElement. The use of 'System' in "
          "the name does not limit the scope of the association. This "
          "is an artifact of the original definition of the "
          "association.")]
   CIM_ManagedElement REF SystemElement;

      [Override ( "SameElement" ), Description (
          "Another aspect of the ManagedElement.")]
   CIM_ManagedElement REF SameElement;
};


// ==================================================================
// ManagedSystemElement
// ==================================================================
   [Abstract, Version ( "2.8.0" ), Description (
       "CIM_ManagedSystemElement is the base class for the System "
       "Element hierarchy. Any distinguishable component of a System "
       "is a candidate for inclusion in this class. Examples of system "
       "components include: \n"
       "- software components such as application servers, databases, "
       "and applications \n"
       "- operating system components such as files, processes, and "
       "threads \n"
       "- device components such as disk drives, controllers, "
       "processors, and printers \n"
       "- physical components such as chips and cards.")]
class CIM_ManagedSystemElement : CIM_ManagedElement {

      [Description (
          "A datetime value indicating when the object was installed. "
          "A lack of a value does not indicate that the object is not "
          "installed."), 
       MappingStrings { "MIF.DMTF|ComponentID|001.5" }]
   datetime InstallDate;

      [Description (
          "The Name property defines the label by which the object is "
          "known. When subclassed, the Name property can be overridden "
          "to be a Key property."), 
       MaxLen ( 1024 )]
   string Name;

      [Description (
          "Indicates the current status(es) of the element. Various "
          "health and operational statuses are defined. Many of the "
          "enumeration's values are self- explanatory. However, a few "
          "are not and are described in more detail. \n"
          "\"Stressed\" indicates that the element is functioning, but "
          "needs attention. Examples of \"Stressed\" states are "
          "overload, overheated, etc. \n"
          "\"Predictive Failure\" indicates that an element is "
          "functioning nominally but predicting a failure in the near "
          "future. \n"
          "\"In Service\" describes an element being configured, "
          "maintained, cleaned, or otherwise administered. \n"
          "\"No Contact\" indicates that the monitoring system has "
          "knowledge of this element, but has never been able to "
          "establish communications with it. \n"
          "\"Lost Communication\" indicates that the ManagedSystem "
          "Element is known to exist and has been contacted "
          "successfully in the past, but is currently unreachable. \n"
          "\"Stopped\" and \"Aborted\" are similar, although the "
          "former implies a clean and orderly stop, while the latter "
          "implies an abrupt stop where the element's state and "
          "configuration may need to be updated. \n"
          "\"Dormant\" indicates that the element is inactive or "
          "quiesced. \n"
          "\"Supporting Entity in Error\" describes that this element "
          "may be \"OK\" but that another element, on which it is "
          "dependent, is in error. An example is a network service or "
          "endpoint that cannot function due to lower layer networking "
          "problems. \n"
          "\"Completed\" indicates the element has completed its "
          "operation. This value should be combined with either OK, "
          "Error, or Degraded so that a client can till if the "
          "complete operation passed (Completed with OK), and failure "
          "(Completed with Error). Completed with Degraded would imply "
          "the operation finished, but did not complete OK or report "
          "an error. \n"
          "\"Power Mode\" indicates the element has additional power "
          "model information contained in the Associated "
          "PowerManagementService association. \n"
          "OperationalStatus replaces the Status property on "
          "ManagedSystemElement to provide a consistent approach to "
          "enumerations, to address implementation needs for an array "
          "property, and to provide a migration path from today's "
          "environment to the future. This change was not made earlier "
          "since it required the DEPRECATED qualifier. Due to the "
          "widespread use of the existing Status property in "
          "management applications, it is strongly RECOMMENDED that "
          "providers/instrumentation provide BOTH the Status and "
          "OperationalStatus properties. Further, the first value of "
          "OperationalStatus SHOULD contain the primary status for the "
          "element. When instrumented, Status (since it is "
          "single-valued) SHOULD also provide the primary status of "
          "the element."), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
          "10", "11", "12", "13", "14", "15", "16", "17", "18", "..",
          "0x8000.." }, 
       Values { "Unknown", "Other", "OK", "Degraded", "Stressed",
          "Predictive Failure", "Error", "Non-Recoverable Error",
          "Starting", "Stopping", "Stopped", "In Service",
          "No Contact", "Lost Communication", "Aborted", "Dormant",
          "Supporting Entity in Error", "Completed", "Power Mode",
          "DMTF Reserved", "Vendor Reserved" }, ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.StatusDescriptions" }]
   uint16 OperationalStatus[];

      [Description (
          "Strings describing the various OperationalStatus array "
          "values. For example, if \"Stopping\" is the value assigned "
          "to OperationalStatus, then this property may contain an "
          "explanation as to why an object is being stopped. Note that "
          "entries in this array are correlated with those at the same "
          "array index in OperationalStatus."), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperationalStatus" }]
   string StatusDescriptions[];

      [Deprecated { "CIM_ManagedSystemElement.OperationalStatus" }, 
       Description (
          "A string indicating the current status of the object. "
          "Various operational and non-operational statuses are "
          "defined. This property is deprecated in lieu of "
          "OperationalStatus, which includes the same semantics in its "
          "enumeration. This change is made for 3 reasons: 1) Status "
          "is more correctly defined as an array. This overcomes the "
          "limitation of describing status via a single value, when it "
          "is really a multi-valued property (for example, an element "
          "may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive "
          "and leads to unclear enumerated values. And, 3) The change "
          "to a uint16 data type was discussed when CIM V2.0 was "
          "defined. However, existing V1.0 implementations used the "
          "string property and did not want to modify their code. "
          "Therefore, Status was grandfathered into the Schema. Use of "
          "the Deprecated qualifier allows the maintenance of the "
          "existing property, but also permits an improved definition "
          "using OperationalStatus."), 
       ValueMap { "OK", "Error", "Degraded", "Unknown", "Pred Fail",
          "Starting", "Stopping", "Service", "Stressed", "NonRecover",
          "No Contact", "Lost Comm", "Stopped" }, MaxLen ( 10 )]
   string Status;
};

// ===================================================================
// HostedDependency
// ===================================================================
   [Association, Version ( "2.8.0" ), Description (
       "HostedDependency defines a ManagedElement in the context of "
       "another ManagedElement in which it resides.")]
class CIM_HostedDependency : CIM_Dependency {

      [Override ( "Antecedent" ), Max ( 1 ), Description (
          "The scoping ManagedElement.")]
   CIM_ManagedElement REF Antecedent;

      [Override ( "Dependent" ), Description (
          "The hosted ManagedElement.")]
   CIM_ManagedElement REF Dependent;
};

// ==================================================================
// LogicalElement
// ==================================================================
   [Abstract, Version ( "2.6.0" ), Description (
       "CIM_LogicalElement is a base class for all the components of a "
       "System that represent abstract system components, such as "
       "Files, Processes, or LogicalDevices.")]
class CIM_LogicalElement : CIM_ManagedSystemElement {
};


// ===================================================================
// Job
// ===================================================================
   [Abstract, Version ( "2.8.0" ), Description (
       "A Job is a LogicalElement representing an executing unit of "
       "work, such as a script or a print job. A Job is distinct from "
       "a Process in that a Job can be scheduled, queued, and its "
       "execution is not limited to a single system.")]
class CIM_Job : CIM_LogicalElement {

      [Description (
          "A free form string representing the Job's status. The "
          "primary status is reflected in the inherited "
          "OperationalStatus property. JobStatus provides additional, "
          "implementation-specific details."), 
       ModelCorrespondence { 
          "CIM_ManagedSystemElement.OperationalStatus" }]
   string JobStatus;

      [Description (
          "The time that the Job was submitted to execute. A value of "
          "all zeroes indicates that the owning element is not capable "
          "of reporting a date and time. Therefore, the "
          "ScheduledStartTime and StartTime are reported as intervals "
          "relative to the time their values are requested.")]
   datetime TimeSubmitted;

      [Deprecated { "CIM_Job.RunMonth", "CIM_Job.RunDay",
          "CIM_Job.RunDayOfWeek", "CIM_Job.RunStartInterval" }, Write, 
       Description (
          "The time that the current Job is scheduled to start. This "
          "may be represented by the actual date and time, or an "
          "interval relative to the time that this property is "
          "requested. A value of all zeroes indicates that the Job is "
          "already executing. The property is deprecated in lieu of "
          "the more expressive scheduling properties, RunMonth, "
          "RunDay, RunDayOfWeek and RunStartInterval.")]
   datetime ScheduledStartTime;

      [Description (
          "The time that the Job was actually started. This may be "
          "represented by an actual date and time, or by an interval "
          "relative to the time that this property is requested. Note "
          "that this property is also present in the "
          "JobProcessingStatistics class. This is necessary to capture "
          "the processing information for recurring Jobs, since only "
          "the 'last' run time can be stored in this single-valued "
          "property.")]
   datetime StartTime;

      [Description (
          "The time interval that the Job has been executing or the "
          "total execution time if the Job is complete. Note that this "
          "property is also present in the JobProcessingStatistics "
          "class. This is necessary to capture the processing "
          "information for recurring Jobs, since only the 'last' run "
          "time can be stored in this single-valued property.")]
   datetime ElapsedTime;

      [Write, Description (
          "Number of times that the Job should be run. A value of 1 "
          "indicates that the Job is NOT recurring, while any non-zero "
          "value indicates a limit to the number of times that the Job "
          "will recur. Zero indicates that there is no limit to the "
          "number of times that the Job can be processed, but that it "
          "is terminated either AFTER the UntilTime, or by manual "
          "intervention. By default, a Job is processed once.")]
   uint32 JobRunTimes = 1;

      [Write, Description (
          "The month during which the Job should be processed. Specify "
          "0 for January, 1 for February, and so on."), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
          "10", "11" }, 
       Values { "January", "February", "March", "April", "May", "June",
          "July", "August", "September", "October", "November",
          "December" }, 
       ModelCorrespondence { "CIM_Job.RunDay", "CIM_Job.RunDayOfWeek",
          "CIM_Job.RunStartInterval" }]
   uint8 RunMonth;

      [Write, Description (
          "The day in the month on which the Job should be processed. "
          "There are two different interpretations for this property, "
          "depending on the value of DayOfWeek. In one case, RunDay "
          "defines the day-in-month on which the Job is processed. "
          "This interpretation is used when the DayOfWeek is 0. A "
          "positive or negative integer indicates whether the RunDay "
          "should be calculated from the beginning or the end of the "
          "month. For example, 5 indicates the fifth day in RunMonth "
          "and -1 indicates the last day in the RunMonth. \n"
          "\n"
          "When RunDayOfWeek is not 0, RunDay is the day-in-month on "
          "which the Job is processed, defined in conjunction with "
          "RunDayOfWeek. For example, if RunDay is 15 and RunDayOfWeek "
          "is Saturday, then the Job is processed on the first "
          "Saturday on or AFTER the 15th day in the RunMonth (e.g., "
          "the third Saturday in the month). If RunDay is 20 and "
          "RunDayOfWeek is -Saturday, then this indicates the first "
          "Saturday on or BEFORE the 20th day in the RunMonth. If "
          "RunDay is -1 and RunDayOfWeek is -Sunday, then this "
          "indicates the last Sunday in the RunMonth."), 
       MinValue ( -31 ), MaxValue ( 31 ), 
       ModelCorrespondence { "CIM_Job.RunMonth",
          "CIM_Job.RunDayOfWeek", "CIM_Job.RunStartInterval" }]
   sint8 RunDay;

      [Write, Description (
          "Positive or negative integer used in conjunction with "
          "RunDay to indicate the day of the week on which the Job is "
          "processed. RunDayOfWeek is set to 0 to indicate an exact "
          "day of the month, such as March 1. A positive integer "
          "(representing Sunday, Monday, ..., Saturday) means that the "
          "day of week is found on or AFTER the specified RunDay. A "
          "negative integer (representing -Sunday, -Monday, ..., "
          "-Saturday) means that the day of week is found on or BEFORE "
          "the RunDay."), 
       ValueMap { "-7", "-6", "-5", "-4", "-3", "-2", "-1", "0", "1",
          "2", "3", "4", "5", "6", "7" }, 
       Values { "-Saturday", "-Friday", "-Thursday", "-Wednesday",
          "-Tuesday", "-Monday", "-Sunday", "ExactDayOfMonth",
          "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday",
          "Friday", "Saturday" }, 
       ModelCorrespondence { "CIM_Job.RunMonth", "CIM_Job.RunDay",
          "CIM_Job.RunStartInterval" }]
   sint8 RunDayOfWeek;

      [Write, Description (
          "The time interval after midnight when the Job should be "
          "processed. For example, \n"
          "00000000020000.000000:000 \n"
          "indicates that the Job should be run on or after two "
          "o'clock, local time or UTC time (distinguished using the "
          "LocalOrUtcTime property."), 
       ModelCorrespondence { "CIM_Job.RunMonth", "CIM_Job.RunDay",
          "CIM_Job.RunDayOfWeek", "CIM_Job.RunStartInterval" }]
   datetime RunStartInterval;

      [Write, Description (
          "This property indicates whether the times represented in "
          "the RunStartInterval and UntilTime properties represent "
          "local times or UTC times. Time values are synchronized "
          "worldwide by using the enumeration value 2, \"UTC Time\"."), 
       ValueMap { "1", "2" }, 
       Values { "Local Time", "UTC Time" }]
   uint16 LocalOrUtcTime;

      [Write, Description (
          "The time after which the Job is invalid or should be "
          "stopped. This may be represented by an actual date and "
          "time, or by an interval relative to the time that this "
          "property is requested. A value of all nines indicates that "
          "the Job can run indefinitely."), 
       ModelCorrespondence { "CIM_Job.LocalOrUtcTime" }]
   datetime UntilTime;

      [Write, Description (
          "User to be notified upon the Job completion or failure.")]
   string Notify;

      [Description (
          "The User that submitted the Job or the Service/method "
          "name/etc. that caused the job to be created."), 
       ModelCorrespondence { "CIM_OwningJobElement" }]
   string Owner;

      [Write, Description (
          "Indicates the urgency or importance of execution of the "
          "Job. The lower the number, the higher the priority. Note "
          "that this property is also present in the "
          "JobProcessingStatistics class. This is necessary to capture "
          "the setting information that would influence a Job's "
          "results.")]
   uint32 Priority;

      [Description (
          "The percentage of the job that has completed at the time "
          "that this value is requested. Note that this property is "
          "also present in the JobProcessingStatistics class. This is "
          "necessary to capture the processing information for "
          "recurring Jobs, since only the 'last' run data can be "
          "stored in this single-valued property. \n"
          "Note that the value 101 is undefined and will be not be "
          "allowed in the next major revision of the specification."), 
       Units ( "Percent" ), MinValue ( 0 ), MaxValue ( 101 )]
   uint16 PercentComplete;

      [Write, Description (
          "Indicates whether or not the job should be automatically "
          "deleted upon completion. Note that the 'completion' of a "
          "recurring job is defined by its JobRunTimes or UntilTime "
          "properties, OR when the Job is terminated by manual "
          "intervention. If this property is set to false and the job "
          "completes, then the extrinsic method DeleteInstance MUST be "
          "used to delete the job versus updating this property.")]
   boolean DeleteOnCompletion;

      [Description (
          "A vendor specific error code. This MUST be set to zero if "
          "the Job completed without error. Note that this property is "
          "also present in the JobProcessingStatistics class. This is "
          "necessary to capture the processing information for "
          "recurring Jobs, since only the 'last' run error can be "
          "stored in this single-valued property."), 
       ModelCorrespondence { "CIM_Job.ErrorDescription" }]
   uint16 ErrorCode;

      [Description (
          "A free form string containing the vendor error description. "
          "Note that this property is also present in the "
          "JobProcessingStatistics class. This is necessary to capture "
          "the processing information for recurring Jobs, since only "
          "the 'last' run error can be stored in this single-valued "
          "property."), 
       ModelCorrespondence { "CIM_Job.ErrorCode" }]
   string ErrorDescription;

      [Description (
          "Describes the recovery action to be taken for an "
          "unsuccessfully run Job. The possible values are: \n"
          "0 = \"Unknown\", meaning it is unknown as to what recovery "
          "action to take \n"
          "1 = \"Other\", indicating that the recovery action will be "
          "specified in the property, OtherRecoveryAction \n"
          "2 = \"Do Not Continue\", meaning stop the execution of the "
          "job and appropriately update its status \n"
          "3 = \"Continue With Next Job\", meaning continue with the "
          "next job in the queue \n"
          "4 = \"Re-run Job\", indicating that the job should be "
          "re-run \n"
          "5 = \"Run Recovery Job\", meaning run the Job associated "
          "using the RecoveryJob relationship. Note that the recovery "
          "Job MUST already be on the queue from which it will run."), 
       ValueMap { "0", "1", "2", "3", "4", "5" }, 
       Values { "Unknown", "Other", "Do Not Continue",
          "Continue With Next Job", "Re-run Job", "Run Recovery Job" }, 
       ModelCorrespondence { "CIM_Job.OtherRecoveryAction" }]
   uint16 RecoveryAction;

      [Description (
          "A string describing the recovery action when the instance's "
          "RecoveryAction property is 1 (\"Other\")."), 
       ModelCorrespondence { "CIM_Job.RecoveryAction" }]
   string OtherRecoveryAction;

      [Deprecated { "CIM_ConcreteJob.RequestStateChange()" }, 
       Description (
          "KillJob is being deprecated because there is no distiction "
          "made between an orderly shutdown and an immediate kill. "
          "CIM_ConcreteJob.RequestStateChange() provides 'Terminate' "
          "and 'Kill' options to allow this distinction. \n"
          "A method to kill this job and any underlying processes, and "
          "to remove any 'dangling' associations."), 
       ValueMap { "0", "1", "2", "3", "4", "6", "7", "..",
          "32768..65535" }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout",
          "Failed", "Access Denied", "Not Found", "DMTF Reserved",
          "Vendor Specific" }]
   uint32 KillJob( 
         [IN, Description (
             "Indicates whether or not the Job should be automatically "
             "deleted upon termination. This parameter takes "
             "precedence over the property, DeleteOnCompletion.")]
      boolean DeleteOnKill); 

};


// ===================================================================
// ConcreteJob
// ===================================================================
   [Version ( "2.9.0" ), Description (
       "A concrete version of Job. This class represents a generic and "
       "instantiable unit of work, such as a batch or a print job.")]
class CIM_ConcreteJob : CIM_Job {

      [Key, Description (
          "Within the scope of the instantiating Namespace, InstanceID "
          "opaquely and uniquely identifies an instance of this class. "
          "In order to ensure uniqueness within the NameSpace, the "
          "value of InstanceID SHOULD be constructed using the "
          "following 'preferred' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon ':', "
          "and where <OrgID> MUST include a copyrighted, trademarked "
          "or otherwise unique name that is owned by the business "
          "entity creating/defining the InstanceID, or is a registered "
          "ID that is assigned to the business entity by a recognized "
          "global authority (This is similar to the <Schema "
          "Name>_<Class Name> structure of Schema class names.) In "
          "addition, to ensure uniqueness <OrgID> MUST NOT contain a "
          "colon (':'). When using this algorithm, the first colon to "
          "appear in InstanceID MUST appear between <OrgID> and "
          "<LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD not "
          "be re-used to identify different underlying (real-world) "
          "elements. If the above 'preferred' algorithm is not used, "
          "the defining entity MUST assure that the resultant "
          "InstanceID is not re-used across any InstanceIDs produced "
          "by this or other providers for this instance's NameSpace. \n"
          "For DMTF defined instances, the 'preferred' algorithm MUST "
          "be used with the <OrgID> set to 'CIM'.")]
   string InstanceID;

      [Required, Override ( "Name" ), Description (
          "The user friendly name for this instance of Job. In "
          "addition, the user friendly name can be used as a property "
          "for a search or query. (Note: Name does not have to be "
          "unique within a namespace.)")]
   string Name;

      [Description (
          "JobState is an integer enumeration that indicates the "
          "operational state of a Job. It can also indicate "
          "transitions between these states, for example, 'Shutting "
          "Down' and 'Starting'. Following is a brief description of "
          "the states: \n"
          "New (2) indicates that the job has never been started. \n"
          "Starting (3) indicates that the job is moving from the "
          "'New', 'Suspended', or 'Service' states into the 'Running' "
          "state. \n"
          "Running (4) indicates that the Job is running. \n"
          "Suspended (5) indicates that the Job is stopped, but may be "
          "restarted in a seamless manner. \n"
          "Shutting Down (6) indicates the job is moving to a "
          "'Completed', 'Terminated', or 'Killed' state. \n"
          "Completed (7) indicates that the job has completed "
          "normally. \n"
          "Terminated (8) indicates that the job has been stopped by a "
          "'Terminate' state change request. The job and all its "
          "underlying processes are ended and may be restarted (this "
          "is job-specific) only as a new job. \n"
          "Killed (9) indicates that the job has been stopped by a "
          "'Kill' state change request. Underlying processes may have "
          "been left running and cleanup may be required to free up "
          "resources. \n"
          "Exception (10) indicates that the Job is in an abnormal "
          "state that may be indicative of an error condition. Actual "
          "status may be surfaced though job-specific objects. \n"
          "Service (11) indicates that the Job is in a vendor-specific "
          "state that supports problem discovery and/or resolution."), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", "11",
          "12..32767", "32768..65535" }, 
       Values { "New", "Starting", "Running", "Suspended",
          "Shutting Down", "Completed", "Terminated", "Killed",
          "Exception", "Service", "DMTF Reserved", "Vendor Reserved" }]
   uint16 JobState;

      [Description (
          "The date/time when the Job's State last changed. If the "
          "state of the Job has not changed and this property is "
          "populated, then it MUST be set to a 0 interval value. If a "
          "state change was requested, but rejected or not yet "
          "processed, the property MUST NOT be updated.")]
   datetime TimeOfLastStateChange;

      [Description (
          "Requests that the job's state be changed to the value "
          "specified in the RequestedState parameter. Invoking the "
          "RequestStateChange method multiple times could result in "
          "earlier requests being overwritten/lost. \n"
          "If 0 is returned, then the task completed successfully. Any "
          "other return code indicates an error condition."), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported",
          "Unknown/Unspecified Error",
          "Can NOT complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Transition Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific" }]
   uint32 RequestStateChange( 
         [IN, Description (
             "Changes the state of a job. \n"
             "Start (2) changes the state to 'Running'. \n"
             "Suspend (3) stops the job temporarily. The intention is "
             "to subsequently restart the job with 'Start'. It may be "
             "possible to enter the 'Service' state while suspended - "
             "this is job-specific. \n"
             "Terminate (4) stops the job cleanly, saving data, "
             "preserving state, and shutting down all underlying "
             "processes in an orderly manner. \n"
             "Kill (5) terminates the job immediately with no "
             "requirement to save data or preserve state. Service (6) "
             "puts the job into a vendor-specific service state. The "
             "job may be able to be restarted."), 
          ValueMap { "2", "3", "4", "5", "6", "7..32767",
             "32768..65535" }, 
          Values { "Start", "Suspend", "Terminate", "Kill", "Service",
             "DMTF Reserved", "Vendor Reserved" }]
      uint16 RequestedState, 
         [IN, Description (
             "A timeout period that specifies the maximum amount of "
             "time that the client expects the transition to the new "
             "state to take. The interval format MUST be used to "
             "specify the TimeoutPeriod. A value of 0 or a null "
             "parameter indicates that the client has no time "
             "requirements for the transition. \n"
             "If this property does not contain 0 or null and the "
             "implementation doesn't support this parameter. A return "
             "code of 'Use Of Timeout Parameter Not Supported' MUST be "
             "returned.")]
      datetime TimeoutPeriod); 

      [Required, Description (
          "The amount of time the Job is retained after it has "
          "finished executing, either succeeding or failing in that "
          "execution. The job MUST remain in existence for some period "
          "of time regardless of the value of the DeleteOnCompletion "
          "property. \n"
          "The default is five minutes.") ,
       Write(true)]
   datetime TimeBeforeRemoval = "00000000000500.000000:000";

};


// ==================================================================
// EnabledLogicalElement
// ==================================================================
   [Abstract, Version ( "2.8.0" ), Description (
       "This class extends LogicalElement to abstract the concept of "
       "an element that is enabled and disabled, such as a "
       "LogicalDevice or a ServiceAccessPoint.")]
class CIM_EnabledLogicalElement : CIM_LogicalElement {

      [Description (
          "EnabledState is an integer enumeration that indicates the "
          "enabled/disabled states of an element. It can also indicate "
          "the transitions between these requested states. For "
          "example, shutting down (value = 4) and starting (value=10) "
          "are transient states between enabled and disabled. The "
          "following text briefly summarizes the various "
          "enabled/disabled states: \n"
          "Enabled (2) indicates that the element is/could be "
          "executing commands, will process any queued commands, and "
          "queues new requests. \n"
          "Disabled (3) indicates that the element will not execute "
          "commands and will drop any new requests. \n"
          "Shutting Down (4) indicates that the element is in the "
          "process of going to a Disabled state. \n"
          "Not Applicable (5) indicates the element doesn't support "
          "being enabled/disabled. \n"
          "Enabled but Offline (6) indicates that the element may be "
          "completing commands, and will drop any new requests. \n"
          "Test (7) indicates that the element is in a test state. \n"
          "Deferred (8) indicates that the element may be completing "
          "commands, but will queue any new requests. \n"
          "Quiesce (9) indicates that the element is enabled but in a "
          "restricted mode. The element's behavior is similar to the "
          "Enabled state, but it only processes a restricted set of "
          "commands. All other requests are queued. \n"
          "Starting (10) indicates that the element is in the process "
          "of going to an Enabled state. New requests are queued."), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
          "10", "11..32767", "32768..65535" }, 
       Values { "Unknown", "Other", "Enabled", "Disabled",
          "Shutting Down", "Not Applicable", "Enabled but Offline",
          "In Test", "Deferred", "Quiesce", "Starting",
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { 
          "CIM_EnabledLogicalElement.OtherEnabledState" }]
   uint16 EnabledState = 5;

      [Description (
          "A string describing the element's enabled/disabled state "
          "when the EnabledState property is set to 1 (\"Other\"). "
          "This property MUST be set to NULL when EnabledState is any "
          "value other than 1."), 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   string OtherEnabledState;

      [Description (
          "RequestedState is an integer enumeration indicating the "
          "last requested or desired state for the element. The actual "
          "state of the element is represented by EnabledState. This "
          "property is provided to compare the last requested and "
          "current enabled/disabled states. Note that when "
          "EnabledState is set to 5 (\"Not Applicable\"), then this "
          "property has no meaning. By default, the element's "
          "RequestedState is 5 (\"No Change\"). Refer to the "
          "EnabledState's property Description for explanations of the "
          "values in the RequestedState enumeration. \n"
          "\n"
          "It should be noted that there are two new values in "
          "RequestedState that build on the statuses of EnabledState. "
          "These are \"Reboot\" (10) and \"Reset\" (11). The former, "
          "Reboot, refers to doing a \"Shut Down\" and then moving to "
          "an \"Enabled\" state. The latter, Reset, indicates that the "
          "element is first \"Disabled\" and then \"Enabled\". The "
          "distinction between requesting \"Shut Down\" and "
          "\"Disabled\" should also be noted. The former, Shut Down, "
          "requests an orderly transition to the Disabled state, and "
          "MAY involve removing power, to completely erase any "
          "existing state. The latter, the Disabled state, requests an "
          "immediate disabling of the element, such that it will not "
          "execute or accept any commands or processing requests. \n"
          "\n"
          "This property is set as the result of a method invocation "
          "(such as Start or StopService on CIM_Service), or may be "
          "overridden and defined as WRITEable in a subclass. The "
          "method approach is considered superior to a WRITEable "
          "property, since it allows an explicit invocation of the "
          "operation and the return of a result code."), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", "11",
          "..", "32768..65535" }, 
       Values { "Enabled", "Disabled", "Shut Down", "No Change",
          "Offline", "Test", "Deferred", "Quiesce", "Reboot", "Reset",
          "DMTF Reserved", "Vendor Reserved" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.EnabledState" }]
   uint16 RequestedState = 5;

      [Write, Description (
          "An enumerated value indicating an administrator's "
          "default/startup configuration for an element's Enabled "
          "State. By default, the element is \"Enabled\" (value=2)."), 
       ValueMap { "2", "3", "5", "6", "7", "8..32767", "32768..65535" }, 
       Values { "Enabled", "Disabled", "Not Applicable",
          "Enabled but Offline", "No Default", "DMTF Reserved",
          "Vendor Reserved" }]
   uint16 EnabledDefault = 2;

      [Description (
          "The date/time when the element's EnabledState last changed. "
          "If the state of the element has not changed and this "
          "property is populated, then it MUST be set to a 0 interval "
          "value. If a state change was requested, but rejected or not "
          "yet processed, the property MUST NOT be updated.")]
   datetime TimeOfLastStateChange;

      [Description (
          "Requests that the element's state be changed to the value "
          "specified in the RequestedState parameter. When the "
          "requested state change takes place, the element's "
          "EnabledState and RequestedState will be the same. Invoking "
          "the RequestStateChange method multiple times could result "
          "in earlier requests being overwritten/lost. \n"
          "If 0 is returned, then the task completed successfully and "
          "the use of ConcreteJob was not required. If 4096 (0x1000) "
          "is returned, then the task will take some time to complete, "
          "ConcreteJob will be created, and its reference returned in "
          "the output parameter Job. Any other return code indicates "
          "an error condition."), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "4096",
          "4097", "4098", "4099", "4100..32767", "32768..65535" }, 
       Values { "Completed with No Error", "Not Supported",
          "Unknown/Unspecified Error",
          "Can NOT complete within Timeout Period", "Failed",
          "Invalid Parameter", "In Use", "DMTF Reserved",
          "Method Parameters Checked - Job Started",
          "Invalid State Transition",
          "Use of Timeout Parameter Not Supported", "Busy",
          "Method Reserved", "Vendor Specific" }, 
       ModelCorrespondence { "CIM_EnabledLogicalElement.RequestedState" 
          }]
   uint32 RequestStateChange( 
         [IN, Description (
             "The state requested for the element. This information "
             "will be placed into the instance's RequestedState "
             "property if the RequestStateChange method's return code "
             "is 0, 3, or 4096 (0x1000) - 'Completed with No Error', "
             "'Timeout', or 'Job Started' respectively. Refer to the "
             "description of the EnabledState and RequestedState "
             "properties for the detailed meanings of the "
             "RequestedState values."), 
          ValueMap { "2", "3", "4", "6", "7", "8", "9", "10", "11",
             "..", "32768..65535" }, 
          Values { "Enabled", "Disabled", "Shut Down", "Offline",
             "Test", "Defer", "Quiesce", "Reboot", "Reset",
             "DMTF Reserved", "Vendor Reserved" }, 
          ModelCorrespondence { 
             "CIM_EnabledLogicalElement.RequestedState" }]
      uint16 RequestedState, 
         [IN ( false ), OUT, Description (
             "Reference to the job (may be null if task completed).")]
      CIM_ConcreteJob REF Job, 
         [IN, Description (
             "A timeout period that specifies the maximum amount of "
             "time that the client expects the transition to the new "
             "state to take. The interval format MUST be used to "
             "specify the TimeoutPeriod. A value of 0 or a null "
             "parameter indicates that the client has no time "
             "requirements for the transition. \n"
             "If this property does not contain 0 or null and the "
             "implementation doesn't support this parameter. A return "
             "code of 'Use Of Timeout Parameter Not Supported' MUST be "
             "returned.")]
      datetime TimeoutPeriod); 
};


// ==================================================================
// Synchronized
// ==================================================================
   [Association, Version ( "2.8.0" ), Description (
       "Indicates that two ManagedElements were aligned or made to be "
       "equivalent at the specified point in time. If the boolean "
       "property SyncMaintained is TRUE, then synchronization of the "
       "Elements is preserved. Both like and unlike objects may be "
       "synchronized. For example, two WatchDog timers may be aligned, "
       "or the contents of a LogicalFile may be synchronized with the "
       "contents of a StorageExtent.")]
class CIM_Synchronized {

      [Key, Description (
          "SystemElement represents one ManagedElement that is "
          "synchronized with the entity referenced as SyncedElement.")]
   CIM_ManagedElement REF SystemElement;

      [Key, Description (
          "SyncedElement represents another ManagedElement that is "
          "synchronized with the entity referenced as SystemElement.")]
   CIM_ManagedElement REF SyncedElement;

      [Description (
          "The point in time that the Elements were synchronized.")]
   datetime WhenSynced;

      [Description (
          "Boolean indicating whether synchronization is maintained.")]
   boolean SyncMaintained;
};


// ==================================================================
// System
// ==================================================================
   [Abstract, Version ( "2.7.0" ), Description (
       "CIM_System represents an entity made up of component parts "
       "(defined by the SystemComponent relationship), that operates "
       "as a 'functional whole'. Systems are top level objects in the "
       "CIM hierarchy, requiring no scoping or weak relationships in "
       "order to exist and have context. It should be reasonable to "
       "uniquely name and manage a System at an enterprise level. For "
       "example, a ComputerSystem is a kind of System that can be "
       "uniquely named and independently managed in an enterprise. "
       "However, this is not true for the power supply (or the power "
       "supply sub-'system') within the computer. \n"
       "\n"
       "Although a System may be viewed as a Collection, this is not "
       "the correct model. A Collection is simply a 'bag' that 'holds' "
       "its members. A System is a higher level abstraction, built out "
       "of its individual components. It is more than a sum of its "
       "parts. Note that System is a subclass of EnabledLogicalElement "
       "which allows the entire abstraction to be functionally "
       "enabled/disabled - at a higher level than enabling/disabling "
       "its component parts.")]
class CIM_System : CIM_EnabledLogicalElement {

      [Key, Description (
          "CreationClassName indicates the name of the class or the "
          "subclass used in the creation of an instance. When used "
          "with the other key properties of this class, this property "
          "allows all instances of this class and its subclasses to be "
          "uniquely identified."), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Override ( "Name" ), Description (
          "The inherited Name serves as key of a System instance in an "
          "enterprise environment."), 
       MaxLen ( 256 )]
   string Name;

      [Description (
          "The System object and its derivatives are Top Level Objects "
          "of CIM. They provide the scope for numerous components. "
          "Having unique System keys is required. A heuristic can be "
          "defined in individual System subclasses to attempt to "
          "always generate the same System Name Key. The NameFormat "
          "property identifies how the System name was generated, "
          "using the subclass' heuristic."), 
       MaxLen ( 64 )]
   string NameFormat;

      [Write, Description (
          "The name of the primary system owner. The system owner is "
          "the primary user of the system."), 
       MaxLen ( 64 ), 
       MappingStrings { "MIF.DMTF|General Information|001.3" }]
   string PrimaryOwnerName;

      [Write, Description (
          "A string that provides information on how the primary "
          "system owner can be reached (e.g. phone number, email "
          "address, ...)."), 
       MaxLen ( 256 ), 
       MappingStrings { "MIF.DMTF|General Information|001.4" }]
   string PrimaryOwnerContact;

      [Write, Description (
          "An array (bag) of strings that specify the administrator "
          "-defined roles this System plays in the managed "
          "environment. Examples might be 'Building 8 print server' or "
          "'Boise user directories'. A single system may perform "
          "multiple roles. \n"
          "Note that instrumentation's view of a System's 'roles' is "
          "defined by instantiating a specific subclass of System and/ "
          "or by properties in a subclass. For example, a "
          "ComputerSystem's purpose is defined using the Dedicated and "
          "OtherDedicatedDescription properties.")]
   string Roles[];
};


// ==================================================================
// SystemComponent
// ==================================================================
   [Association, Aggregation, Version ( "2.7.0" ), Description (
       "CIM_SystemComponent is a specialization of the CIM_Component "
       "association that establishes 'part of' relationships between a "
       "System and any ManagedSystemElements of which it is composed. "
       "\nThe use of this association is cautioned - versus the use of "
       "a subclass such as SystemDevice, or a peer association such as "
       "HostedService. This class is very broadly defined which can "
       "lead to erroneous use. For example, Access Points that are "
       "dependent on (and hosted on) a System are NOT Components of "
       "the System. The System is not made up of any AccessPoint "
       "'parts', which is why a Dependency association, "
       "HostedAccessPoint, was defined. Similarly, a PhysicalPackage "
       "is not a 'part' of a System, since the physical element exists "
       "independently of any internal components, software, etc. In "
       "fact, again, a Dependency relationship is true - where a "
       "ComputerSystem is Dependent on its packaging, as described by "
       "the ComputerSystemPackage association.")]
class CIM_SystemComponent : CIM_Component {

      [Aggregate, Override ( "GroupComponent" ), Description (
          "The parent System in the Association.")]
   CIM_System REF GroupComponent;

      [Override ( "PartComponent" ), Description (
          "The child element that is a component of a System.")]
   CIM_ManagedSystemElement REF PartComponent;
};


// ==================================================================
// AdminDomain
// ==================================================================

   [Version ( "2.8.0" ), Description (
       "This is a special grouping of ManagedSystemElements. The "
       "grouping is viewed as a single entity, reflecting that all of "
       "its components are administered similarly - either by the same "
       "user, group of users or policy. It serves as an aggregation "
       "point to associate one or more of the following elements: "
       "network devices, such as routers and switches, servers, and "
       "other resources that can be accessed by end systems. This "
       "grouping of devices plays an essential role in ensuring that "
       "the same administrative policy and actions are applied to all "
       "of the devices in the grouping. The specific behavior and/or "
       "semantics of the AdminDomain can be identified through its "
       "aggregated and associated entities.")]
class CIM_AdminDomain : CIM_System {

      [Override ( "NameFormat" ), Description (
          "The NameFormat property identifies how the Name of the "
          "AdminDomain is generated, using the heuristic specified in "
          "the CIM V2 System Model spec. It assumes that the "
          "documented rules are traversed in order, to determine and "
          "assign a Name. The NameFormat Values list defines the "
          "precedence order for assigning the Name of the AdminDomain. "
          "\n\n"
          "\"FC\" has been deprecated and replaced by \"WWN\" to be "
          "consistent with the other ValueMaps."), 
       ValueMap { "Other", "AS", "NAP", "NOC", "POP", "RNP", "IP",
          "IPX", "SNA", "Dial", "WAN", "LAN", "ISDN", "Frame Relay",
          "ATM", "E.164", "IB", "FC", "Policy Repository", "WWN" }, 
       Values { "Other", "Autonomous System",
          "Network Access Provider", "Network Operations Center",
          "Point of Presence", "Regional Network Provider", "IP",
          "IPX", "SNA", "Dial", "WAN", "LAN", "ISDN", "Frame Relay",
          "ATM", "E.164", "Infiniband", "Fibre Channel",
          "Policy Repository", "Fibre Channel Worldwide Name" }, 
       ModelCorrespondence { "CIM_AdminDomain.Name" }]
   string NameFormat;
};


// ==================================================================
// ContainedDomain
// ==================================================================
   [Association, Aggregation, Version ( "2.6.0" ), Description (
       "A relationship that aggregates one or more lower-level "
       "AdminDomain instances into a higher-level AdminDomain.")]
class CIM_ContainedDomain : CIM_SystemComponent {

      [Aggregate, Override ( "GroupComponent" ), Description (
          "An AdminDomain that aggregates other AdminDomains.")]
   CIM_AdminDomain REF GroupComponent;

      [Override ( "PartComponent" ), Description (
          "An AdminDomain aggregated by another AdminDomain.")]
   CIM_AdminDomain REF PartComponent;
};




// ===================================================================
// end of file
// ===================================================================
