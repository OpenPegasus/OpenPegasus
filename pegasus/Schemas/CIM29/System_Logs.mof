// ===================================================================
// Title: System_Logs
// $State: Exp $
// $Date: 2005/02/17 00:09:56 $
// $RCSfile: System_Logs.mof,v $
// $Revision: 1.1 $
// ===================================================================
//#pragma inLine ("Includes/copyright.inc")
// Copyright 1998-2005 Distributed Management Task Force, Inc. (DMTF).
// All rights reserved.
// DMTF is a not-for-profit association of industry members dedicated
// to promoting enterprise and systems management and interoperability.
// DMTF specifications and documents may be reproduced for uses
// consistent with this purpose by members and non-members,
// provided that correct attribution is given.
// As DMTF specifications may be revised from time to time,
// the particular version and release date should always be noted.
// 
// Implementation of certain elements of this standard or proposed
// standard may be subject to third party patent rights, including
// provisional patent rights (herein "patent rights"). DMTF makes
// no representations to users of the standard as to the existence
// of such rights, and is not responsible to recognize, disclose, or
// identify any or all such third party patent right, owners or
// claimants, nor for any incomplete or inaccurate identification or
// disclosure of such rights, owners or claimants. DMTF shall have no
// liability to any party, in any manner or circumstance, under any
// legal theory whatsoever, for failure to recognize, disclose, or
// identify any such third party patent rights, or for such party's
// reliance on the standard or incorporation thereof in its product,
// protocols or testing procedures. DMTF shall have no liability to
// any party implementing such standard, whether such implementation
// is foreseeable or not, nor to any patent owner or claimant, and shall
// have no liability or responsibility for costs or losses incurred if
// a standard is withdrawn or modified after publication, and shall be
// indemnified and held harmless by any party implementing the
// standard from any and all claims of infringement by a patent owner
// for such implementations.
// 
// For information about patents held by third-parties which have
// notified the DMTF that, in their opinion, such patent may relate to
// or impact implementations of DMTF standards, visit
// http://www.dmtf.org/about/policies/disclosures.php.
//#pragma inLine
// ===================================================================
// Description: The System Model defines system related management
//              concepts. This file defines the specific concepts to
//              manage message logs and log records.
// 
//              The object classes below are listed in an order that
//              avoids forward references. Required objects, defined
//              by other working groups, are omitted.
// ==================================================================
// Change Log for v2.9 Final
// CR1549 - Finalize diagnostics model in 2.9
// CR1532 - Fix the LogRecord Key Conflict - add Record Class
// 
// Change Log for v2.9 Preliminary
// CR1321 - Superclass MessageLog
// 
// Change Log for v2.8 Final
// CR1204 - Removal of Experimental qualifier for Preliminary to Final
// CR1223 - SysDev Omnibus MOF corrections.
// 
// Change Log for v2.8 Preliminary
// CR1056 - Addition of OperationLog
// CR938 - Add parseable string for LogRecord data
// 
// Change Log for v2.7
// CR757 - Change the subclassing of MessageLog from LogicalElement
//         to EnabledLogicalElement
// CR771 - Add the Composition qualifer to RecordInLog
// ===================================================================

#pragma locale ("en_US")

// ===================================================================
// Log
// ===================================================================
   [Abstract, Version ( "2.9.0" ), Description (
       "Log represents any type of event, error or informational "
       "register or chronicle. The object describes the existence of "
       "the log and its characteristics. Log does not dictate the form "
       "of the data represented or how records/messages are stored in "
       "the log and/or accessed. Subclasses will define the "
       "appropriate methods and behavior.")]
class CIM_Log : CIM_EnabledLogicalElement {

      [Description (
          "Maximum number of records that can be captured in the Log. "
          "If undefined, a value of zero should be specified.")]
   uint64 MaxNumberOfRecords;

      [Description (
          "Current number of records in the Log."), 
       Gauge]
   uint64 CurrentNumberOfRecords;

      [Description (
          "Requests that the Log be cleared of all entries. \n"
          "The return value should be 0 if the request was "
          "successfully executed, 1 if the request is not supported, "
          "and some other value, as indicated by the ValueMap/Values "
          "qualifiers, if an error occurred."), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6..0x0FFF",
          "0x1000..0x7FFF", "0x8000.." }, 
       Values { "Completed with no error", "Not Supported",
          "Unspecified Error", "Timeout", "Failed",
          "Invalid Parameter", "DMTF_Reserved", "Method_Reserved",
          "Vendor_Reserved" }]
   uint32 ClearLog(); 

};


// ===================================================================
// MessageLog
// ===================================================================
   [Version ( "2.9.0" ), Description (
       "MessageLog represents any type of event, error or "
       "informational register or chronicle. The object describes the "
       "existence of the log and its characteristics. Several methods "
       "are defined for retrieving, writing and deleting log entries, "
       "and maintaining the log. This type of log uses iterators to "
       "access the log records, whereas its peer class, RecordLog, "
       "uses more abstracted access mechanisms.")]
class CIM_MessageLog : CIM_Log {

      [Key, Description (
          "CreationClassName indicates the name of the class or the "
          "subclass used in the creation of an instance. When used "
          "with the other key properties of this class, this property "
          "allows all instances of this class and its subclasses to be "
          "uniquely identified."), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Override ( "Name" ), Description (
          "The inherited Name serves as part of the key (a unique "
          "identifier) for the MessageLog instance."), 
       MaxLen ( 256 )]
   string Name;

      [Description (
          "An array of integers indicating the Log capabilities. "
          "Information such as \"Write Record Supported\" (value= 2) "
          "or \"Variable Length Records Supported\" (8) is specified "
          "in this property."), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
          "10" }, 
       Values { "Unknown", "Other", "Write Record Supported",
          "Delete Record Supported", "Can Move Backward in Log",
          "Freeze Log Supported", "Clear Log Supported",
          "Supports Addressing by Ordinal Record Number",
          "Variable Length Records Supported",
          "Variable Formats for Records",
          "Can Flag Records for Overwrite" }, ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_MessageLog.CapabilitiesDescriptions" 
          }]
   uint16 Capabilities[];

      [Description (
          "An array of free-form strings providing more detailed "
          "explanations for any of the Log features indicated in the "
          "Capabilities array. Note, each entry of this array is "
          "related to the entry in the Capabilities array that is "
          "located at the same index."), 
       ArrayType ( "Indexed" ), 
       ModelCorrespondence { "CIM_MessageLog.Capabilities" }]
   string CapabilitiesDescriptions[];

      [Description (
          "The maximum size, in bytes, to which the Log can grow. If "
          "there is no maximum, then MaxLogSize should be set to 0."), 
       Units ( "Bytes" )]
   uint64 MaxLogSize;

      [Description (
          "The size of the Log header, in bytes, if one is present. If "
          "there is no Log header, then this property should be set to "
          "0. Headers may include general information about the Log "
          "such as the current number of records, time of last update, "
          "or a pointer to the location of the first Log entry. Note "
          "that this property is NOT the size of the header for an "
          "individual Log entry. The latter is described by the "
          "property, SizeOfRecordHeader."), 
       Units ( "Bytes" )]
   uint64 SizeOfHeader;

      [Description (
          "If the SizeOfHeader property is non-zero, this property "
          "describes the structure and format of the Log header. It is "
          "a free-form string. If the SizeOfHeader property is 0, then "
          "the information in this property is undefined.")]
   string HeaderFormat;

      [Description (
          "Maximum size, in bytes, to which an individual Log entry "
          "(record) can grow - if the Capabilities array includes a "
          "value of 7 (\"Variable Length Records Supported\"). If the "
          "Capabilities array does not include a 7, then the Log only "
          "supports fixed length entries. The size of these entries is "
          "described by this property."), 
       Units ( "Bytes" )]
   uint64 MaxRecordSize;

      [Description (
          "The size of the header for the Log's individual entries, in "
          "bytes, if record headers are defined. If there are no "
          "record headers, then this property should be set to 0. "
          "Record headers may include information such as the type of "
          "the Log entry, the date/time that the entry was last "
          "updated, or a pointer to the start of optional data. Note "
          "that this property defines the header size for individual "
          "records in the Log, while the SizeOfHeader property "
          "describes the Log's overall header, typically located at "
          "the start of the MessageLog."), 
       Units ( "Bytes" )]
   uint64 SizeOfRecordHeader;

      [Description (
          "If the SizeOfRecordHeader property is non-zero, this "
          "property describes the structure and format of the record "
          "headers. It is a free-form string. If the "
          "SizeOfRecordHeader property is 0, then the information in "
          "this property is undefined.")]
   string RecordHeaderFormat;

      [Description (
          "An enumeration describing the behavior of the Log, when it "
          "becomes full or near full. For example, the Log may wrap "
          "(value=2) or may simply stop recording entries (value =7). "
          "\n\n"
          "Some of the property's possible values need further "
          "explanation: \n"
          "3=\"Clear When Near Full\" indicates that all of the Log's "
          "entries will be deleted when a specified record capacity is "
          "reached. The capacity is specified in percentage, using the "
          "property, PercentageNearFull. 'Near Full' may be less than "
          "100% if the Log takes time to clear, and a position should "
          "always be available for new records. \n"
          "4=\"Overwrite Outdated When Needed\" describes that Log "
          "entries (timestamped later than the date/time specified in "
          "the property, TimeWhenOutdated) can be overwritten. \n"
          "5=\"Remove Outdated Records\" specifies that records "
          "(timestamped later than the date/time specified in the "
          "property, TimeWhenOutdated) are logically and/or physically "
          "removed from the Log. \n"
          "6=\"Overwrite Specific Records\" indicates that specially "
          "flagged records may be overwritten. This property only "
          "makes sense when the Capabilities array includes a value of "
          "10, \"Can Flag Records for Overwrite\"."), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7" }, 
       Values { "Unknown", "Other", "Wraps When Full",
          "Clear When Near Full", "Overwrite Outdated When Needed",
          "Remove Outdated Records", "Overwrite Specific Records",
          "Never Overwrite" }, 
       ModelCorrespondence { "CIM_MessageLog.OtherPolicyDescription",
          "CIM_MessageLog.TimeWhenOutdated",
          "CIM_MessageLog.PercentageNearFull" }]
   uint16 OverwritePolicy;

      [Description (
          "When the OverwritePolicy specifies a value of 1 "
          "(\"Other\"), the Log's behavior can be explained using this "
          "property. If OverwritePolicy is not 1, then this property's "
          "contents are undefined."), 
       ModelCorrespondence { "CIM_MessageLog.OverwritePolicy" }]
   string OtherPolicyDescription;

      [Description (
          "If the OverwritePolicy is based on 'outdated' records "
          "(values 4 or 5), this property defines when a Log entry is "
          "considered to be outdated - either by time interval or at a "
          "specific date and time."), 
       ModelCorrespondence { "CIM_MessageLog.OverwritePolicy" }]
   datetime TimeWhenOutdated;

      [Description (
          "If the OverwritePolicy is based on clearing records when "
          "the Log is near full (value=3), this property defines the "
          "record capacity (in percentage) that is considered to be "
          "'near full'."), 
       Units ( "Percent" ), 
       ModelCorrespondence { "CIM_MessageLog.OverwritePolicy" }]
   uint8 PercentageNearFull;

      [Description (
          "An enumeration describing the last change to the "
          "MessageLog."), 
       ValueMap { "0", "1", "2", "3", "4" }, 
       Values { "Unknown", "Add", "Delete", "Modify", "Log Cleared" }]
   uint16 LastChange;

      [Description (
          "When a change is made to the Log, the date/time of that "
          "modification is captured. This property could be used to "
          "event against any update to the MessageLog.")]
   datetime TimeOfLastChange;

      [Description (
          "When a change is made to the Log, the record number that "
          "was modified is captured.")]
   uint64 RecordLastChanged;

      [Description (
          "Boolean indicating that the Log is currently frozen and "
          "modifications are not allowed.")]
   boolean IsFrozen;

      [Description (
          "An enumeration describing the character set used to record "
          "data in the individual Log entries. For example, the Log "
          "records may contain ASCII data (value=2), or be raw octet "
          "strings (value=10)."), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "9",
          "10", "11" }, 
       Values { "Unknown", "Other", "ASCII", "Unicode", "ISO2022",
          "ISO8859", "Extended UNIX Code", "UTF-8", "UCS-2",
          "Bitmapped Data", "OctetString",
          "Defined by Individual Records" }]
   uint16 CharacterSet;

      [Description (
          "Requests that an iteration of the MessageLog be established "
          "and that the iterator be set to the first entry in the Log. "
          "An identifier for the iterator is returned as an output "
          "parameter of the method. \n"
          "\n"
          "Regarding iteration, you have 2 choices: 1) Embed iteration "
          "data in the method call, and allow implementations to "
          "track/ store this data manually; or, 2) Iterate using a "
          "separate object (for example, class ActiveIterator) as an "
          "iteration agent. The first approach is used here for "
          "interoperability. The second requires an instance of the "
          "Iterator object for EACH iteration in progress. 2's "
          "functionality could be implemented underneath 1. \n"
          "\n"
          "The return value from PositionToFirstRecord should be 0 if "
          "the request was successfully executed, 1 if the request is "
          "not supported and some other value if an error occurred. In "
          "a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are 'translated' may "
          "also be specified in the subclass as a Values array "
          "qualifier.")]
   uint32 PositionToFirstRecord ( 
         [IN ( false ), OUT, Description (
             "An identifier for the iterator.")]
      string IterationIdentifier); 

      [Description (
          "Requests that the Log's iteration identifier be advanced or "
          "retreated a specific number of records, or set to the entry "
          "at a specified numeric location. These two different "
          "behaviors are accomplished using the input parameters of "
          "the method. Advancing or retreating is achieved by setting "
          "the MoveAbsolute boolean to FALSE, and then specifying the "
          "number of entries to advance or retreat as positive or "
          "negative values in the RecordNumber parameter. Moving to a "
          "specific record number is accomplished by setting the "
          "MoveAbsolute input parameter to TRUE, and then placing the "
          "record number into the RecordNumber parameter. This can "
          "only be done if the Capabilities array includes a value of "
          "7, \"Supports Addressing by Ordinal Record Number\". \n"
          "\n"
          "After the method completes and if ordinal record numbers "
          "are supported (the Capabilities array includes a 7), the "
          "current record number is returned in the RecordNumber "
          "output parameter. Otherwise, the value of the parameter is "
          "undefined. \n"
          "\n"
          "IterationIdentifier is defined as an Input/Output method "
          "parameter to allow the Log to embed state information in "
          "the Identifier and potentially let the identifier be "
          "maintained by the using application. \n"
          "\n"
          "The return value from PositionAtRecord should be 0 if the "
          "request was successfully executed, 1 if the request is not "
          "supported and some other value if an error occurred. If the "
          "request is not supported, check the Capabilities array "
          "regarding support for ordinal record number addressing and "
          "backward movement in the Log (values 7 and 4, "
          "respectively). \n"
          "\n"
          "Note: In a subclass, the set of possible return codes could "
          "be described using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are 'translated' may "
          "also be specified in the subclass as a Values array "
          "qualifier.")]
   uint32 PositionAtRecord ( 
         [IN, OUT, Description (
             "An identifier for the iterator.")]
      string IterationIdentifier, 
         [IN, Description (
             "Advancing or retreating the IterationIdentifier is "
             "achieved by setting the MoveAbsolute boolean to FALSE, "
             "and specifying the number of entries to advance or "
             "retreat as positive or negative values in the "
             "RecordNumber parameter. Moving to a specific record "
             "number is accomplished by setting the MoveAbsolute "
             "parameter to TRUE, and placing the record number into "
             "the RecordNumber parameter.")]
      boolean MoveAbsolute, 
         [IN, OUT, Description (
             "The relative or absolute record number.")]
      sint64 RecordNumber); 

      [Description (
          "Requests that the record indicated by the "
          "IterationIdentifier be retrieved from the MessageLog. After "
          "retrieval, the IterationIdentifier may be advanced to the "
          "next record by setting the PositionToNext input parameter "
          "to TRUE. Two output parameters are defined for the method - "
          "RecordData which holds the contents of the Log entry (as an "
          "array of bytes that can be recast to an appropriate "
          "format), and RecordNumber which returns the current record "
          "number addressed via the Iteration Identifier. The "
          "RecordNumber parameter is only defined/valid when the "
          "Capabilities array indicates that ordinal record number "
          "addressing is supported (a value of 7). \n"
          "\n"
          "IterationIdentifier is defined as an Input/Output method "
          "parameter to allow the Log to embed state information in "
          "the Identifier and potentially let the identifier be "
          "maintained by the using application. \n"
          "\n"
          "The return value from GetRecord should be 0 if the request "
          "was successfully executed, 1 if the request is not "
          "supported, and some other value if an error occurred. In a "
          "subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are 'translated' may "
          "also be specified in the subclass as a Values array "
          "qualifier.")]
   uint32 GetRecord ( 
         [IN, OUT, Description (
             "An identifier for the iterator.")]
      string IterationIdentifier, 
         [IN, Description (
             "Boolean indicating that the Iteration Identifier should "
             "be advanced to the next record, after retrieving the "
             "current Log entry.")]
      boolean PositionToNext, 
         [IN ( false ), OUT, Description (
             "The record number.")]
      uint64 RecordNumber, 
         [IN ( false ), OUT, Description (
             "The record data.")]
      uint8 RecordData[]); 

      [Description (
          "Requests that the record indicated by the "
          "IterationIdentifier be deleted from the MessageLog. After "
          "deletion, the Iteration Identifier may be advanced to the "
          "next record by setting the PositionToNext input parameter "
          "to TRUE. If set to FALSE, then the IterationIdentifier will "
          "be positioned at the previous record. Two output parameters "
          "are defined for the method - RecordData which holds the "
          "contents of the deleted Log entry (as an array of bytes "
          "that can be recast to an appropriate format or discarded), "
          "and RecordNumber which returns the current record number "
          "addressed via the IterationIdentifier. The RecordNumber "
          "parameter is only defined/valid when the Capabilities array "
          "indicates that ordinal record number addressing is "
          "supported (a value of 7). \n"
          "\n"
          "IterationIdentifier is defined as an Input/Output method "
          "parameter to allow the Log to embed state information in "
          "the Identifier and potentially let the identifier be "
          "maintained by the using application. \n"
          "\n"
          "The return value from DeleteRecord should be 0 if the "
          "request was successfully executed, 1 if the request is not "
          "supported, and some other value if an error occurred. If "
          "the request is not supported, check the Capabilities array "
          "that a value of 3 (\"Delete Record Supported\") is "
          "specified. \n"
          "\n"
          "Note: In a subclass, the set of possible return codes could "
          "be described using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are 'translated' may "
          "also be specified in the subclass as a Values array "
          "qualifier.")]
   uint32 DeleteRecord ( 
         [IN, OUT, Description (
             "An identifier for the iterator.")]
      string IterationIdentifier, 
         [IN, Description (
             "Boolean that when set to TRUE requests the "
             "IterationIdentifier to be advanced to the next record, "
             "after the current entry is deleted. If set to FALSE, "
             "IterationIdentifier is set to the previous record.")]
      boolean PositionToNext, 
         [IN ( false ), OUT, Description (
             "The record number.")]
      uint64 RecordNumber, 
         [IN ( false ), OUT, Description (
             "The record data.")]
      uint8 RecordData[]); 

      [Description (
          "Requests that a record be inserted at the Log position "
          "indicated by the IterationIdentifier. The entry's data is "
          "provided in the RecordData input parameter. After "
          "insertion, the IterationIdentifier may be advanced to the "
          "next record by setting the PositionToNext input parameter "
          "to TRUE. The output parameter, RecordNumber, returns the "
          "current record number addressed via the "
          "IterationIdentifier. This parameter is only defined/valid "
          "when the Capabilities array indicates that ordinal record "
          "number addressing is supported (a value of 7). \n"
          "\n"
          "IterationIdentifier is defined as an Input/Output method "
          "parameter to allow the Log to embed state information in "
          "the Identifier and potentially let the identifier be "
          "maintained by the using application. \n"
          "\n"
          "The return value from WriteRecord should be 0 if the "
          "request was successfully executed, 1 if the request is not "
          "supported, and some other value if an error occurred. If "
          "the request is not supported, check the Capabilities array "
          "that a value of 2 (\"Write Record Supported\") is "
          "specified. \n"
          "\n"
          "Note: In a subclass, the set of possible return codes could "
          "be described using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are 'translated' may "
          "also be specified in the subclass as a Values array "
          "qualifier.")]
   uint32 WriteRecord ( 
         [IN, OUT, Description (
             "An identifier for the iterator.")]
      string IterationIdentifier, 
         [IN, Description (
             "Boolean indicating that the Iteration Identifier should "
             "be advanced to the next record, after writing the Log "
             "entry.")]
      boolean PositionToNext, 
         [IN, Description (
             "The record data.")]
      uint8 RecordData[], 
         [IN ( false ), OUT, Description (
             "The record number.")]
      uint64 RecordNumber); 

      [Description (
          "Requests that an iteration of the Log, identified by the "
          "IterationIdentifier input parameter, be stopped. The return "
          "value from CancelIteration should be 0 if the request was "
          "successfully executed, 1 if the request is not supported "
          "and some other value if an error occurred. In a subclass, "
          "the set of possible return codes could be specified, using "
          "a ValueMap qualifier on the method. The strings to which "
          "the ValueMap contents are 'translated' may also be "
          "specified in the subclass as a Values array qualifier.")]
   uint32 CancelIteration ( 
         [IN, Description (
             "An identifier for the iterator.")]
      string IterationIdentifier); 

      [Description (
          "Requests that the MessageLog be placed in a frozen state "
          "(\"Freeze\" input parameter = TRUE) or 'unfrozen' (= "
          "FALSE). If frozen, modifications to the Log will not be "
          "allowed. If successful, the Log's IsFrozen boolean property "
          "will be updated to reflect the desired state. \n"
          "\n"
          "The method's return code should be 0 if the request was "
          "successfully executed, 1 if the request is not supported "
          "and some other value if an error occurred. If the request "
          "is not supported, check the Capabilities array that a value "
          "of 5 (\"Freeze Log Supported\") is specified. \n"
          "\n"
          "Note: In a subclass, the set of possible return codes could "
          "be described using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are 'translated' may "
          "also be specified in the subclass as a Values array "
          "qualifier.")]
   uint32 FreezeLog( 
         [IN, Description (
             "If TRUE then freeze the log, if FALSE 'unfreeze' the "
             "log.")]
      boolean Freeze); 

      [Description (
          "Requests that the record indicated by the "
          "IterationIdentifier be flagged as overwriteable. This "
          "method is only supported when the Capabilities array "
          "includes a value of 10, \"Can Flag Records for Overwrite\". "
          "After updating the entry, the IterationIdentifier may be "
          "advanced to the next record by setting the PositionToNext "
          "input parameter to TRUE. One output parameter is defined "
          "for the method RecordNumber. It returns the current record "
          "number addressed via the Iteration Identifier. This "
          "parameter is only defined/valid when the Capabilities array "
          "indicates that ordinal record number addressing is "
          "supported (a value of 7). \n"
          "\n"
          "IterationIdentifier is defined as an Input/Output method "
          "parameter to allow the Log to embed state information in "
          "the Identifier and potentially let the identifier be "
          "maintained by the using application. \n"
          "\n"
          "The return value from FlagRecordForOverwrite should be 0 if "
          "the request was successfully executed, 1 if the request is "
          "not supported, and some other value if an error occurred. "
          "In a subclass, the set of possible return codes could be "
          "specified, using a ValueMap qualifier on the method. The "
          "strings to which the ValueMap contents are 'translated' may "
          "also be specified in the subclass as a Values array "
          "qualifier.")]
   uint32 FlagRecordForOverwrite ( 
         [IN, OUT, Description (
             "An identifier for the iterator.")]
      string IterationIdentifier, 
         [IN, Description (
             "Boolean indicating that the Iteration Identifier should "
             "be advanced to the next record, after updating the "
             "current Log entry.")]
      boolean PositionToNext, 
         [IN ( false ), OUT, Description (
             "The record number.")]
      uint64 RecordNumber); 
};

// ===================================================================
// RecordLog
// ===================================================================
   [Version ( "2.9.0" ), Description (
       "RecordLog serves as an aggregation point for LogRecord "
       "objects. This class presents a higher level view of a log than "
       "its peer class MessageLog (which uses iterators) and "
       "introduces a new key structure. Access to records in this log "
       "is achieved through the use of the standard CIM Operations "
       "defined as part of WBEM.")]
class CIM_RecordLog : CIM_Log {

      [Key, Description (
          "Within the scope of the instantiating Namespace, InstanceID "
          "opaquely and uniquely identifies an instance of this class. "
          "\nIn order to ensure uniqueness within the NameSpace, the "
          "value of InstanceID SHOULD be constructed using the "
          "following 'preferred' algorithm: \n"
          "<OrgID>:<LocalID> \n"
          "Where <OrgID> and <LocalID> are separated by a colon ':', "
          "and where <OrgID> MUST include a copyrighted, trademarked "
          "or otherwise unique name that is owned by the business "
          "entity creating/defining the InstanceID, or is a registered "
          "ID that is assigned to the business entity by a recognized "
          "global authority (This is similar to the <Schema "
          "Name>_<Class Name> structure of Schema class names.) In "
          "addition, to ensure uniqueness <OrgID> MUST NOT contain a "
          "colon (':'). When using this algorithm, the first colon to "
          "appear in InstanceID MUST appear between <OrgID> and "
          "<LocalID>. \n"
          "<LocalID> is chosen by the business entity and SHOULD not "
          "be re-used to identify different underlying (real-world) "
          "elements. If the above 'preferred' algorithm is not used, "
          "the defining entity MUST assure that the resultant "
          "InstanceID is not re-used across any InstanceIDs produced "
          "by this or other providers for this instance's NameSpace. \n"
          "For DMTF defined instances, the 'preferred' algorithm MUST "
          "be used with the <OrgID> set to 'CIM'.")]
   string InstanceID;

};

// ===================================================================
// DiagnosticsLog
// ===================================================================
   [Version ( "2.9.0" ), Description (
       "DiagnosticsLog serves as an aggregation point for "
       "DiagnosticRecord objects. This class exists in order to "
       "encourage the use of a consolidated record management "
       "methodology for diagnostics. A common set of providers for "
       "this log and its associated records SHOULD be used to control "
       "functions such as record persistence, query support and "
       "overall data integrity in a consistent manner.")]
class CIM_DiagnosticsLog : CIM_RecordLog {
};

// ===================================================================
// RecordForLog
// ===================================================================
   [Abstract, Version ( "2.9.0" ), Description (
       "The RecordForLog class is used to instantiate records to be "
       "aggregated to a Log.")]
class CIM_RecordForLog : CIM_ManagedElement {

      [Description (
          "A string describing the data structure of the information "
          "in the property, RecordData. If the RecordFormat string is "
          "<empty>, RecordData should be interpreted as a free-form "
          "string. \n"
          "\n"
          "To describe the data structure of RecordData, the "
          "RecordFormat string should be constructed as follows: \n"
          "- The first character is a delimiter character and is used "
          "to parse the remainder of the string into sub-strings. \n"
          "- Each sub-string is separated by the delimiter character "
          "and should be in the form of a CIM property declaration "
          "(i.e., datatype and property name). This set of "
          "declarations may be used to interpret the similarly "
          "delimited RecordData property. \n"
          "For example, using a '*' delimiter, RecordFormat = "
          "\"*string ThisDay*uint32 ThisYear*datetime SomeTime\" \n"
          "may be used to interpret: RecordData = \"*This is "
          "Friday*2002*20020807141000.000000-300\"."), 
       ModelCorrespondence { "CIM_RecordForLog.RecordData" }]
   string RecordFormat;

      [Description (
          "A string containing LogRecord data. \n"
          "If the corresponding RecordFormat property is <empty>, or "
          "cannot be parsed according to the recommended format, "
          "RecordData should be interpreted as a free-form string. If "
          "the RecordFormat property contains parseable format "
          "information (as recommended in the RecordFormat Description "
          "qualifier), the RecordData string SHOULD be parsed in "
          "accordance with this format. In this case, RecordData "
          "SHOULD begin with the delimiter character and this "
          "character SHOULD be used to separate substrings in the "
          "manner described. The RecordData string can then be parsed "
          "by the data consumer and appropriately typed."), 
       ModelCorrespondence { "CIM_RecordForLog.RecordFormat" }]
   string RecordData;

      [Description (
          "A locale indicates a particular geographical, political, or "
          "cultural region. The Locale specifies the language used in "
          "creating the RecordForLog data. If the Locale property is "
          "empty, it is assumed that the default locale is en_US "
          "(English). \n"
          "The locale string consists of three sub-strings, separated "
          "by underscores: \n"
          "- The first sub-string is the language code, as specified "
          "in ISO639. \n"
          "- The second sub-string is the country code, as specified "
          "in ISO3166. \n"
          "- The third sub-string is a variant, which is vendor "
          "specific. \n"
          "For example, US English appears as: \"en_US_WIN\", where "
          "the \"WIN\" variant would specify a Windows "
          "browser-specific collation (if one exists). Since the "
          "variant is not standardized, it is not commonly used and "
          "generally is limited to easily recognizable values "
          "(\"WIN\", \"UNIX\", \"EURO\", etc.) used in standard "
          "environments. The language and country codes are required; "
          "the variant may be empty.")]
   string Locale;

};


// ===================================================================
// LogRecord
// ===================================================================
   [Version ( "2.9.0" ), Description (
       "The LogRecord object can describe the definitional format for "
       "entries in a MessageLog, or can be used to instantiate the "
       "actual records in the Log. The latter approach provides a "
       "great deal more semantic definition and management control "
       "over the individual entries in a MessageLog, than do the "
       "record manipulation methods of the Log class. It is "
       "recommended that the data in individual Log entries be modeled "
       "using subclasses of LogRecord, to avoid the creation of "
       "LogRecords with one property (such as RecordData) without "
       "semantics. \n"
       "Definitional formats for LogRecords could be specified by "
       "establishing a naming convention for the RecordID and Message "
       "Timestamp key properties.")]
class CIM_LogRecord : CIM_RecordForLog {

      [Key, Propagated ( "CIM_MessageLog.CreationClassName" ), 
       Description (
          "The scoping Log's CreationClassName."), 
       MaxLen ( 256 )]
   string LogCreationClassName;

      [Key, Propagated ( "CIM_MessageLog.Name" ), Description (
          "The scoping Log's Name."), 
       MaxLen ( 256 )]
   string LogName;

      [Key, Description (
          "CreationClassName indicates the name of the class or the "
          "subclass used in the creation of an instance. When used "
          "with the other key properties of this class, this property "
          "allows all instances of this class and its subclasses to be "
          "uniquely identified."), 
       MaxLen ( 256 )]
   string CreationClassName;

      [Key, Description (
          "RecordID, with the MessageTimestamp property, serve to "
          "uniquely identify the LogRecord within a MessageLog. Note "
          "that this property is different than the RecordNumber "
          "parameters of the MessageLog methods. The latter are "
          "ordinal values only, useful to track position when "
          "iterating through a Log. On the other hand, RecordID is "
          "truly an identifier for an instance of LogRecord. It may be "
          "set to the record's ordinal position, but this is not "
          "required."), 
       MaxLen ( 256 )]
   string RecordID;

      [Key, Description (
          "A LogRecord's key structure includes a timestamp for the "
          "entry.")]
   datetime MessageTimestamp;

      [Deprecated { "CIM_LogRecord.RecordFormat" }, Description (
          "A free-form string describing the LogRecord's data "
          "structure.")]
   string DataFormat;

};


// ===================================================================
// RecordInLog
// ===================================================================
   [Association, Aggregation, Composition, Version ( "2.7.0" ), 
    Description (
       "RecordInLog describes the aggregation or location of Log "
       "entries within a MessageLog.")]
class CIM_RecordInLog {

      [Key, Aggregate, Min ( 1 ), Max ( 1 ), Description (
          "The Message Log.")]
   CIM_MessageLog REF MessageLog;

      [Key, Weak, Description (
          "The Log entry contained within the MessageLog.")]
   CIM_LogRecord REF LogRecord;
};


// ===================================================================
// LogInDeviceFile
// ===================================================================
   [Association, Version ( "2.6.0" ), Description (
       "MessageLogs can reside in data files, on specially allocated "
       "storage areas such as disks or memory, or output as raw I/O "
       "streams. In fact, a single Log may use each of these "
       "mechanisms to output or capture its contents. The "
       "LogInDeviceFile association describes a Log outputting to a "
       "raw I/O stream DeviceFile - for example, a serial port on a "
       "UNIX system.")]
class CIM_LogInDeviceFile : CIM_Dependency {

      [Override ( "Antecedent" ), Description (
          "The I/O stream DeviceFile.")]
   CIM_DeviceFile REF Antecedent;

      [Override ( "Dependent" ), Description (
          "The MessageLog outputting to the DeviceFile.")]
   CIM_MessageLog REF Dependent;
};


// ===================================================================
// LogInDataFile
// ===================================================================
   [Association, Version ( "2.6.0" ), Description (
       "MessageLogs can reside in data files, on specially allocated "
       "storage areas such as disks or memory, or output as raw I/O "
       "streams. In fact, a single Log may use each of these "
       "mechanisms to output or capture its contents. The "
       "LogInDataFile association describes a Log stored as a "
       "DataFile.")]
class CIM_LogInDataFile : CIM_Dependency {

      [Override ( "Antecedent" ), Description (
          "The DataFile.")]
   CIM_DataFile REF Antecedent;

      [Override ( "Dependent" ), Description (
          "The MessageLog residing in the DataFile.")]
   CIM_MessageLog REF Dependent;
};


// ===================================================================
// LogInStorage
// ===================================================================
   [Association, Version ( "2.6.0" ), Description (
       "MessageLogs can reside in data files, on specially allocated "
       "storage areas such as disks or memory, or output as raw I/O "
       "streams. In fact, a single Log may use each of these "
       "mechanisms to output or capture its contents. The LogInStorage "
       "association describes a Log located in a specially allocated "
       "portion of a StorageExtent. The offset of the Log, within the "
       "Extent, is defined using a property of the association, "
       "StartingOffset.")]
class CIM_LogInStorage : CIM_Dependency {

      [Override ( "Antecedent" ), Description (
          "The StorageExtent.")]
   CIM_StorageExtent REF Antecedent;

      [Override ( "Dependent" ), Description (
          "The MessageLog located within the Extent.")]
   CIM_MessageLog REF Dependent;

      [Description (
          "StartingOffset indicates where in the Extent that the Log "
          "begins.")]
   uint64 StartingOffset;
};

// ===================================================================
// UseOfLog
// ===================================================================
   [Association, Version ( "2.9.0" ), Description (
       "ManagedSystemElements may record their event, error or "
       "informational data within Logs. The use of a Log to hold a "
       "ManagedSystemElement's data is described by this association. "
       "The type of Element data captured by the Log can be specified "
       "using the RecordedData string property.")]
class CIM_UseOfLog : CIM_Dependency {

      [Override ( "Antecedent" ), Description (
          "The Log.")]
   CIM_Log REF Antecedent;

      [Override ( "Dependent" ), Description (
          "The ManagedSystemElement whose information is recorded in "
          "the Log.")]
   CIM_ManagedSystemElement REF Dependent;

      [Description (
          "A free-form string describing the use of the Log by the "
          "ManagedSystemElement.")]
   string RecordedData;
};


// ===================================================================
// UseOfMessageLog
// ===================================================================
   [Association, Version ( "2.9.0" ), Description (
       "ManagedSystemElements may record their event, error or "
       "informational data within MessageLogs. The use of a Log to "
       "hold a ManagedSystemElement's data is described by this "
       "association. \n"
       "UseOfMessageLog has the same semantics as UseOfLog. Users "
       "SHOULD reference UseOfLog in lieu of this association.")]
class CIM_UseOfMessageLog : CIM_UseOfLog {

      [Override ( "Antecedent" ), Description (
          "The MessageLog.")]
   CIM_MessageLog REF Antecedent;

};

// ===================================================================
// OperationLog
// ===================================================================
   [Association, Version ( "2.8.0" ), Description (
       "CIM_OperationLog is a specialization of the "
       "CIM_UseOfMessageLog association that identifies a reproducible "
       "record of operations for a LogicalElement.")]
class CIM_OperationLog : CIM_UseOfMessageLog {

      [Override ( "Antecedent" ), Description (
          "The Log containing reproducible operations for the "
          "associated LogicalElement.")]
   CIM_MessageLog REF Antecedent;

      [Override ( "Dependent" ), Min ( 1 ), Max ( 1 ), Description (
          "The LogicalElement for the associated OperationLog.")]
   CIM_LogicalElement REF Dependent;
};

// ===================================================================
// RecordAppliesToElement
// ===================================================================
   [Association, Version ( "2.9.0" ), Description (
       "ManagedSystemElements may create RecordForLog objects to "
       "record their event, error or informational data within Logs. "
       "The relationship between these managed elements and the "
       "records they create is described by this association.")]
class CIM_RecordAppliesToElement : CIM_Dependency {

      [Override ( "Antecedent" ), Description (
          "The Record.")]
   CIM_RecordForLog REF Antecedent;

      [Override ( "Dependent" ), Description (
          "The ManagedSystemElement that participated in the creation "
          "of the Record.")]
   CIM_ManagedElement REF Dependent;

};

// ===================================================================
// LogManagesRecord
// ===================================================================
   [Association, Aggregation, Composition, Version ( "2.9.0" ), 
    Description (
       "LogManagesRecord describes the aggregation or location of "
       "Records managed by a Log.")]
class CIM_LogManagesRecord {

      [Key, Aggregate, Min ( 1 ), Max ( 1 ), Description (
          "The Log.")]
   CIM_Log REF Log;

      [Key, Description (
          "The record managed by the Log.")]
   CIM_RecordForLog REF Record;

};



// ===================================================================
// end of file
// ===================================================================
