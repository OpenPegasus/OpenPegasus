// Copyright (c) 2011 DMTF.  All rights reserved.
   [Experimental, Version ( "2.29.0" ), 
    UMLPackagePath ( "CIM::Device::Views" ), 
    Description ( 
       "The CIM_ReplicaView instance is a view that is derived from a "
       "source and target CIM_StorageVolume (or CIM_LogicalDisk) and a "
       "CIM_StorageSynchronized association between them.\n"
       "CIM_ElementView may associate CIM_ReplicaPairView to its "
       "underlying elements (regardless of whether or not they are "
       "instantiated)." )]
class CIM_ReplicaPairView : CIM_LogicalDeviceView {

      [Description ( 
          "The SystemCreationClassName for the source StorageVolume "
          "as reported in the underlying source StorageVolume "
          "instance." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.SystemCreationClassName" }]
   string SVSourceSystemCreationClassName;

      [Description ( 
          "The SystemName for the source StorageVolume as reported "
          "in the underlying source StorageVolume instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.SystemName" }]
   string SVSourceSystemName;

      [Description ( 
          "The CreationClassName for the source StorageVolume as "
          "reported in the underlying source StorageVolume "
          "instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.CreationClassName" }]
   string SVSourceCreationClassName;

      [Description ( 
          "An opaque identifier of the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DeviceID" }]
   string SVSourceDeviceID;

      [Description ( 
          "The identifier for the underlying source StorageVolume "
          "(or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Name" }]
   string SVSourceName;

      [Description ( 
          "The format of the identifier for the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NameFormat" }]
   uint16 SVSourceNameFormat;

      [Description ( 
          "The NameNamespace as reported in the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NameNamespace" }]
   uint16 SVSourceNameNamespace;

      [Description ( 
          "The ExtentStatus as reported in the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ExtentStatus" }]
   uint16 SVSourceExtentStatus[];

      [Description ( 
          "The OperationalStatus as reported in the underlying "
          "source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.OperationalStatus" }]
   uint16 SVSourceOperationalStatus[];

      [Description ( 
          "The BlockSize for the source StorageVolume as reported "
          "in the underlying source StorageVolume instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.BlockSize" }]
   uint64 SVSourceBlockSize;

      [Description ( 
          "The number of blocks that make up the volume as reported "
          "in the underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NumberOfBlocks" }]
   uint64 SVSourceNumberOfBlocks;

      [Description ( 
          "The number of usable blocks in the volume as reported in "
          "the underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ConsumableBlocks" }]
   uint64 SVSourceConsumableBlocks;

      [Description ( 
          "The Primordial property for the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Primordial" }]
   boolean SVSourcePrimordial;

      [Description ( 
          "Whether or not redundancy is supported for the volume as "
          "reported in the underlying source StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.IsBasedOnUnderlyingRedundancy" }]
   boolean SVSourceIsBasedOnUnderlyingRedundancy;

      [Description ( 
          "Whether or not NoSinglePointOfFailure is supported for "
          "the volume as reported in the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.NoSinglePointOfFailure" }]
   boolean SVSourceNoSinglePointOfFailure;

      [Description ( 
          "The DataRedundancy supported by the volume as reported "
          "in the underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DataRedundancy" }]
   uint16 SVSourceDataRedundancy;

      [Description ( 
          "The PackageRedundancy supported by the volume as "
          "reported in the underlying source StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.PackageRedundancy" }]
   uint16 SVSourcePackageRedundancy;

      [Description ( 
          "The DeltaReservation supported by the volume as reported "
          "in the underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DeltaReservation" }]
   uint8 SVSourceDeltaReservation;

      [Experimental, Description ( 
          "The ExtentDiscriminator property for the underlying "
          "source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ExtentDiscriminator" }]
   string SVSourceExtentDiscriminator[];

      [Description ( 
          "Other identifiers for the source StorageVolume (or "
          "LogicalDisk) as reported in the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.OtherIdentifyingInfo" }]
   string SVSourceOtherIdentifyingInfo[];

      [Description ( 
          "The description of the other identifiers for the source "
          "StorageVolume (or LogicalDisk) as reported in the "
          "underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.IdentifyingDescriptions" }]
   string SVSourceIdentifyingDescriptions[];

      [Description ( 
          "The user friendly name for the underlying source "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ElementName" }]
   string SVSourceElementName;

      [Description ( 
          "The Usage supported by the volume as reported in the "
          "underlying source StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Usage" }]
   uint16 SVSourceUsage;

      [Description ( 
          "The OtherUsageDescription supported by the volume as "
          "reported in the underlying source StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.OtherUsageDescription" }]
   string SVSourceOtherUsageDescription;

      [Description ( 
          "The ClientSettableUsage supported by the volume as "
          "reported in the underlying source StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ClientSettableUsage" }]
   uint16 SVSourceClientSettableUsage[];

      [Description ( 
          "The WhenSynced on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.WhenSynced" }]
   datetime SSWhenSynced;

      [Description ( 
          "The SyncMaintained on the StorageSynchronized "
          "association between the underlying source and target "
          "StorageVolumes (or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.SyncMaintained" }]
   boolean SSSyncMaintained;

      [Description ( 
          "The CopyType on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.CopyType" }]
   uint16 SSCopyType;

      [Description ( 
          "The SyncState on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.SyncState" }]
   uint16 SSSyncState;

      [Description ( 
          "The CopyPriority on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.CopyPriority" }]
   uint16 SSCopyPriority;

      [Description ( 
          "The SyncType on the StorageSynchronized association "
          "between the underlying source and target StorageVolumes "
          "(or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.SyncType" }]
   uint16 SSSyncType;

      [Description ( 
          "The Mode on the StorageSynchronized association between "
          "the underlying source and target StorageVolumes (or "
          "LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.Mode" }]
   uint16 SSMode;

      [Description ( 
          "The ProgressStatus on the StorageSynchronized "
          "association between the underlying source and target "
          "StorageVolumes (or LogicalDisks)." ), 
       ModelCorrespondence { "CIM_StorageSynchronized.ProgressStatus" }]
   uint16 SSProgressStatus;

      [Key, Description ( 
          "The SystemCreationClassName for the target StorageVolume "
          "as reported in the underlying target StorageVolume "
          "instance." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.SystemCreationClassName" }]
   string SVTargetSystemCreationClassName;

      [Key, Description ( 
          "The SystemName for the target StorageVolume as reported "
          "in the underlying target StorageVolume instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.SystemName" }]
   string SVTargetSystemName;

      [Key, Description ( 
          "The CreationClassName for the target StorageVolume as "
          "reported in the underlying target StorageVolume "
          "instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.CreationClassName" }]
   string SVTargetCreationClassName;

      [Key, Description ( 
          "An opaque identifier of the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DeviceID" }]
   string SVTargetDeviceID;

      [Description ( 
          "The identifier for the underlying target StorageVolume "
          "(or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Name" }]
   string SVTargetName;

      [Description ( 
          "The format of the identifier for the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NameFormat" }]
   uint16 SVTargetNameFormat;

      [Description ( 
          "The NameNamespace as reported in the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NameNamespace" }]
   uint16 SVTargetNameNamespace;

      [Description ( 
          "The ExtentStatus as reported in the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ExtentStatus" }]
   uint16 SVTargetExtentStatus[];

      [Description ( 
          "The OperationalStatus as reported in the underlying "
          "target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.OperationalStatus" }]
   uint16 SVTargetOperationalStatus[];

      [Description ( 
          "The BlockSize for the target StorageVolume as reported "
          "in the underlying target StorageVolume instance." ), 
       ModelCorrespondence { "CIM_StorageVolume.BlockSize" }]
   uint64 SVTargetBlockSize;

      [Description ( 
          "The number of blocks that make up the volume as reported "
          "in the underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.NumberOfBlocks" }]
   uint64 SVTargetNumberOfBlocks;

      [Description ( 
          "The number of usable blocks in the volume as reported in "
          "the underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ConsumableBlocks" }]
   uint64 SVTargetConsumableBlocks;

      [Description ( 
          "The Primordial property for the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Primordial" }]
   boolean SVTargetPrimordial;

      [Description ( 
          "Whether or not redundancy is supported for the volume as "
          "reported in the underlying target StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.IsBasedOnUnderlyingRedundancy" }]
   boolean SVTargetIsBasedOnUnderlyingRedundancy;

      [Description ( 
          "Whether or not NoSinglePointOfFailure is supported for "
          "the volume as reported in the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.NoSinglePointOfFailure" }]
   boolean SVTargetNoSinglePointOfFailure;

      [Description ( 
          "The DataRedundancy supported by the volume as reported "
          "in the underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DataRedundancy" }]
   uint16 SVTargetDataRedundancy;

      [Description ( 
          "The PackageRedundancy supported by the volume as "
          "reported in the underlying target StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.PackageRedundancy" }]
   uint16 SVTargetPackageRedundancy;

      [Description ( 
          "The DeltaReservation supported by the volume as reported "
          "in the underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.DeltaReservation" }]
   uint8 SVTargetDeltaReservation;

      [Experimental, Description ( 
          "The ExtentDiscriminatorl property for the underlying "
          "target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ExtentDiscriminator" }]
   string SVTargetExtentDiscriminator[];

      [Description ( 
          "Other identifiers for the target StorageVolume (or "
          "LogicalDisk) as reported in the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.OtherIdentifyingInfo" }]
   string SVTargetOtherIdentifyingInfo[];

      [Description ( 
          "The description of the other identifiers for the target "
          "StorageVolume (or LogicalDisk) as reported in the "
          "underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.IdentifyingDescriptions" }]
   string SVTargetIdentifyingDescriptions[];

      [Description ( 
          "The user friendly name for the underlying target "
          "StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ElementName" }]
   string SVTargetElementName;

      [Description ( 
          "The Usage supported by the volume as reported in the "
          "underlying target StorageVolume (or LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.Usage" }]
   uint16 SVTargetUsage;

      [Description ( 
          "The OtherUsageDescription supported by the volume as "
          "reported in the underlying target StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { 
          "CIM_StorageVolume.OtherUsageDescription" }]
   string SVTargetOtherUsageDescription;

      [Description ( 
          "The ClientSettableUsage supported by the volume as "
          "reported in the underlying target StorageVolume (or "
          "LogicalDisk)." ), 
       ModelCorrespondence { "CIM_StorageVolume.ClientSettableUsage" }]
   uint16 SVTargetClientSettableUsage[];


};
