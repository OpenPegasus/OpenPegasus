// Copyright (c) 2013 DMTF.  All rights reserved.
   [Experimental, Version ( "2.41.0" ), 
    UMLPackagePath ( "CIM::Device::StorageServices" ), 
    Description ( 
       "A subclass of Capabilities that defines the Capabilities of a "
       "ReplicationService. An instance of "
       "ReplicationServiceCapabilities is associated with a "
       "ReplicationService using ElementCapabilities." )]
class CIM_ReplicationServiceCapabilities : CIM_Capabilities {

      [Description ( 
          "Enumeration indicating the supported "
          "SyncType/Mode/Local-or-Remote combinations." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "13", "14", "15", "16", "17", "18", "19", 
          "20", "21", "22", "23", "24", "25", "..", "0x8000.." }, 
       Values { "Synchronous Mirror Local", 
          "Asynchronous Mirror Local", "Synchronous Mirror Remote", 
          "Asynchronous Mirror Remote", 
          "Synchronous Snapshot Local", 
          "Asynchronous Snapshot Local", 
          "Synchronous Snapshot Remote", 
          "Asynchronous Snapshot Remote", "Synchronous Clone Local", 
          "Asynchronous Clone Local", "Synchronous Clone Remote", 
          "Asynchronous Clone Remote", 
          "Synchronous TokenizedClone Local", 
          "Asynchronous TokenizedClone Local", 
          "Synchronous TokenizedClone Remote", 
          "Asynchronous TokenizedClone Remote", 
          "Adaptive Mirror Local", "Adaptive Mirror Remote", 
          "Adaptive Snapshot Local", "Adaptive Snapshot Remote", 
          "Adaptive Clone Local", "Adaptive Clone Remote", 
          "Adaptive TokenizedClone Local", 
          "Adaptive TokenizedClone Remote", "DMTF Reserved", 
          "Vendor Specific" }]
   uint16 SupportedReplicationTypes[];

      [Description ( 
          "Enumeration indicating the supported storage objects." ), 
       ValueMap { "2", "3", "4", "..", "0x8000.." }, 
       Values { "StorageVolume", "LogicalDisk", "ReplicationEntity", 
          "DMTF Reserved", "Vendor Specific" }]
   uint16 SupportedStorageObjects[];

      [Description ( 
          "Enumeration indicating what operations will be executed "
          "as asynchronous jobs. If an operation is included in "
          "both this and SupportedSynchronousActions properties "
          "then the underlying implementation is indicating that it "
          "may or may not create a job.\n"
          "Note: the following methods are not supported "
          "asynchronously, hence the gap between 11 and 19: \n"
          "\t - CreateGroup \n"
          "\t - DeleteGroup \n"
          "\t - AddMembers \n"
          "\t - RemoveMembers \n"
          "\t - AddReplicationEntity \n"
          "\t - AddServiceAccessPoint \n"
          "\t - AddSharedSecret." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "19", "20", "21", "22", "23", "24", "25", "26", 
          "27", "28", "29", "30", "..", "0x8000.." }, 
       Values { "CreateElementReplica", "CreateGroupReplica", 
          "CreateSynchronizationAspect", 
          "ModifyReplicaSynchronization", 
          "ModifyListSynchronization", "ModifySettingsDefineState", 
          "GetAvailableTargetElements", "GetPeerSystems", 
          "GetReplicationRelationships", "GetServiceAccessPoints", 
          "CreateListReplica", "CreateGroupReplicaFromElements", 
          "GetReplicationRelationshipInstances", 
          "ModifyListSettingsDefineState", 
          "CreateRemoteReplicationCollection", 
          "AddToRemoteReplicationCollection", 
          "RemoveFromRemoteReplicationCollection", 
          "GetSynchronizationAspects", 
          "GetSynchronizationAspectInstances", 
          "CreateGroupReplicaFromElementSynchronizations", 
          "AddElementsToGroupSynchronized", "ConfirmTargetData", 
          "DMTF Reserved", "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_ReplicationServiceCapabilities.SupportedSynchronousActions" }]
   uint16 SupportedAsynchronousActions[];

      [Description ( 
          "Enumeration indicating what operations will be executed "
          "synchronously -- without the creation of a job. If an "
          "operation is included in both this property and "
          "SupportedAsynchronousActions then the underlying "
          "implementation is indicating that it may or may not "
          "create a job.\n"
          "Note: the following methods are not supported "
          "asynchronously: \n"
          "\t - CreateGroup \n"
          "\t - DeleteGroup \n"
          "\t - AddMembers \n"
          "\t - RemoveMembers \n"
          "\t - AddReplicationEntity \n"
          "\t - AddServiceAccessPoint \n"
          "\t - AddSharedSecret." ), 
       ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", "10", 
          "11", "12", "13", "14", "15", "16", "17", "18", "19", 
          "20", "21", "22", "23", "24", "25", "26", "27", "28", 
          "29", "30", "..", "0x8000.." }, 
       Values { "CreateElementReplica", "CreateGroupReplica", 
          "CreateSynchronizationAspect", 
          "ModifyReplicaSynchronization", 
          "ModifyListSynchronization", "ModifySettingsDefineState", 
          "GetAvailableTargetElements", "GetPeerSystems", 
          "GetReplicationRelationships", "GetServiceAccessPoints", 
          "CreateGroup", "DeleteGroup", "AddMembers", 
          "RemoveMembers", "AddReplicationEntity", 
          "AddServiceAccessPoint", "AddSharedSecret", 
          "CreateListReplica", "CreateGroupReplicaFromElements", 
          "GetReplicationRelationshipInstances", 
          "ModifyListSettingsDefineState", 
          "CreateRemoteReplicationCollection", 
          "AddToRemoteReplicationCollection", 
          "RemoveFromRemoteReplicationCollection", 
          "GetSynchronizationAspects", 
          "GetSynchronizationAspectInstances", 
          "CreateGroupReplicaFromElementSynchronizations", 
          "AddElementsToGroupSynchronized", "ConfirmTargetData", 
          "DMTF Reserved", "Vendor Specific" }, 
       ModelCorrespondence { 
          "CIM_ReplicationServiceCapabilities.SupportedAsynchronousActions" }]
   uint16 SupportedSynchronousActions[];


      [Description ( 
          "The majority of the methods in this class accept "
          "ReplicationType which represents a combination of "
          "SyncType, Mode, Local/Remote. This method accepts the "
          "supplied information and returns the corresponding "
          "ReplicationType, which can be passed to other methods to "
          "get the additional capabilities." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 ConvertSyncTypeToReplicationType(
         [IN, Description ( 
             "SyncType describes the type of copy. \n"
             "Mirror: create and maintain a copy of the source. \n"
             "Snapshot: create a PIT, virtual copy of the "
             "source. \n"
             "Clone: create an unsynchronized copy of the "
             "source. \n"
             "TokenizedClone: create a token based clone." ), 
          ValueMap { "6", "7", "8", "9", "..", "0x8000.." }, 
          Values { "Mirror", "Snapshot", "Clone", 
             "TokenizedClone", "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.SyncType" }]
      uint16 SyncType, 
         [IN, Description ( 
             "Mode describes whether the target elements will be "
             "updated synchronously or asynchronously. \n"
             "Adaptive: Allows implementation to dynamically "
             "switch between synchronous and asynchronous modes." ), 
          ValueMap { "2", "3", "4", "..", "0x8000.." }, 
          Values { "Synchronous", "Asynchronous", "Adaptive", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.Mode" }]
      uint16 Mode, 
         [IN, Description ( "Copy to local or remote replica." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Local", "Remote", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 LocalOrRemote, 
         [OUT, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 SupportedReplicationTypes);

      [Description ( 
          "This method does the opposite of the method "
          "ConvertSyncTypeToReplicationType. This method translates "
          "ReplicationType to the corresponding SyncType, Mode, "
          "Local/Remote." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 ConvertReplicationTypeToSyncType(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "SyncType describes the type of copy. \n"
             "Mirror: create and maintain a copy of the source. \n"
             "Snapshot: create a PIT, virtual copy of the "
             "source. \n"
             "Clone: create an unsynchronized copy of the "
             "source. \n"
             "TokenizedClone: create a token based clone." ), 
          ValueMap { "6", "7", "8", "9", "..", "0x8000.." }, 
          Values { "Mirror", "Snapshot", "Clone", 
             "TokenizedClone", "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.SyncType" }]
      uint16 SyncType, 
         [OUT, Description ( 
             "Mode describes whether the target elements will be "
             "updated synchronously or asynchronously. \n"
             "Adaptive: Allows implementation dynamically to "
             "switch between synchronous and asynchronous modes." ), 
          ValueMap { "2", "3", "4", "..", "0x8000.." }, 
          Values { "Synchronous", "Asynchronous", "Adaptive", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.Mode" }]
      uint16 Mode, 
         [OUT, Description ( "Copy to local or remote replica." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Local", "Remote", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 LocalOrRemote);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported CopyStates and a parallel array to indicate "
          "for a given CopyState the target element is host "
          "accessible or not. \n"
          "If the Operation parameter is supplied, the method "
          "returns only the CopyStates that the operation can be "
          "accepted." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedCopyStates(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( "Supported Copy States." ), 
          ModelCorrespondence { "CIM_Synchronized.CopyState" }]
      uint16 SupportedCopyStates[], 
         [OUT, Description ( 
             "A parallel array to SupportedCopyStates[] to "
             "indicate whether in that CopyState the target "
             "element is host accessible or not (true or false)" )]
      boolean HostAccessible[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [IN, Description ( 
             "Only return the CopyStates that the specified "
             "operation can be accepted. \n"
             "Methods such as ModifyReplicaSynchronization "
             "accept the operation to perform. If the Operation "
             "is not specified, all supported CopyStates for the "
             "ReplicationType are returned. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state -- "
             "deprecated. \n"
             "Prepare: Replaces the Unprepare operation." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "..", "0x8000..0xFFFF" }, 
          Values { "Abort", "Activate Consistency", "Activate", 
             "AddSyncPair", "Deactivate Consistency", 
             "Deactivate", "Detach", "Dissolve", "Failover", 
             "Failback", "Fracture", "RemoveSyncPair", 
             "Resync Replica", "Restore from Replica", "Resume", 
             "Reset To Sync", "Reset To Async", 
             "Return To ResourcePool", "Reverse Roles", "Split", 
             "Suspend", "Unprepare", "Prepare", 
             "Reset to Adaptive", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 Operation);

      [Description ( 
          "This method, for a given ReplicationType, returns the "
          "supported replication group CopyStates." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedGroupCopyStates(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( "Supported Copy States." ), 
          ModelCorrespondence { "CIM_Synchronized.CopyState" }]
      uint16 SupportedCopyStates[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [IN, Description ( 
             "If the Operation parameter is supplied, the method "
             "returns only the CopyStates that the operation can "
             "be accepted. \n"
             "Methods such as ModifyReplicaSynchronization "
             "accept the operation to perform. If the Operation "
             "is not specified, all supported CopyStates for the "
             "ReplicationType are returned. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state -- "
             "deprecated. \n"
             "Prepare: Replaces the Unprepare operation." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "..", "0x8000..0xFFFF" }, 
          Values { "Abort", "Activate Consistency", "Activate", 
             "AddSyncPair", "Deactivate Consistency", 
             "Deactivate", "Detach", "Dissolve", "Failover", 
             "Failback", "Fracture", "RemoveSyncPair", 
             "Resync Replica", "Restore from Replica", "Resume", 
             "Reset To Sync", "Reset To Async", 
             "Return To ResourcePool", "Reverse Roles", "Split", 
             "Suspend", "Unprepare", "Prepare", 
             "Reset to Adaptive", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 Operation);

      [Description ( 
          "This method, for a given ReplicationType and method, "
          "returns the supported CopyStates that can be specified "
          "in the method\'s WaitForCopyState parameter." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedWaitForCopyStates(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [IN, Description ( 
             "A value representing the desired method name." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "..", "0x8000.." }, 
          Values { "CreateElementReplica", "CreateGroupReplica", 
             "ModifyReplicaSynchronization", 
             "ModifyListSynchronization", 
             "ModifySettingsDefineState", "CreateListReplica", 
             "CreateGroupReplicaFromElements", 
             "ModifyListSettingsDefineState", 
             "CreateGroupReplicaFromElementSynchronizations", 
             "AddElementsToGroupSynchronized", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 MethodName, 
         [OUT, Description ( "Supported Copy States." ), 
          ModelCorrespondence { "CIM_Synchronized.CopyState" }]
      uint16 SupportedCopyStates[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [IN, Description ( 
             "Only return the WaitForCopyStates that can be "
             "specified for the given operation in methods such "
             "as ModifyReplicaSynchronization. \n"
             "If the Operation is not specified, all supported "
             "WaitForCopyStates for the ReplicationType are "
             "returned. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state -- "
             "deprecated. \n"
             "Prepare: Replaces the Unprepare operation." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "..", "0x8000..0xFFFF" }, 
          Values { "Abort", "Activate Consistency", "Activate", 
             "AddSyncPair", "Deactivate Consistency", 
             "Deactivate", "Detach", "Dissolve", "Failover", 
             "Failback", "Fracture", "RemoveSyncPair", 
             "Resync Replica", "Restore from Replica", "Resume", 
             "Reset To Sync", "Reset To Async", 
             "Return To ResourcePool", "Reverse Roles", "Split", 
             "Suspend", "Unprepare", "Prepare", 
             "Reset to Adaptive", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 Operation);

      [Description ( 
          "This method, for a given ReplicationType, returns the "
          "supported features." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedFeatures(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Features. \n"
             "Replication Groups: Element in a group are "
             "supported in a replication operation. \n"
             "Multi-hop element replication: Target of one copy "
             "operation can at the same time be the source of "
             "another copy operation. \n"
             "Multi-hop elements must have same SyncType: The "
             "SyncType of each hop must be the same as previous "
             "hop, e.g., mirror, snapshot, clone. \n"
             "Multi-hop requires advance notice: The service "
             "needs to know when multi-hoping is intended to "
             "allow the service to do the appropriate set up. "
             "The parameter ReplicationSettingData specified "
             "number of hops intended. \n"
             "Requires full discovery of target ComputerSystem: "
             "Target element\'s containing computer system must "
             "be known to the provider. \n"
             "Service suspends source I/O when necessary: "
             "Applies to a group of elements when a consistent "
             "point-in-time is created. \n"
             "Targets allocated from Any storage pool: No "
             "restriction as to what storage pool to use to "
             "allocate targets elements, as long as the pool is "
             "not reserved for special activities. \n"
             "Targets allocated from Shared storage pool: "
             "Targets are allocated from a shared pool for all "
             "targets of the same type. \n"
             "Targets allocated from Exclusive storage pool: "
             "Targets are allocated from a pool that is "
             "exclusive. \n"
             "Targets allocated from Multiple storage pools: "
             "Targets are allocated from multiple pools. Targets "
             "require reserved elements: Targets must have a "
             "specific Usage value. Target is associated to "
             "SynchronizationAspect: Target is associated via "
             "SettingsDefineState association to an instance of "
             "SynchronizationAspect. Source is associated to "
             "SynchronizationAspect: Source is associated via "
             "SettingsDefineState association to an instance of "
             "SynchronizationAspect. Error recovery from Broken "
             "state Automatic: Once the connection is repaired, "
             "the copy operation continues automatically. \n"
             "Target must remain associated to source: A "
             "dependent target element must remain associated to "
             "source element at all times. \n"
             "Remote resource requires remote CIMOM: Client is "
             "required to interact with two providers: the "
             "provider controlling the source element and the "
             "provider controlling the target element.\n"
             "Synchronized clone target detaches automatically: "
             "The clone target element detaches automatically "
             "when the target element becomes synchronized; "
             "otherwise, the client needs to explicitly request "
             "a detach operation.\n"
             "Reverse Roles operation requires Read Only source: "
             "The Reverse Roles operation requires the source "
             "element to be in the Read Only mode. \n"
             "Reverse Roles operation requires subsequent "
             "resync: After the Reverse Roles operation "
             "completed, it is required to resync the "
             "synchronization relationship between the source "
             "and the target elements. \n"
             "Restore operation requires subsequent fracture: "
             "The copy operation has completed; however, the "
             "synchronization relationship must be fractured. \n"
             "Resync operation requires subsequent activate: For "
             "the copy operation to continue, the "
             "synchronization relationship must be activated.\n"
             "Copy operation requires offline source: "
             "Instrumentation requires the source element to be "
             "offline (not-ready) to ensure data does not change "
             "before starting the copy operation. Adjustable "
             "CopyPriority: Priority of copy operation versus "
             "the host I/O can be adjusted.\n"
             "Source requires reserved element: Source element "
             "must have a Usage value that indicates the element "
             "may be a \"Replica Source\". \n"
             "Supports undiscovered resources: The service can "
             "perform copy operations to and from elements, e.g. "
             "a \"ReplicationEntity\", on a ComputerSystem not "
             "known to the service. \n"
             "Target element can be added to collections: After "
             "the replication relationship is established, the "
             "target element can be added to the supplied "
             "collections -- such as a "
             "DeviceMaskingGroup.Reverse Roles operation "
             "requires Synchronized state: For the Reverse Roles "
             "operation, CopyState must be in Synchronized "
             "state. \n"
             "Reverse Roles operation requires Fractured state: "
             "For the Reverse Roles operation, CopyState must be "
             "in Fractured state. \n"
             "Reverse Roles operation requires Split state:For "
             "the Reverse Roles operation, CopyState must be in "
             "Split state. \n"
             "Reverse Roles operation requires FailedOver state: "
             "For the Reverse Roles operation, CopyState must be "
             "in FailedOver state. \n"
             "Reverse Roles operation requires Suspended state: "
             "For the Reverse Roles operation, CopyState must be "
             "in Suspended state. \n"
             "Provider can manage remote source: Remote source "
             "can be managed by the Provider. \n"
             "Provider can manage remote target: Remote target "
             "can be managed by the Provider. \n"
             "Supports temporary ReplicationEntity: "
             "Implementation supports temporary instances of "
             "ReplicationEntity. \n"
             "Supports persistent ReplicationEntity: "
             "Implementation supports persistent instances of "
             "ReplicationEntity. \n"
             "ReplicationEntity supports embedded instance: "
             "ReplicationEntity can include an embedded "
             "instance. \n"
             "TargetElement shall not be supplied: Replication "
             "method does not accept TargetElement or "
             "TargetElements. Implementation creates the "
             "required target element. \n"
             "TargetPool shall not be supplied: Implementation "
             "locates the appropriate resource pool or resource "
             "pools. \n"
             "TargetGoal shall not be supplied: Implementation "
             "determines the appropriate setting for the target "
             "element. \n"
             "Provider can create remote elements: If not "
             "supplied the Provider creates remote elements. \n"
             "Creating remote elements requires TargetPool: For "
             "the Provider to create remote elements, TargetPool "
             "or TargetPools must be supplied. \n"
             "Local targets allocated from sources resource "
             "pool: Implementation allocates targets from "
             "source\'s pool. \n"
             "Supports SynchronizationAspect: Implementation "
             "supports managing instances of "
             "SynchronizationAspect. \n"
             "Accepts foreign object paths: Foreign object paths "
             "are well formed. However, they are not discovered "
             "by the provider. \n"
             "Failover operation requires subsequent split: "
             "Planned failover operation requires copy "
             "relationship to be split or fractured. \n"
             "Restore operation requires subsequent resume: "
             "After restore operation completes, copy operation "
             "needs to be resumed. \n"
             "GetPeerSystems can return access points: Method "
             "GetPeerSystemscan return access points such as "
             "ProtocolEndpoints which can be used to create RemoteReplicationCollections.\n"
             "Client can supply target ElementName: "
             "Implementation accepts ElementName or ElementNames "
             "for target elements. \n"
             "Reverse Roles operation does not change CopyState: "
             "After Reverse Roles operation completes, CopyState "
             "does not change. \n"
             "Failover operation requires subsequent failback: "
             "The failover operation requires a subsequent "
             "failback before additional operations may be "
             "applied to replication relationship, except for "
             "the detach operation. The detach operation may be "
             "issued from the failedover state. \n"
             "Planned Failover operation requires fractured "
             "state: The copy relationship must be in the "
             "CopyState fractured before a planned failover "
             "operation -- in planned failover, source and "
             "target elements are reachable. \n"
             "Target element requires resource pool reserved for "
             "replication: Target elements can only be created "
             "in a resource pool that is reserved for "
             "replication service -- per the Usage value of the "
             "resource pool." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "26", "27", "28", "29", "30", "31", "32", "33", 
             "34", "35", "36", "37", "38", "39", "40", "41", 
             "42", "43", "44", "45", "46", "47", "48", "49", 
             "50", "51", "52", "53", "54", "55", "..", "32768.." }, 
          Values { "Replication groups", 
             "Multi-hop element replication", 
             "Multi-hop elements must have same SyncType", 
             "Multi-hop requires advance notice", 
             "Requires full discovery of target ComputerSystem", 
             "Service suspends source I/O when necessary", 
             "Targets allocated from Any storage pool", 
             "Targets allocated from Shared storage pool", 
             "Targets allocated from Exclusive storage pool", 
             "Targets allocated from Multiple storage pools", 
             "Targets require reserved elements", 
             "Target is associated to SynchronizationAspect", 
             "Source is associated to SynchronizationAspect", 
             "Error recovery from Broken state Automatic", 
             "Target must remain associated to source", 
             "Remote resource requires remote CIMOM", 
             "Synchronized clone target detaches automatically", 
             "Reverse Roles operation requires Read Only source", 
             "Reverse Roles operation requires subsequent resync", 
             "Restore operation requires subsequent fracture", 
             "Resync operation requires subsequent activate", 
             "Copy operation requires offline source", 
             "Adjustable CopyPriority", 
             "Source requires reserved element", 
             "Supports undiscovered resources", 
             "Restore operation requires subsequent detach", 
             "Target element can be added to collections", 
             "Reverse Roles operation requires Synchronized state", 
             "Reverse Roles operation requires Fractured state", 
             "Reverse Roles operation requires Split state", 
             "Reverse Roles operation requires FailedOver state", 
             "Reverse Roles operation requires Suspended state", 
             "Provider can manage remote source", 
             "Provider can manage remote target", 
             "Supports temporary ReplicationEntity", 
             "Supports persistent ReplicationEntity", 
             "ReplicationEntity supports embedded instance", 
             "TargetElement shall not be supplied", 
             "TargetPool shall not be supplied", 
             "TargetGoal shall not be supplied", 
             "Provider can create remote elements", 
             "Creating remote elements requires TargetPool", 
             "Local targets allocated from sources resource pool", 
             "Supports SynchronizationAspect", 
             "Accepts foreign object paths", 
             "Failover operation requires subsequent fracture", 
             "Failover operation requires subsequent split", 
             "Restore operation requires subsequent resume", 
             "GetPeerSystems can return access points", 
             "Client can supply target ElementName", 
             "Reverse Roles operation does not change CopyState", 
             "Failover operation requires subsequent failback", 
             "Planned Failover operation requires fractured state", 
             "Target element requires resource pool reserved for replication", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 Features[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method, for a given ReplicationType, returns the "
          "supported group features." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedGroupFeatures(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Features. \n"
             "One-to-many replication: One source element and "
             "multiple targets elements in a group. \n"
             "Many-to-many: One or more elements in the source "
             "group and one or more elements in the target "
             "group. \n"
             "Consistency enabled for all groups: All groups are "
             "considered consistent by default. \n"
             "Empty replication groups allowed: A replication "
             "group can have zero elements. \n"
             "Source group must have more than one element: A "
             "group with only one element is not allowed. \n"
             "Composite Groups: Elements of a group may be from "
             "different arrays. \n"
             "Multi-hop group replication: A group that is the "
             "target of a copy operation can be the source of "
             "another copy operation at the same time. \n"
             "Multi-hop elements must have same SyncType: The "
             "SyncType of each hop must be the same as previous "
             "hop, e.g., mirror, snapshot, clone. \n"
             "Group can only have one single relationship "
             "active: Only one StorageSynchronized association "
             "within a group can be active at a given time. \n"
             "Source element can be removed from group: A source "
             "element can be removed even when the group is "
             "associated with another replication group. \n"
             "Target element can be removed from group: A target "
             "element can be removed even when the group is "
             "associated with another replication group. \n"
             "Group can be temporary: Group can have a "
             "persistence of false, which means the group -- not "
             "its elements, may be deleted if it no longer "
             "participates in a replication operation. \n"
             "Group is nameable: In creating a group, it is "
             "possible to name the group. \n"
             "Supports target element count: It is possible to "
             "supply one source element and request more than "
             "one target element copies.\n"
             "Synchronized clone target detaches automatically: "
             "The clone target group detaches automatically when "
             "the target group becomes synchronized; otherwise, "
             "the client needs to explicitly request a detach operation.\n"
             "Reverse Roles operation requires Read Only source: "
             "The Reverse Roles operation requires the source "
             "element to be in the Read Only mode. \n"
             "Reverse Roles operation requires subsequent "
             "resync: For the copy operation to continue, resync "
             "of source and target elements is required. \n"
             "Restore operation requires subsequent fracture: "
             "The copy operation has completed; however, the "
             "synchronization relationship must be fractured. \n"
             "Resync operation requires subsequent activate: For "
             "the copy operation to continue, the "
             "synchronization relationship must be activated. \n"
             "Copy operation requires offline source: "
             "Instrumentation requires the source element to be "
             "offline (not-ready) to ensure data does not change "
             "before starting the copy operation. \n"
             "TokenizedClone ConsistentPointInTime: The "
             "point-in-time to be created at an exact time with "
             "no I/O activities in such a way the data is "
             "consistent among all the elements or the group. \n"
             "Target element can be added to collections: After "
             "the replication relationship is established, the "
             "target element can be added to the supplied "
             "collections -- such as a "
             "DeviceMaskingGroup.Reverse Roles operation "
             "requires Synchronized state: For the Reverse Roles "
             "operation, CopyState must be in Synchronized "
             "state. \n"
             "Reverse Roles operation requires Fractured state: "
             "For the Reverse Roles operation, CopyState must be "
             "in Fractured state. \n"
             "Reverse Roles operation requires Split state:For "
             "the Reverse Roles operation, CopyState must be in "
             "Split state. \n"
             "Reverse Roles operation requires FailedOver state: "
             "For the Reverse Roles operation, CopyState must be "
             "in FailedOver state. \n"
             "Reverse Roles operation requires Suspended state: "
             "For the Reverse Roles operation, CopyState must be "
             "in Suspended state. \n"
             "Provider can manage remote source group: Remote "
             "source group can be managed by the Provider. \n"
             "Provider can manage remote target group: Remote "
             "target group can be managed by the Provider. \n"
             "Supports temporary ReplicationEntity: "
             "Implementation TargetGroup shall not be supplied: "
             "Replication method does not accept TargetGroup. "
             "Implementation creates the required target group. \n"
             "TargetPool shall not be supplied: Implementation "
             "locates the appropriate resource pool. \n"
             "TargetSettingGoal shall not be supplied: "
             "Implementation determines the appropriate setting "
             "for the target elements. \n"
             "Provider can create remote target group: If not "
             "supplied the Provider creates remote target group. \n"
             "Creating remote elements requires TargetPool: For "
             "the Provider to create remote elements, TargetPool "
             "must be supplied. \n"
             "Target group shall be supplied: Target group is "
             "required. \n"
             "CreateGroupReplica only accepts empty groups: Only "
             "empty replication groups can be supplied to form "
             "GroupSynchronized. \n"
             "One replication group per storage pool: Only one "
             "replication group per storage pool. \n"
             "Supports ConsistencyExempt when adding to group: "
             "Elements can be added to a replication group with "
             "ConsistencyExempt set to true. \n"
             "Add or Remove to group requires Fractured state: "
             "Adding or removing elements to a replication "
             "group, requires GroupSynchronized state to be "
             "Fractured. \n"
             "Add or Remove to group requires Split state: "
             "Adding or removing elements to a replication "
             "group, requires GroupSynchronized state to be "
             "Split. \n"
             "Add or Remove to group requires Suspended state: "
             "Adding or removing elements to a replication "
             "group, requires GroupSynchronized state to be "
             "Suspended. \n"
             "Add or Remove to group requires FailedOver state: "
             "Adding or removing elements to a replication "
             "group, requires GroupSynchronized state to be "
             "FailedOver. \n"
             "Supports SynchronizationAspect of replication "
             "group: Implementation supports managing instances "
             "of SynchronizationAspect of replication group. \n"
             "No element level StorageSynchronized: "
             "Implementation does not support "
             "StorageSynchronized associations between members "
             "of replication groups. If such associations "
             "appear, they cannot be manipulated individually. "
             "All control operations should be applied to the "
             "GroupSynchronized. \n"
             "Accepts foreign object paths: Foreign object paths "
             "are well formed. However, they are not discovered "
             "by the provider. \n"
             "Failover operation requires subsequent split: "
             "Planned failover operation requires group to be "
             "split or fractured. \n"
             "Restore operation requires subsequent resume: "
             "After restore operation completes, copy operation "
             "needs to be resumed. \n"
             "One consistent async per "
             "RemoteReplicationCollection: Onlyone asynchronous "
             "copy operation per RemoteReplicationCollection. \n"
             "Client can supply RelationshipName: Implementation "
             "acceptsRelationshipName to assign to group "
             "associations. \n"
             "Implementation decides group member order: The "
             "order of members in a replication group is decided "
             "by implementation. \n"
             "Reverse Roles operation does not change CopyState: "
             "After Reverse Roles operation completes, CopyState "
             "does not change. \n"
             "Failover operation requires subsequent failback: "
             "The failover operation requires a subsequent "
             "failback before additional operations may be "
             "applied to the group, except for the detach "
             "operation. The detach operation may be issued from "
             "the failedover state. \n"
             "Planned Failover operation requires split state: "
             "The group must be in the CopyState split before a "
             "planned failover operation -- in planned failover, "
             "source and target elements are reachable. \n"
             "Planned Failover operation requires fractured "
             "state: The group must be in the CopyState "
             "fractured before a planned failover operation. \n"
             "Target element requires resource pool reserved for "
             "replication: Target elements can only be created "
             "in a resource pool that is reserved for "
             "replication service -- per the Usage value of the "
             "resource pool. \n"
             "AddSyncPair requires Synchronized mirror pair: The "
             "mirror pair to be added must be in the "
             "Synchronized CopyState. \n"
             "Provider can create remote elements using "
             "TargetPools: If remote elements need to be "
             "created, the Provider can create them in the "
             "supplied resource pools." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "26", "27", "28", "29", "30", "31", "32", "33", 
             "34", "35", "36", "37", "38", "39", "40", "41", 
             "42", "43", "44", "45", "46", "47", "48", "49", 
             "50", "51", "52", "53", "54", "55", "56", "57", 
             "58", "59", "60", "61", "62", "63", "64", "..", 
             "0x8000.." }, 
          Values { "One-to-many replication", 
             "Many-to-many groups", 
             "Consistency enabled for all groups", 
             "Empty replication groups allowed", 
             "Source group must have more than one element", 
             "Composite Groups", "Multihop element replication", 
             "Multi-hop elements must have same SyncType", 
             "Group can only have one single relationship active", 
             "Source element can be removed from group", 
             "Target element can be removed from group", 
             "Group can be temporary", "Group is nameable", 
             "Supports target element count", 
             "Synchronized clone target detaches automatically", 
             "Reverse Roles operation requires Read Only source", 
             "Reverse Roles operation requires subsequent resync", 
             "Restore operation requires subsequent fracture", 
             "Resync operation requires subsequent activate", 
             "Copy operation requires offline source", 
             "Restore operation requires subsequent detach", 
             "Element can be member of multiple groups", 
             "Elements of group can be mix of thin and thick", 
             "TokenizedClone ConsistentPointInTime", 
             "Target elements can be added to collections", 
             "Reverse Roles operation requires Synchronized state", 
             "Reverse Roles operation requires Fractured state", 
             "Reverse Roles operation requires Split state", 
             "Reverse Roles operation requires FailedOver state", 
             "Reverse Roles operation requires Suspended state", 
             "Provider can manage remote source group", 
             "Provider can manage remote target group", 
             "TargetGroup shall not be supplied", 
             "TargetPool shall not be supplied", 
             "TargetSettingGoal shall not be supplied", 
             "Provider can create remote target group", 
             "Provider can create local target group", 
             "Provider must create remote group", 
             "Creating remote elements requires TargetPool", 
             "Target group shall be supplied", 
             "CreateGroupReplica only accepts empty groups", 
             "One replication group per storage pool", 
             "Supports ConsistencyExempt when adding to group", 
             "Add or Remove to group requires Fractured state", 
             "Add or Remove to group requires Split state", 
             "Add or Remove to group requires Suspended state", 
             "Add or Remove to group requires FailedOver state", 
             "Supports SynchronizationAspect of replication group", 
             "No element level StorageSynchronized", 
             "Accepts foreign object paths", 
             "Failover operation requires subsequent fracture", 
             "Failover operation requires subsequent split", 
             "Restore operation requires subsequent resume", 
             "One consistent async per RemoteReplicationCollection", 
             "Client can supply RelationshipName", 
             "Implementation decides group member order", 
             "Reverse Roles operation does not change CopyState", 
             "Failover operation requires subsequent failback", 
             "Planned Failover operation requires split state", 
             "Planned Failover operation requires fractured state", 
             "Target element requires resource pool reserved for replication", 
             "AddSyncPair requires Synchronized mirror pair", 
             "Provider can create remote elements using TargetPools", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 GroupFeatures[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Consistency." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedConsistency(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Features. Sequentially "
             "Consistent: Members of a target group are "
             "sequentially consistent - the order of the write "
             "operations is maintained." ), 
          ValueMap { "2", "..", "0x8000.." }, 
          Values { "Sequentially Consistent", "DMTF Reserved", 
             "Vendor Specific" }, 
          ModelCorrespondence { 
             "CIM_GroupSynchronized.ConsistencyType" }]
      uint16 SupportedConsistency[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Operations on a StorageSynchronized "
          "association that can be supplied to the "
          "ModifyReplicaSynchronization method." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedOperations(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Operations. \n"
             "Abort: Abort the copy operation if it is possible. "
             "Activate Consistency: Ensure all target elements "
             "of a group are consistent. \n"
             "Activate: Activate an inactive or prepared source "
             "and target association. \n"
             "AddSyncPair: Add elements associated via "
             "StorageSynchronized to source and target groups. \n"
             "Deactivate Consistency: Disable consistency. \n"
             "Deactivate: Deactivate a source and target "
             "association. The \n"
             "writes to the target are deleted in the case of a "
             "snapshot. Detach: Remove the association between "
             "source and target. \n"
             "Dissolve: Dissolve the synchronization between two "
             "storage objects, however, the target element "
             "continues to exist. \n"
             "Failover: Switch to target element instead of "
             "source. \n"
             "Failback: Reverses the effects of failover. \n"
             "Fracture: Separate target element from source "
             "element. \n"
             "RemoveSyncPair: Remove pair of source and target "
             "elements from the source/target groups. \n"
             "Resync Replica: Synchronize a fractured/split "
             "source and target elements. \n"
             "Restore from Replica: Copy data from a fractured "
             "target back to source. \n"
             "Resume: Continue an association that was "
             "suspended. \n"
             "Reset To Sync: Change mode to synchronous. \n"
             "Reset To Async: Change mode to asynchronous. \n"
             "Reverse Roles: Make target the source and source "
             "the target. \n"
             "Return To ResourcePool: Applies to Snapshot -- "
             "delete the target element and its replication "
             "association. \n"
             "Split: Similar to Fracture, however, the provider "
             "needs to make sure whether there are pending I/O "
             "in transit before fracturing the connection. \n"
             "Suspend: Stop the copy operations to the target "
             "element. Continue when the operations is resumed. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state -- "
             "deprecated. \n"
             "Prepare: Replaces the Unprepare operation. \n"
             "Reset To Adaptive: Change the Mode of the copy "
             "operation to Adaptive." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "..", "0x8000..0xFFFF" }, 
          Values { "Abort", "Activate Consistency", "Activate", 
             "AddSyncPair", "Deactivate Consistency", 
             "Deactivate", "Detach", "Dissolve", "Failover", 
             "Failback", "Fracture", "RemoveSyncPair", 
             "Resync Replica", "Restore from Replica", "Resume", 
             "Reset To Sync", "Reset To Async", 
             "Return To ResourcePool", "Reverse Roles", "Split", 
             "Suspend", "Unprepare", "Prepare", 
             "Reset To Adaptive", "DMTF Reserved", 
             "Vendor Specific" }, 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.ServiceControlling[]", 
             "CIM_ReplicationServiceCapabilities.RequiresForce[]", 
             "CIM_ReplicationServiceCapabilities.UpdatesSynchronizedPath[]" }]
      uint16 SupportedOperations[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [IN, Description ( 
             "Limit the returned operations for this CopyState. "
             "If not specified, all supported operations for the "
             "ReplicationType are returned." ), 
          ModelCorrespondence { "CIM_Synchronized.CopyState" }]
      uint16 CopyState, 
         [OUT, Description ( 
             "Indicates which service can perform the operation. "
             "Values in this array are parallel to values in "
             "SupportedOperations. \n"
             "Source Only: Service that controls the source. \n"
             "Target Only: Service that controls the target. \n"
             "Source or Target: Service that controls either the "
             "source or the target. \n"
             "Both Source and Target: Service that controls \n"
             "both the source and the target. \n"
             "If null, \"Source or Target\" is assumed." ), 
          ValueMap { "2", "3", "4", "5", "..", "0x8000..0xFFFF" }, 
          Values { "Source Only", "Target Only", 
             "Source or Target", "Both Source and Target", 
             "DMTF Reserved", "Vendor Specific" }, 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedOperations[]" }]
      uint16 ServiceControlling[], 
         [OUT, Description ( 
             "Indicates whether the operation has to be forced "
             "by overriding certain configuration consistency "
             "checks. Values in this array are parallel to "
             "values in SupportedOperations." ), 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedOperations[]" }]
      boolean RequiresForce[], 
         [OUT, Description ( 
             "Indicates whether the operation updates the keys "
             "of the Synchronized association.Values in this "
             "array are parallel to values in "
             "SupportedOperations." ), 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedOperations[]" }]
      boolean UpdatesSynchronizedPath[]);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Operations on a GroupSynchronized association "
          "that can be supplied to the ModifyReplicaSynchronization "
          "method." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedGroupOperations(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported group Operations. Abort: "
             "Abort the copy operation if it is possible. \n"
             "Activate Consistency: Ensure all target elements "
             "of a group are consistent. \n"
             "Activate: Activate an inactive or prepared source "
             "and target association. \n"
             "AddSyncPair: Add elements associated via "
             "StorageSynchronized to source and target groups. \n"
             "Deactivate Consistency: Disable consistency. \n"
             "Deactivate: Deactivates a source and target "
             "association. The writes to the target are deleted "
             "in the case of a snapshot. \n"
             "Detach: Remove the association between source and "
             "target. \n"
             "Dissolve: Dissolve the synchronization between two "
             "storage objects, however, the target element "
             "continues to exist. \n"
             "Failover: Switch to target element instead of "
             "source. \n"
             "Failback: Reverses the effects of failover. \n"
             "Fracture: Separate target element from source "
             "element. \n"
             "RemoveSyncPair: Remove pair of source and target "
             "elements from the source/target groups. \n"
             "Resync Replica: Synchronize a fractured/split "
             "source and target elements. \n"
             "Restore from Replica: Copy data from a fractured "
             "target back to source. \n"
             "Resume: Continue an association that was "
             "suspended. \n"
             "Reset To Sync: Change mode to synchronous. \n"
             "Reset To Async: Change mode to asynchronous. \n"
             "Reverse Roles: Make target the source and source "
             "the target. \n"
             "Return To ResourcePool: Applies to Snapshot -- "
             "delete the target element and its replication "
             "association. \n"
             "Split: Similar to Fracture, however, the provider "
             "needs to make sure whether there are pending I/O "
             "in transit before fracturing the connection. \n"
             "Suspend: Stop the copy operations to the target "
             "element. Continue when the operations is resumed. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state -- "
             "deprecated. \n"
             "Prepare: Replaces the Unprepare operation.Reset To "
             "Adaptive: Change the Mode of the copy operation to "
             "Adaptive." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "..", "0x8000..0xFFFF" }, 
          Values { "Abort", "Activate Consistency", "Activate", 
             "AddSyncPair", "Deactivate Consistency", 
             "Deactivate", "Detach", "Dissolve", "Failover", 
             "Failback", "Fracture", "RemoveSyncPair", 
             "Resync Replica", "Restore from Replica", "Resume", 
             "Reset To Sync", "Reset To Async", 
             "Return To ResourcePool", "Reverse Roles", "Split", 
             "Suspend", "Unprepare", "Prepare", 
             "Reset To Adaptive", "DMTF Reserved", 
             "Vendor Specific" }, 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.ServiceControlling[]", 
             "CIM_ReplicationServiceCapabilities.RequiresForce[]", 
             "CIM_ReplicationServiceCapabilities.UpdatesSynchronizedPath[]" }]
      uint16 SupportedGroupOperations[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [IN, Description ( 
             "Limit the returned operations for this CopyState. "
             "If not specified, all supported operations for the "
             "ReplicationType are returned." ), 
          ModelCorrespondence { "CIM_Synchronized.CopyState" }]
      uint16 CopyState, 
         [OUT, Description ( 
             "Indicates which service can perform the operation. "
             "Values in this array are parallel to values in "
             "SupportedGroupOperations. \n"
             "Source Only: Service that controls the source. \n"
             "Target Only: Service that controls the target. \n"
             "Source or Target: Service that controls either the "
             "source or the target. \n"
             "Both Source and Target: Service that controls \n"
             "both the source and the target. \n"
             "If null, \"Source or Target\" is assumed." ), 
          ValueMap { "2", "3", "4", "5", "..", "0x8000..0xFFFF" }, 
          Values { "Source Only", "Target Only", 
             "Source or Target", "Both Source and Target", 
             "DMTF Reserved", "Vendor Specific" }, 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedGroupOperations[]" }]
      uint16 ServiceControlling[], 
         [OUT, Description ( 
             "Indicates whether the operation has to be forced "
             "by overriding certain configuration consistency "
             "checks. Values in this array are parallel to "
             "values in SupportedGroupOperations." ), 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedGroupOperations[]" }]
      boolean RequiresForce[], 
         [OUT, Description ( 
             "Indicates whether the operation updates the keys "
             "of the Synchronized association.Values in this "
             "array are parallel to values in "
             "SupportedGroupOperations." ), 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedGroupOperations[]" }]
      boolean UpdatesSynchronizedPath[]);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Operations on a list of StorageSynchronized or "
          "GroupSynchronized associations that can be supplied to "
          "the ModifyListSynchronization method." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedListOperations(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [IN, Description ( 
             "Specifies the supported operations as they apply "
             "to a list of StorageSynchronized or "
             "GroupSynchronized. If this parameter is not "
             "specified, StorageSynchronized is assumed." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "StorageSynchronized", "GroupSynchronized", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 SynchronizationType, 
         [OUT, Description ( 
             "An array of Supported group Operations. Abort: "
             "Abort the copy operation if it is possible. \n"
             "Activate: Activate an inactive or prepared source "
             "and target association. \n"
             "Deactivate: Deactivate a source and target "
             "association. The writes to the target are deleted "
             "in the case of a snapshot. \n"
             "Detach: Remove the association between source and "
             "target. \n"
             "Dissolve: Dissolve the synchronization between two "
             "storage objects, however, the target element "
             "continues to exist. \n"
             "Failover: Switch to target element instead of "
             "source. \n"
             "Failback: Reverses the effects of failover. \n"
             "Fracture: Separate target element from source "
             "element. \n"
             "Resync Replica: Synchronize a fractured/split "
             "source and target elements. \n"
             "Restore from Replica: Copy data from a fractured "
             "target back to source. \n"
             "Resume: Continue an association that was "
             "suspended. \n"
             "Reset To Sync: Change mode to synchronous. \n"
             "Reset To Async: Change mode to asynchronous. \n"
             "Reverse Roles: Make target the source and source "
             "the target. \n"
             "Return To ResourcePool: Applies to Snapshot -- "
             "delete the target element and its replication "
             "association. \n"
             "Split: Similar to Fracture, however, the provider "
             "needs to make sure whether there are pending I/O "
             "in transit before fracturing the connection. \n"
             "Suspend: Stop the copy operations to the target "
             "element. \n"
             "Continue when the operations is resumed. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state -- "
             "deprecated. Prepare: Replaces the Unprepare "
             "operation.Reset To Adaptive: Change the Mode of "
             "the copy operation to Adaptive." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "..", "0x8000..0xFFFF" }, 
          Values { "Abort", "DMTF Reserved", "Activate", 
             "DMTF Reserved", "DMTF Reserved", "Deactivate", 
             "Detach", "Dissolve", "Failover", "Failback", 
             "Fracture", "DMTF Reserved", "Resync Replica", 
             "Restore from Replica", "Resume", "Reset To Sync", 
             "Reset To Async", "Return To ResourcePool", 
             "Reverse Roles", "Split", "Suspend", "Unprepare", 
             "Prepare", "Reset To Adaptive", "DMTF Reserved", 
             "Vendor Specific" }, 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.ServiceControlling[]", 
             "CIM_ReplicationServiceCapabilities.RequiresForce[]", 
             "CIM_ReplicationServiceCapabilities.UpdatesSynchronizedPath[]" }]
      uint16 SupportedListOperations[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [IN, Description ( 
             "Limit the returned operations for this CopyState. "
             "If not specified, all supported operations for the "
             "ReplicationType are returned." ), 
          ModelCorrespondence { "CIM_Synchronized.CopyState" }]
      uint16 CopyState, 
         [OUT, Description ( 
             "Indicates which service can perform the operation. "
             "Values in this array are parallel to values in "
             "SupportedListOperations. \n"
             "Source Only: Service that controls the source. \n"
             "Target Only: Service that controls the target. \n"
             "Source or Target: Service that controls either the "
             "source or the target. \n"
             "Both Source and Target: Service that controls \n"
             "both the source and the target. \n"
             "If null, \"Source or Target\" is assumed." ), 
          ValueMap { "2", "3", "4", "5", "..", "0x8000..0xFFFF" }, 
          Values { "Source Only", "Target Only", 
             "Source or Target", "Both Source and Target", 
             "DMTF Reserved", "Vendor Specific" }, 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedListOperations[]" }]
      uint16 ServiceControlling[], 
         [OUT, Description ( 
             "Indicates whether the operation has to be forced "
             "by overriding certain configuration consistency "
             "checks. Values in this array are parallel to "
             "values in SupportedListOperations." ), 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedListOperations[]" }]
      boolean RequiresForce[], 
         [OUT, Description ( 
             "Indicates whether the operation updates the keys "
             "of the Synchronized association.Values in this "
             "array are parallel to values in "
             "SupportedListOperations." ), 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedListOperations[]" }]
      boolean UpdatesSynchronizedPath[]);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported Operations on a SettingsDefineState "
          "association that can be supplied to the "
          "ModifySettingsDefineState method." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedSettingsDefineStateOperations(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of supported Operations. \n"
             "Activate Consistency: Enable consistency. \n"
             "Deactivate Consistency: Disable consistency \n"
             "Delete: Remove the SettingsDefineState "
             "association. Instance of SynchronizationAspect may "
             "also be deleted if it is not shared with other "
             "elements. \n"
             "Copy To Target: Introduces the target elements and "
             "forms the necessary associations between the "
             "source and the target elements i.e. "
             "StorageSynchronized and GroupSynchronized." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "..", 
             "0x8000..0xFFFF" }, 
          Values { "Activate Consistency", 
             "Deactivate Consistency", "Delete", 
             "Copy To Target", "Detach", "Restore", 
             "Attach To Target", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 SupportedOperations[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported features related to thin provisioning." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedThinProvisioningFeatures(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported Thin Provisioning Features. \n"
             "Thin provisioning is not supported: Feature is "
             "unavailable. \n"
             "Zeros written in unused allocated blocks of "
             "target: In copying thin to full, the unused blocks "
             "of target will be written with zeros. \n"
             "Unused allocated blocks of target are not "
             "initialized: In copying thin to full, the unused "
             "blocks of target will remain uninitialized. \n"
             "See the property "
             "ReplicationSettingData.ThinProvisioningPolicy for "
             "a list of possible options for a copy operation." ), 
          ValueMap { "1", "2", "3", "..", "0x8000.." }, 
          Values { "Thin provisioning is not supported", 
             "Zeros written in unused allocated blocks of target", 
             "Unused allocated blocks of target are not initialized", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { 
             "CIM_ReplicationSettingData.ThinProvisioningPolicy" }]
      uint16 SupportedThinProvisioningFeatures[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method accepts a ReplicationType and a component, "
          "it then returns a static numeric value representing the "
          "maximum number of the specified component that the "
          "service supports. A value of 0 indicates unlimited "
          "components of the given type. In all cases the maximum "
          "value is bound by the availability of resources on the "
          "computer system. Effectively, the method informs clients "
          "of the edge conditions." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "..", 
          "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", 
          "Information is not available", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedMaximum(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [IN, Description ( 
             "For the given Mirror, Snapshot, Clone and their "
             "mode and locality variations as specified by "
             "ReplicationType, this parameter represents one of "
             "the following components: Number of groups: "
             "Maximum number of groups supported by the "
             "replication service.Number of elements per source "
             "group: Maximum number of elements in a group that "
             "can be used as a source group. Number of elements "
             "per target group: Maximum number of elements in a "
             "group that can be used as a target group. Number "
             "of target elements per source element: Maximum "
             "number of target elements per source element. "
             "Number of total source elements: Maximum number of "
             "total source elements supported by the service. "
             "Number of total target elements: Maximum number of "
             "total target elements supported by the source. "
             "Number of peer systems: Maximum number of peer "
             "systems that replication service can communicate "
             "with. Number of hops in multi-hop replication: "
             "Maximum number of hops in multi-hop replication "
             "the service can manage. \n"
             "Maximum number of tokens supported: Maximum number "
             "of tokens per sub-system. \n"
             "Current number of tokens in-use: Number of tokens "
             "in use for the sub-system. \n"
             "Optimal token size: Refers to OptimalDataChunk." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "..", "0x8000.." }, 
          Values { "Number of groups", 
             "Number of elements per source group", 
             "Number of elements per target group", 
             "Number of target elements per source element", 
             "Number of total source elements", 
             "Number of total target elements", 
             "Number of peer systems", 
             "Number of hops in multi-hop copy", 
             "Maximum number of tokens supported", 
             "Current number of tokens in-use", 
             "Optimal token size", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 Component, 
         [OUT, Description ( 
             "The maximum value, or 0 if the maximum is unlimited."
              )]
      uint64 MaxValue, 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType, returns the "
          "default consistency value." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetDefaultConsistency(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "Default consistency value, or 0 if there is no default value."
              ), 
          ValueMap { "0", "1", "2", "..", "0x8000.." }, 
          Values { "No default consistency", "DMTF Reserved", 
             "Sequentially Consistent", "DMTF Reserved", 
             "Vendor Specific" }, 
          ModelCorrespondence { 
             "CIM_GroupSynchronized.ConsistencyType" }]
      uint16 DefaultConsistency, 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method returns the default persistency for a newly "
          "created group." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetDefaultGroupPersistency(
         [OUT, Description ( "Default group persistency value." ), 
          ValueMap { "0", "1", "2", "3", "..", "0x8000.." }, 
          Values { "No default persistency", "DMTF Reserved", 
             "Persistent", "Not Persistent", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 DefaultGroupPersistency);

      [Description ( 
          "This method, for a given ReplicationType and a supplied "
          "property, returns an array of supported settings that "
          "can be utilized in an instance of the "
          "ReplicationSettingData class. \n"
          "Property Is Not Supported: Implementation does not "
          "support the property." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "..", 
          "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", 
          "Property Is Not Supported", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedReplicationSettingData(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [IN, Description ( 
             "A value representing the property name." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "23", "24", "25", "26", 
             "27", "..", "0x8000.." }, 
          Values { "ConsistentPointInTime", 
             "DesiredCopyMethodology", "Multihop", 
             "OnGroupOrListError", "UnequalGroupsAction", 
             "TargetElementSupplier", "ThinProvisioningPolicy", 
             "Pairing", "FailedCopyStopsHostIO", 
             "CopyRecoveryMode", "UnequalListsAction", 
             "DeltaUpdateInterval", "DeltaUpdateBlocks", 
             "ReadOnly", "StorageCompressionPolicy", 
             "TargetElementResourcePool", "TargetElementGoal", 
             "RRCSoftwareCompressionEnabled", 
             "RRCHardwareCompressionEnabled", "AutoDelete", 
             "TimeBeforeRemoval", "ConsistencyExempt", 
             "ConsistentAsyncCopy", "RPO", "Skew", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 PropertyName, 
         [IN ( false ), OUT, Description ( 
             "An array containing the supported values that can "
             "be supplied in an instance of a "
             "ReplicationSettingData. Refer to the class "
             "ReplicationSettingData for the possible values for "
             "each property. For boolean data, use the following "
             "data mapping: 2=\"false\", 3=\"true\". \n"
             "For datetime data, use the following data mapping: "
             "0=\"property is supported\", or a valid datetime "
             "value. \n"
             "For supported DesiredRPO, there are three possible "
             "values: first, the default value; second, the "
             "minimum value; third, the maximum value." ), 
          ModelCorrespondence { 
             "CIM_ReplicationSettingData.ConsistentPointInTime", 
             "CIM_ReplicationSettingData.DesiredCopyMethodology", 
             "CIM_ReplicationSettingData.Multihop", 
             "CIM_ReplicationSettingData.OnGroupOrListError", 
             "CIM_ReplicationSettingData.Pairing", 
             "CIM_ReplicationSettingData.UnequalGroupsAction", 
             "CIM_ReplicationSettingData.TargetElementSupplier", 
             "CIM_ReplicationSettingData.ThinProvisioningPolicy", 
             "CIM_ReplicationSettingData.FailedCopyStopsHostIO", 
             "CIM_ReplicationSettingData.CopyRecoveryMode", 
             "CIM_ReplicationSettingData.UnequalListsAction", 
             "CIM_ReplicationSettingData.DeltaUpdateInterval", 
             "CIM_ReplicationSettingData.DeltaUpdateBlocks", 
             "CIM_ReplicationSettingData.ReadOnly", 
             "CIM_ReplicationSettingData.StorageCompressionPolicy", 
             "CIM_ReplicationSettingData.TargetElementResourcePool", 
             "CIM_ReplicationSettingData.TargetElementGoal", 
             "CIM_ReplicationSettingData.RRCSoftwareCompressionEnabled", 
             "CIM_ReplicationSettingData.RRCHardwareCompressionEnabled", 
             "CIM_ReplicationSettingData.AutoDelete", 
             "CIM_ReplicationSettingData.TimeBeforeRemoval", 
             "CIM_ReplicationSettingData.ConsistencyExempt", 
             "CIM_ReplicationSettingData.ConsistentAsyncCopy", 
             "CIM_ReplicationSettingData.DesiredRPO", 
             "CIM_ReplicationSettingData.MaximumSkew" }]
      uint64 SupportedValues[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "default ReplicationSettingData as an instance." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "..", 
          "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", 
          "No default ReplicationSettingData", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetDefaultReplicationSettingData(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "A copy of the ReplicationSettingData instance is "
             "populated with default values for the given "
             "ReplicationType." ), 
          EmbeddedObject]
      string DefaultInstance);

      [Description ( 
          "This method accepts a connection reference and returns "
          "specific features of that connection." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedConnectionFeatures(
         [IN, Description ( 
             "A value representing the connection." )]
      CIM_ServiceAccessPoint REF connection, 
         [OUT, Description ( 
             "An array supported connection features. "
             "Unidirectional to ServiceAccessPoint: Data flow is "
             "unidirectional to ServiceAccessPoint such as a "
             "protocol end point. Unidirectional from "
             "ServiceAccessPoint: Data flow is unidirectional "
             "from ServiceAccessPoint such as a protocol end "
             "point." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Unidirectional to ServiceAccessPoint", 
             "Unidirectional from ServiceAccessPoint", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 SupportedConnectionFeatures[]);

      [Description ( 
          "For the supplied element, this method returns the "
          "supported synchronization operations in a series of "
          "parallel output arrays." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSynchronizationSupported(
         [IN, Description ( 
             "A reference to the supplied element. For example, "
             "the source element." )]
      CIM_ManagedElement REF LocalElement, 
         [IN, Description ( 
             "A reference to the other end of the "
             "synchronization association. For example, the "
             "target element. OtherElement can be a local or a "
             "remote element." )]
      CIM_ManagedElement REF OtherElement, 
         [IN, Description ( 
             "A reference to the access point instance to allow "
             "the service to access the OtherElement. If NULL, "
             "it is assumed the service does not need any access "
             "information or the element is local." )]
      CIM_ServiceAccessPoint REF OtherElementAccessPoint, 
         [IN, Description ( 
             "A value representing the desired method name." ), 
          ValueMap { "2", "3", "4", "..", "0x8000.." }, 
          Values { "CreateElementReplica", "CreateGroupReplica", 
             "CreateSynchronizationAspect", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 MethodName, 
         [IN, Description ( 
             "If provided, it overrides the default replication "
             "setting data for the given SyncType. For example, "
             "the intended CopyMethodology can be specified to "
             "determine if the copy operation is supported for "
             "the given source and target elements." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [OUT, Description ( 
             "An array of supported SyncTypes for the copy "
             "operations using the supplied element." ), 
          ValueMap { "6", "7", "8", "..", "0x8000.." }, 
          Values { "Mirror", "Snapshot", "Clone", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.SyncType" }]
      uint16 SyncTypes[], 
         [OUT, Description ( 
             "An array of supported Modes for the copy "
             "operations using the supplied element." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "Synchronous", "Asynchronous", 
             "DMTF Reserved", "Vendor Specific" }, 
          ModelCorrespondence { "CIM_Synchronized.Mode" }]
      uint16 Modes[], 
         [OUT, Description ( 
             "An array that specifies whether the local element "
             "can be the source or the target element of the "
             "copy operations. Possible values are: \n"
             "SystemElement: the source element. \n"
             "SyncedElement: the target element. \n"
             "These designations correspond to the keys of the "
             "Synchronized association." ), 
          ValueMap { "2", "3", "..", "0x8000.." }, 
          Values { "SystemElement", "SyncedElement", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 LocalElementRole[]);

      [Description ( 
          "This method for a given ReplicationType returns the "
          "supported features related to storage compression." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedStorageCompressionFeatures(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of supported Storage Compression Features." ), 
          ValueMap { "1", "2", "3", "4", "5", "6", "7", "..", 
             "0x8000.." }, 
          Values { "Storage compression is not supported", 
             "Compressed source to compressed target", 
             "Compressed source to uncompressed target", 
             "Uncompressed source to compressed target", 
             "Compression of target same as source", 
             "Target pool decides compression of target element", 
             "Implementation decides compression of target", 
             "DMTF Reserved", "Vendor specific" }, 
          ModelCorrespondence { 
             "CIM_ReplicationSettingData.StorageCompressionPolicy" }]
      uint16 SupportedStorageCompressionFeatures[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "For the supplied elements, this method returns the "
          "supported tokenized ReplicationTypes. At least one "
          "supplied element is expected to be local to the service. \n"
          "Not Supported: Tokenized operation is not supported "
          "between the supplied elements. \n"
          "Source Temporarily Not Available: Source element "
          "temporarily cannot be used for tokenized operations -- "
          "for example, the source element is currently being used "
          "for another copy operation. \n"
          "Target Temporarily Not Available: Target element "
          "temporarily cannot be used for tokenized operations -- "
          "for example, the target element is currently being used "
          "for another copy operation." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "7", "8", "..", 
          "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", 
          "Source Temporarily Not Available", 
          "Target Temporarily Not Available", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedTokenizedReplicationType(
         [IN, Description ( "A reference to the source element." )]
      CIM_ManagedElement REF SourceElement, 
         [IN, Description ( "A reference to the target element." )]
      CIM_ManagedElement REF TargetElement, 
         [IN, Description ( 
             "A reference to the access point instance to allow "
             "the service to access the Element if the element "
             "is not local to the service. If NULL, it is "
             "assumed the service does not need any access "
             "information to the local element." )]
      CIM_ServiceAccessPoint REF ElementAccessPoint, 
         [IN, Description ( 
             "If supplied, it provides additional information "
             "about the copy operation. For example, the "
             "intended CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [OUT, Description ( 
             "An array of supported tokenized ReplicationTypes." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationTypes[]);

      [Experimental, Description ( 
          "This method indicates if ElementName or RelationshipName "
          "can be specified as a part of invoking an appropriate "
          "method of ReplicationService to create a new element or "
          "association. \n"
          "Additionally, the returned data includes the methods "
          "that can be used to modify the ElementName of existing "
          "components. \n"
          "This method also returns the restrictions on the "
          "ElementName in the related \"OUT\" parameters." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetElementNameCapabilities(
         [IN, Description ( 
             "A value indicating the element type." ), 
          ValueMap { "2", "3", "4", "5", "6", "..", "0x8000.." }, 
          Values { "ReplicationGroup", "StorageSynchronized", 
             "GroupSynchronized", "SynchronizationAspect", 
             "ReplicationEntity", "DMTF Reserved", 
             "Vendor Specific" }]
      uint16 ElementType, 
         [OUT, Description ( 
             "Enumeration indicating what methods can accept the "
             "element name for creation or modification of a "
             "component. \n"
             "CreateElementReplica is an example of an "
             "InvokeMethod. ModifyInstance and SetProperty are "
             "examples of intrinsic methods. \n"
             "An empty array indicates ElementNaming for "
             "ElementType is not supported, in which case the "
             "other OUT parameters are null." ), 
          ValueMap { "2", "3", "4", "..", "32768..65535" }, 
          Values { "ElementName can be supplied during creation", 
             "ElementName can be modified with InvokeMethod", 
             "ElementName can be modified with intrinsic method", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 SupportedFeatures[], 
         [OUT, Description ( 
             "Maximum supported ElementName length." ), 
          ModelCorrespondence { 
             "CIM_EnabledLogicalElementCapabilities.MaxElementNameLen" }]
      uint16 MaxElementNameLen, 
         [OUT, Description ( 
             "This string expresses the restrictions on "
             "ElementName. The mask is expressed as a regular "
             "expression. See DMTF standard ABNF with the "
             "Management Profile Specification Usage Guide, "
             "Annex C for the regular expression syntax "
             "permitted. \n"
             "Since the ElementNameMask can describe the maximum "
             "length of the ElementName, any length defined in "
             "the regexp is in addition to the restriction "
             "defined in MaxElementNameLen (causing the smaller "
             "value to be the maximum length). The ElementName "
             "value satisfies the restriction, if and only if it "
             "matches the regular expression. \n"
             "If NULL, it indicates no restrictions on the "
             "ElementName." ), 
          ModelCorrespondence { 
             "CIM_EnabledLogicalElementCapabilities.ElementNameMask" }]
      string ElementNameMask);

      [Description ( 
          "This method, for a given ReplicationType, returns the "
          "supported list features -- such as a list used by "
          "CreateListReplica." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedListFeatures(
         [IN, Description ( 
             "A value representing the ReplicationType." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 ReplicationType, 
         [OUT, Description ( 
             "An array of Supported List Features. \n"
             "Sequential consistency: Elements of the list are "
             "consistent. \n"
             "No consistency: Elements of the list are not "
             "consistent. \n"
             "Consistent list requires same ElementNames: If "
             "ElementNames are supplied, they need to be the "
             "same. \n"
             "Target element can be added to collections: After "
             "the replication relationship is established, the "
             "target element can be added to the supplied "
             "collections -- such as a DeviceMaskingGroup." ), 
          ValueMap { "2", "3", "4", "5", "6", "..", "0x8000.." }, 
          Values { "List is supported", "Sequential consistency", 
             "No consistency", 
             "Consistent list requires same ElementNames", 
             "Target element can be added to collections", 
             "DMTF Reserved", "Vendor Specific" }]
      uint16 GroupFeatures[], 
         [IN, Description ( 
             "If supplied, it provides additional refinements "
             "for the ReplicationType. For example, the "
             "CopyMethodology." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData);

      [Description ( 
          "For the supplied Synchronized association, this method "
          "returns the supported operations in a series of parallel "
          "output arrays." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedOperationsForSynchronization(
         [Required, IN, Description ( 
             "The reference to the replication association "
             "describing the elements/groups relationship." )]
      CIM_Synchronized REF Synchronization, 
         [IN, Description ( 
             "If provided, it provides additional data about the "
             "Synchronization." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [OUT, Description ( 
             "An array of Supported Operations. \n"
             "Abort: Abort the copy operation if it is possible. "
             "Activate Consistency: Ensure all target elements "
             "of a group are consistent. \n"
             "Activate: Activate an inactive or prepared source "
             "and target association. \n"
             "AddSyncPair: Add elements associated via "
             "StorageSynchronized to source and target groups. \n"
             "Deactivate Consistency: Disable consistency. \n"
             "Deactivate: Deactivate a source and target "
             "association. The \n"
             "writes to the target are deleted in the case of a "
             "snapshot. Detach: Remove the association between "
             "source and target. \n"
             "Dissolve: Dissolve the synchronization between two "
             "storage objects, however, the target element "
             "continues to exist. \n"
             "Failover: Switch to target element instead of "
             "source. \n"
             "Failback: Reverses the effects of failover. \n"
             "Fracture: Separate target element from source "
             "element. \n"
             "RemoveSyncPair: Remove pair of source and target "
             "elements from the source/target groups. \n"
             "Resync Replica: Synchronize a fractured/split "
             "source and target elements. \n"
             "Restore from Replica: Copy data from a fractured "
             "target back to source. \n"
             "Resume: Continue an association that was "
             "suspended. \n"
             "Reset To Sync: Change mode to synchronous. \n"
             "Reset To Async: Change mode to asynchronous. \n"
             "Reverse Roles: Make target the source and source "
             "the target. \n"
             "Return To ResourcePool: Applies to Snapshot -- "
             "delete the target element and its replication "
             "association. \n"
             "Split: Similar to Fracture, however, the provider "
             "needs to make sure whether there are pending I/O "
             "in transit before fracturing the connection. \n"
             "Suspend: Stop the copy operations to the target "
             "element. Continue when the operations is resumed. \n"
             "Unprepare: Causes the synchronization to be "
             "reinitialized and stop in Prepared state -- "
             "deprecated. \n"
             "Prepare: Replaces the Unprepare operation. \n"
             "Reset To Adaptive: Change the Mode of the copy "
             "operation to Adaptive." ), 
          ValueMap { "2", "3", "4", "5", "6", "7", "8", "9", 
             "10", "11", "12", "13", "14", "15", "16", "17", 
             "18", "19", "20", "21", "22", "23", "24", "25", 
             "..", "0x8000..0xFFFF" }, 
          Values { "Abort", "Activate Consistency", "Activate", 
             "AddSyncPair", "Deactivate Consistency", 
             "Deactivate", "Detach", "Dissolve", "Failover", 
             "Failback", "Fracture", "RemoveSyncPair", 
             "Resync Replica", "Restore from Replica", "Resume", 
             "Reset To Sync", "Reset To Async", 
             "Return To ResourcePool", "Reverse Roles", "Split", 
             "Suspend", "Unprepare", "Prepare", 
             "Reset To Adaptive", "DMTF Reserved", 
             "Vendor Specific" }, 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.ServiceControlling[]", 
             "CIM_ReplicationServiceCapabilities.RequiresForce[]", 
             "CIM_ReplicationServiceCapabilities.UpdatesSynchronizedPath[]" }]
      uint16 SupportedOperations[], 
         [OUT, Description ( 
             "Indicates which service can perform the operation. "
             "Values in this array are parallel to values in "
             "SupportedOperations. \n"
             "Source Only: Service that controls the source. \n"
             "Target Only: Service that controls the target. \n"
             "Source or Target: Service that controls either the "
             "source or the target. \n"
             "Both Source and Target: Service that controls \n"
             "both the source and the target. \n"
             "If null, \"Source or Target\" is assumed." ), 
          ValueMap { "2", "3", "4", "5", "..", "0x8000..0xFFFF" }, 
          Values { "Source Only", "Target Only", 
             "Source or Target", "Both Source and Target", 
             "DMTF Reserved", "Vendor Specific" }, 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedOperations[]" }]
      uint16 ServiceControlling[], 
         [OUT, Description ( 
             "Indicates whether the operation has to be forced "
             "by overriding certain configuration consistency "
             "checks. Values in this array are parallel to "
             "values in SupportedOperations." ), 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedOperations[]" }]
      boolean RequiresForce[], 
         [OUT, Description ( 
             "Indicates whether the operation updates the keys "
             "of the Synchronized association.Values in this "
             "array are parallel to values in "
             "SupportedOperations." ), 
          ArrayType ( "Indexed" ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedOperations[]" }]
      boolean UpdatesSynchronizedPath[]);

      [Description ( 
          "For the supplied (remote) system, this method returns "
          "the supported ReplicationTypes that the service "
          "supports. For example, ReplicationType of 3 indicates "
          "the service supports \"Synchronous Mirror Remote\" to "
          "the supplied system." ), 
       ValueMap { "0", "1", "2", "3", "4", "5", "6", "..", "0x8000.." }, 
       Values { "Success", "Not Supported", "Unknown", "Timeout", 
          "Failed", "Invalid Parameter", "In Use", "DMTF Reserved", 
          "Vendor Specific" }]
   uint32 GetSupportedReplicationTypesForSystem(
         [Required, IN, Description ( 
             "The reference to a (remote) system." )]
      CIM_ComputerSystem REF System, 
         [IN, Description ( 
             "If provided, it provides additional data about the "
             "Synchronization." ), 
          EmbeddedInstance ( "CIM_ReplicationSettingData" )]
      string ReplicationSettingData, 
         [OUT, Description ( 
             "An array of supported ReplicationTypes." ), 
          ModelCorrespondence { 
             "CIM_ReplicationServiceCapabilities.SupportedReplicationTypes" }]
      uint16 SupportedReplicationTypes[]);

};
