//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
// =============================================================================
// Title:              PG_ComputerSystem  MOF  
// Filename:           PG_ComputerSystem20.mof
// Date:               05/29/2001
// Description:        This file specifies the PG_ComputerSystem class
//
// This class definitions contained in this file are:
//   CIM_ManagedElement
//   CIM_ManagedSystemElement
//   CIM_LogicalElement
//   CIM_System
//   CIM_ComputerSystem
//   CIM_UnitaryComputerSystem
//   PG_ComputerSystem
// =============================================================================

// =============================================================================
// Copyright 1998-2003 Distributed Management Task Force, Inc. (DMTF).
// All rights reserved.
// DMTF is a not-for-profit association of industry members dedicated
// to promoting enterprise and systems management and interoperability.
// DMTF specifications and documents may be reproduced for uses
// consistent with this purpose by members and non-members,
// provided that correct attribution is given.
// As DMTF specifications may be revised from time to time,
// the particular version and release date should always be noted.
// ===================================================================

// ==================================================================
// ManagedElement
// ================================================================== 
   [Abstract, Description (
     "ManagedElement is an abstract class that provides a common "  
     "superclass (or top of the inheritance tree) for the "
     "non-association classes in the CIM Schema.")]
class CIM_ManagedElement {  
      [MaxLen (64), Description (  
        "The Caption property is a short textual description (one-"    
        "line string) of the object.") ]   
   string Caption;  
      [Description (  
        "The Description property provides a textual description of "
        "the object.") ]   
   string Description;    
};
     

// ================================================================== 
//    ManagedSystemElement
// ==================================================================
   [Abstract, Description (
     "CIM_ManagedSystemElement is the base class for the System "
     "Element hierarchy. Membership Criteria: Any distinguishable "
     "component of a System is a candidate for inclusion in this "
     "class. Examples: software components, such as files; and "
     "devices, such as disk drives and controllers, and physical "
     "components such as chips and cards.") ] 
class CIM_ManagedSystemElement : CIM_ManagedElement {
      [Description (
        "A datetime value indicating when the object was installed. "
        "A lack of a value does not indicate that the object is not "
        "installed."), 
       MappingStrings {"MIF.DMTF|ComponentID|001.5"} ] 
   datetime InstallDate;
      [MaxLen (256), Description (
        "The Name property defines the label by which the object is "
        "known. When subclassed, the Name property can be overridden "
        "to be a Key property.") ] 
   string Name;
      [MaxLen (10), Description ( 
        "  A string indicating the current status of the object. " 
        "Various operational and non-operational statuses are " 
        "defined. Operational statuses are \"OK\", \"Degraded\", " 
        "\"Stressed\" and \"Pred Fail\". \"Stressed\" indicates that " 
        "the Element is functioning, but needs attention. Examples " 
        "of \"Stressed\" states are overload, overheated, etc. The " 
        "condition \"Pred Fail\" (failure predicted) indicates that " 
        "an Element is functioning properly but predicting a failure " 
        "in the near future. An example is a SMART-enabled hard " 
        "drive. \n" 
        "  Non-operational statuses can also be specified. These " 
        "are \"Error\", \"NonRecover\", \"Starting\", \"Stopping\", " 
        " \"Stopped\", " 
        "\"Service\", \"No Contact\" and \"Lost Comm\". \"NonRecover\" " 
        "indicates that a non-recoverable error has occurred. " 
        "\"Service\" describes an Element being configured, maintained, " 
        "cleaned, or otherwise administered. This status could apply " 
        "during mirror-resilvering of a disk, reload of a user " 
        "permissions list, or other administrative task. Not all such " 
        "work is on-line, yet the Element is neither \"OK\" nor in " 
        "one of the other states. \"No Contact\" indicates that the " 
        "current instance of the monitoring system has knowledge of " 
        "this Element but has never been able to establish " 
        "communications with it. \"Lost Comm\" indicates that " 
        "the ManagedSystemElement is known to exist and has been " 
        "contacted successfully in the past, but is currently unreachable." 
        "\"Stopped\" indicates that the ManagedSystemElement is known " 
        "to exist, it is not operational (i.e. it is unable to " 
        "provide service to users), but it has not failed. It has purposely " 
        "been made non-operational. The Element " 
        "may have never been \"OK\", the Element may have initiated its " 
        "own stop, or a management system may have initiated the stop."), 
       ValueMap {"OK", "Error", "Degraded", "Unknown", "Pred Fail", 
                 "Starting", "Stopping", "Service", "Stressed", 
                 "NonRecover", "No Contact", "Lost Comm", "Stopped"} ] 
   string Status; 
};


// ==================================================================
//    LogicalElement
// ==================================================================
   [Abstract, Description (
     "CIM_LogicalElement is a base class for all the components of "
     "a System that represent abstract system components, such "
     "as Files, Processes, or system capabilities in the form "
     "of Logical Devices.") ] 
class CIM_LogicalElement : CIM_ManagedSystemElement {
};

     
// ==================================================================
//    System
// ==================================================================
   [Abstract, Description (
     "A CIM_System is a LogicalElement that aggregates an "
     "enumerable set of Managed System Elements. The aggregation "
     "operates as a functional whole. Within any particular "
     "subclass of System, there is a well-defined list of "
     "Managed System Element classes whose instances must be "
     "aggregated.") ] 
class CIM_System : CIM_LogicalElement {
      [Key, MaxLen (256), Description (
        "CreationClassName indicates the name of the class or the "
        "subclass used in the creation of an instance. When used "
        "with the other key properties of this class, this property "
        "allows all instances of this class and its subclasses to "
        "be uniquely identified.") ]
   string CreationClassName;
      [Key, MaxLen (256), Override ("Name"), Description (
        "The inherited Name serves as key of a System instance in " 
        "an enterprise environment.") ] 
   string Name;
      [MaxLen (64), Description (
        "The System object and its derivatives are Top Level Objects "
        "of CIM. They provide the scope for numerous components. " 
        "Having unique System keys is required. A heuristic can be "
        "defined in individual System subclasses to attempt to always "
        "generate the same System Name Key. The NameFormat property "
        "identifies how the System name was generated, using "
        "the subclass' heuristic.") ] 
   string NameFormat;
      [MaxLen (64), Description (
        "The name of the primary system owner."),
       MappingStrings {"MIF.DMTF|General Information|001.4"} ]  
   string PrimaryOwnerName;
      [MaxLen (256), Description (
        "A string that provides information on how the primary system "
        "owner can be reached (e.g. phone number, email address, "
        "...)."),
       MappingStrings {"MIF.DMTF|General Information|001.3"} ] 
   string PrimaryOwnerContact;
      [Description (
        "An array (bag) of strings that specify the roles this System "
        "plays in the IT-environment. Subclasses of System may "
        "override this property to define explicit Roles values. "
        "Alternately, a Working Group may describe the heuristics, "
        "conventions and guidelines for specifying Roles. For "
        "example, for an instance of a networking system, the Roles "
        "property might contain the string, 'Switch' or 'Bridge'.") ]
   string Roles[];
};


// ===================================================================
//    ComputerSystem
// ===================================================================
   [Abstract, Description (
     "A class derived from System that is a special collection of "
     "ManagedSystemElements. This collection provides "
     "compute capabilities and serves as aggregation point to "
     "associate one or more of the following elements: FileSystem, "
     "OperatingSystem, Processor and Memory (Volatile and/or "
     "NonVolatile Storage).") ] 
class CIM_ComputerSystem : CIM_System {
      [Override ("NameFormat"), Description (
        "The ComputerSystem object and its derivatives are Top Level "
        "Objects of CIM. They provide the scope for numerous "
        "components. Having unique System keys is required. "
        "A heuristic is defined to create the ComputerSystem Name "
        "to attempt to always generate the same Name, independent of "
        "discovery protocol. This prevents inventory and management "
        "problems where the same asset or entity is discovered "
        "multiple times, but can not be resolved to a single object. "
        "Use of the heuristic is optional, but recommended.\n\n"
        "The NameFormat property identifies how the ComputerSystem "
        "Name is generated, using a heuristic. The heuristic is "
        "outlined, in detail, in the CIM V2 System Model spec. "
        "It assumes that the documented rules are traversed in order, "
        "to determine and assign a Name. The NameFormat Values "
        "list defines the precedence order for assigning the Computer"
        "System Name. Several rules do map to the same Value.\n\n"
        "Note that the ComputerSystem Name calculated using the "
        "heuristic is the System's key value. Other names can be "
        "assigned and used for the ComputerSystem, that better suit "
        "a business, using Aliases."), 
       ValueMap {"Other", "IP", "Dial", "HID", "NWA", "HWA", "X25", 
                 "ISDN", "IPX", "DCC", "ICD", "E.164", "SNA", "OID/OSI"} ]
   string NameFormat;
      [MaxLen (256), ArrayType ("Indexed"), Description (
        "OtherIdentifyingInfo captures additional data, beyond "
        "System Name information, that could be used to identify "
        "a ComputerSystem. One example would be to hold the "
        "Fibre Channel World-Wide Name (WWN) of a node. Note that "
        "if only the Fibre Channel name is available and is "
        "unique (able to be used as the System key), then this "
        "property would be NULL and the WWN would become the "
        "System key, its data placed in the Name property."),
       ModelCorrespondence {
        "CIM_ComputerSystem.IdentifyingDescriptions"} ]
   string OtherIdentifyingInfo[];
      [ArrayType ("Indexed"), Description (
        "An array of free-form strings providing explanations "
        "and details behind the entries in the OtherIdentifying"
        "Info array. Note, each entry of this array is related "
        "to the entry in OtherIdentifyingInfo that is located at "
        "the same index."),
       ModelCorrespondence {
        "CIM_ComputerSystem.OtherIdentifyingInfo"} ]
   string IdentifyingDescriptions[];
      [Description (
        "Enumeration indicating whether the ComputerSystem is "
        "a special-purpose System (ie, dedicated to a particular "
        "use), versus being 'general purpose'. For example, one "
        "could specify that the System is dedicated to \"Print\" "
        "(value=11) or acts as a \"Hub\" (value=8)."),
       Values {"Not Dedicated", "Unknown", "Other", "Storage", 
               "Router", "Switch", "Layer 3 Switch", 
               "Central Office Switch", "Hub", "Access Server", 
               "Firewall", "Print", "I/O", "Web Caching", "Management"} ]
   uint16 Dedicated[];
};
     

// ===================================================================
// UnitaryComputerSystem
// ===================================================================
   [Description (
     "A class derived from ComputerSystem that represents a Desktop, "
     "Mobile, NetPC, Server or other type of a single node Computer "
     "System.") ] 
class CIM_UnitaryComputerSystem : CIM_ComputerSystem {
      [Description (
        "This object contains the data needed to find either the "
        "initial load device (its key) or the boot service to "
        "request the operating system to start up. In addition, "
        "the load parameters (ie, a pathname and parameters) "
        "may also be specified.") ]
   string InitialLoadInfo[];
      [Description (
        "This object contains the data identifying either the "
        "initial load device (its key) or the boot service that "
        "requested the last operating system load. In addition, "
        "the load parameters (ie, a pathname and parameters) "
        "may also be specified."),
       MappingStrings {
        "MIB.IETF|HOST-RESOURCES-MIB.hrSystemInitialLoadDevice",
        "MIB.IETF|HOST-RESOURCES-MIB.hrSystemInitialLoadParameters", 
        "MIF.DMTF|Host System|001.3"}]
   string LastLoadInfo;
      [Description (
      "Boolean indicating that the ComputerSystem, with its "
      "running OperatingSystem, supports power management. This "
      "boolean does not indicate that power management features are "
      "currently enabled, or if enabled, what features are "
      "supported. Refer to the PowerManagementCapabilities array "
      "for this information. If this boolean is false, the integer "
      "value 1 for the string, \"Not Supported\", should be the "
      "only entry in the PowerManagementCapabilities array.")
      ]
   boolean PowerManagementSupported;    
      [Description(
        "Indicates the current power state of the ComputerSystem and "
        "its associated OperatingSystem. Regarding the Power Save "
        "states, these are defined as follows: Value 4 (\"Power Save "
        "- Unknown\") indicates that the System is known to be in a "
        "power save mode, but its exact status in this mode is "
        "unknown; 2 (\"Power Save - Low Power Mode\") indicates that "
        "the System is in a power save state but still functioning, "
        "and may exhibit degraded performance; 3 (\"Power Save - "
        "Standby\") describes that the System is not functioning but "
        "could be brought to full power 'quickly'; value 7 (\"Power Save "
        "- Warning\") indicates that the ComputerSystem is in a warning "
        "state, though also in a power save mode; and, values 8 and 9 "
        "describe the ACPI \"Hibernate\" and \"Soft Off\" states."),
       Values {"Unknown", "Full Power", "Power Save - Low Power Mode", 
               "Power Save - Standby", "Power Save - Unknown", 
               "Power Cycle", "Power Off", "Power Save - Warning", 
               "Power Save - Hibernate", "Power Save - Soft Off"}]
   uint16 PowerState;
      [Description (
        "The event that caused the System to power up. This "
        "information is available in SMBIOS, in the Type 1 structure, "
        "the Wake Up Type attribute."),
       Values {"Reserved", "Other", "Unknown", "APM Timer", 
               "Modem Ring", "LAN Remote", "Power Switch", "PCI PME#", 
               "A/C Power Restored"}]
   uint16 WakeUpType;
      [Description (
        "If enabled (value = 4), the UnitaryComputerSystem can be "
        "reset via hardware (e.g. the power and reset buttons). If "
        "disabled (value = 3), hardware reset is not allowed. In "
        "addition to Enabled and Disabled, other Values for the "
        "property are also defined - \"Not Implemented\" (5), "
        "\"Other\" (1) and \"Unknown\" (2)."),
       ValueMap {"1", "2", "3", "4", "5"},
       Values {"Other", "Unknown", "Disabled",
               "Enabled", "Not Implemented"},
       MappingStrings {"MIF.DMTF|System Hardware Security|001.4"} ]
    uint16 ResetCapability;
      [Description(
        "Indicates the specific power-related capabilities of a "
        "ComputerSystem and its associated running OperatingSystem. "
        "The values, 0=\"Unknown\", 1=\"Not Supported\", and "
        "2=\"Disabled\" are self-explanatory. "
        "The value, 3=\"Enabled\" indicates that the power management "
        "features are currently enabled but the exact feature set "
        "is unknown or the information is unavailable. "
        "\"Power Saving Modes Entered Automatically\" (4) describes "
        "that a system can change its power state based on usage or "
        "other criteria. \"Power State Settable\" (5) indicates that "
        "the SetPowerState method is supported. \"Power Cycling "
        "Supported\" (6) indicates that the SetPowerState method "
        "can be invoked with the PowerState input variable set to 5 ("
        "\"Power Cycle\"). \"Timed Power On Supported\" (7) indicates "
        "that the SetPowerState method can be invoked with the Power"
        "State input variable set to 5 (\"Power Cycle\") and the Time "
        "parameter set to a specific date and time, or interval, "
        "for power-on."),
       Values {"Unknown", "Not Supported", "Disabled", 
               "Enabled", "Power Saving Modes Entered Automatically",
               "Power State Settable", "Power Cycling Supported",
               "Timed Power On Supported"},
       MappingStrings {"MIF.DMTF|System Power Controls|001.2"} ]
    uint16 PowerManagementCapabilities[];
      [Description(
        "SetPowerState defines the desired power state of a "
        "ComputerSystem and its running OperatingSystem, and when "
        "the system should be put into that state. The PowerState "
        "parameter is specified as one of the following integer "
        "values: 1=\"Full Power\", 2=\"Power Save - Low Power Mode\", "
        "3=\"Power Save - Standby\", 4=\"Power Save - Other\", "
        "5=\"Power Cycle\", 6=\"Power Off\", 7=\"Hibernate\" and "
        "8=\"Soft Off\". The Time parameter (for all state changes "
        "but 5, \"Power Cycle\") indicates when the power state "
        "should be set, either as a regular date-time value or as "
        "an interval value (where the interval begins when the "
        "method invocation is received). When the PowerState "
        "parameter is equal to 5, \"Power Cycle\", the Time "
        "parameter indicates when the system should power on "
        "again. Power off is immediate. SetPowerState should "
        "return 0 if successful, 1 if the specified State and "
        "Time request is not supported, and some other value if "
        "any other error occurred. In a subclass, the "
        "set of possible return codes could be specified, using a "
        "ValueMap qualifier on the method. The strings to which the "
        "ValueMap contents are 'translated' may also be specified in "
        "the subclass as a Values array qualifier.") ]
    uint32 SetPowerState(
      [IN, ValueMap {"1", "2", "3", "4", "5", "6", "7", "8"},
           Values {"Full Power", "Power Save - Low Power Mode", 
                   "Power Save - Standby", "Power Save - Other", 
                   "Power Cycle", "Power Off", "Hibernate", "Soft Off"}] 
    uint32 PowerState, 
    [IN] datetime Time);
};

// ==========================================================================
// End of Copyright 1998-2003 Distributed Management Task Force, Inc. (DMTF).
// ==========================================================================


// =============================================================================
// PG_ComputerSystem
// =============================================================================
[
    Version ("2.2.0"), Description ("PG_ComputerSystem contains extension to "
                 "CIM_UnitaryComputerSystem.")
]

class PG_ComputerSystem : CIM_UnitaryComputerSystem
{  
    [
        Description ("The pager number of the primary system owner"
                     "available if DMI is installed, else blank."),
        MappingStrings {"MIF.DMTF|General Information|001.9"}
    ]  
    string PrimaryOwnerPager;

    [
        Description ("The name of the secondary owner of the system"
                     "available if DMI is installed, else blank."),
        MappingStrings {"MIF.DMTF|General Information|001.7"}
    ] 
    string SecondaryOwnerName;

    [
        Description ("The phone number of the secondary system owner,"
                     "available if DMI is installed, else blank."),
        MappingStrings {"MIF.DMTF|General Information|001.8"}
    ]  
    string SecondaryOwnerContact;

    [Description ("The pager number of the secondary system owner,"
                  "available if DMI is installed, else blank."),
     MappingStrings {"MIF.DMTF|General Information|001.10"}
    ]  
    string SecondaryOwnerPager;

    [Description ("The serial number of the system, fetched by the"
                  "uname() system service."),
     MappingStrings {"MIF.DMTF|General Information|001.13"}
    ]  
    string SerialNumber;

    [Description ("The identification number of the system,"
                  "currently blank."),
     MappingStrings {"MIF.DMTF|General Information|001.13"}
    ]  
    string IdentificationNumber;
};

// =============================================================================
// end of file
// =============================================================================

