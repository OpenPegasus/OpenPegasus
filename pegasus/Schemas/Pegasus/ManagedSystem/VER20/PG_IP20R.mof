//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////

// We have one shared library module with three providers
// in it: IPPEpProvider, BindsIPToLANEpProvider, and IPRouteProvider

instance of PG_ProviderModule 
{
   Name = "IPProviderModule";
   Location = "IPProviderModule";
   Vendor = "OpenPegasus";
   Version = "2.0.0";
   InterfaceType = "C++Default";
   InterfaceVersion = "2.1.0";
};

// Provider for CIM_IPProtocolEndpoint

instance of PG_Provider 
{
  ProviderModuleName = "IPProviderModule";
  Name = "IPPEpProvider";
};

instance of PG_ProviderCapabilities 
{
  ProviderModuleName = "IPProviderModule";
  ProviderName = "IPPEpProvider";
  CapabilityID = "1";
  ClassName = "CIM_IPProtocolEndpoint";
  Namespaces = { "root/cimv2" };
  ProviderType = { 2 }; // Instance
  SupportedProperties = NULL; // All properties
  SupportedMethods = NULL; // All methods
};

// Provider for PG_BindsIPToLANEndpoint

instance of PG_Provider 
{
  ProviderModuleName = "IPProviderModule";
  Name = "BIPTLEpProvider";
};

instance of PG_ProviderCapabilities 
{
  ProviderModuleName = "IPProviderModule";
  ProviderName = "BIPTLEpProvider";
  CapabilityID = "1";
  ClassName = "PG_BindsIPToLANEndpoint";
  Namespaces = { "root/cimv2" };
  ProviderType = { 2 }; // Instance
  SupportedProperties = NULL; // All properties
  SupportedMethods = NULL; // All methods
};

// Provider for PG_IPRoute

instance of PG_Provider 
{
  ProviderModuleName = "IPProviderModule";
  Name = "IPRouteProvider";
};

instance of PG_ProviderCapabilities 
{
  ProviderModuleName = "IPProviderModule";
  ProviderName = "IPRouteProvider";
  CapabilityID = "1";
  ClassName = "PG_IPRoute";
  Namespaces = { "root/cimv2" };
  ProviderType = { 2 }; // Instance
  SupportedProperties = NULL; // All properties
  SupportedMethods = NULL; // All methods
};

// Provider for PG_NextHopIPRoute

instance of PG_Provider
{
  ProviderModuleName = "IPProviderModule";
  Name = "NextHopIPRouteProvider";
};

instance of PG_ProviderCapabilities
{
  ProviderModuleName = "IPProviderModule";
  ProviderName = "NextHopIPRouteProvider";
  CapabilityID = "1";
  ClassName = "PG_NextHopIPRoute";
  Namespaces = { "root/cimv2" };
  ProviderType = { 2 }; // Instance
  SupportedProperties = NULL; // All properties
  SupportedMethods = NULL; // All methods
};

// Provider for PG_RemoteServiceAccessPoint

instance of PG_Provider
{
  ProviderModuleName = "IPProviderModule";
  Name = "RSApProvider";
};

instance of PG_ProviderCapabilities
{
  ProviderModuleName = "IPProviderModule";
  ProviderName = "RSApProvider";
  CapabilityID = "1";
  ClassName = "PG_RemoteServiceAccessPoint";
  Namespaces = { "root/cimv2" };
  ProviderType = { 2 }; // Instance
  SupportedProperties = NULL; // All properties
  SupportedMethods = NULL; // All methods
};

// Provider for PG_RouteUsesEndpoint

instance of PG_Provider
{
  ProviderModuleName = "IPProviderModule";
  Name = "RUEpProvider";
};

instance of PG_ProviderCapabilities
{
  ProviderModuleName = "IPProviderModule";
  ProviderName = "RUEpProvider";
  CapabilityID = "1";
  ClassName = "PG_RouteUsesEndpoint";
  Namespaces = { "root/cimv2" };
  ProviderType = { 3 }; // Association
  SupportedProperties = NULL; // All properties
  SupportedMethods = NULL; // All methods
};

// Provider for PG_AssociatedNextHop

instance of PG_Provider
{
  ProviderModuleName = "IPProviderModule";
  Name = "ANHProvider";
};

instance of PG_ProviderCapabilities
{
  ProviderModuleName = "IPProviderModule";
  ProviderName = "ANHProvider";
  CapabilityID = "1";
  ClassName = "PG_AssociatedNextHop";
  Namespaces = { "root/cimv2" };
  ProviderType = { 3 }; // Association
  SupportedProperties = NULL; // All properties
  SupportedMethods = NULL; // All methods
};

