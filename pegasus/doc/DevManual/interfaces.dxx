/*

*/
/** @name Pegasus Interfaces
The Pegasus MSB interfaces with several different entities:

<UL> <LI> Providers
     <LI> Services (Including respositories and other services)
     <LI  Clients which may be either connectors or application consumers
     <LI> Repository
</UL>

Further, it includes both the APIs and the definitions of CIM data that are
required by the broker.

Pegasus has effectivly implemented the same operations and data defintions across all of these interfaces with minor differences because of the special characteristics of each interface.

<B>CIM Operations over HTTP</B>
The core operations implemented in Pegasus are based entirely on the CIM operations over HTTP definitions by the DMTF in CIM Operations over HTTP specificaiton.

The creation of all Pegasus interfaces is based on this core was a key objective in the design of Pegasus. These operations provide the creation, deletion, manipulation of CIM classes and objects and their components.

Pegasus implements these operations as methods in the Pegasus class Operations The interfaces for this class and methods is defined in the header file operations.h.

<B>Client Interface</B>
In Pegasus the client is a separate component that can communicate with the Pegasus server either through the WBEM CIM/XML protocol or directly through the Pegasus Client C++ Interfaces.

The Client interfaces are an extension of the Pegasus Operations interfaces with some specific methods added for client/server communication control.

<B>Provider Interfaces</B>

In Pegasus, the provider is a separate executable that accesses the
managed resources and is used by the CIMOM to provide access to
data. Providers forward this information to the CIMOM for
integration and interpretation. When the CIMOM receives a
request from a management application for data that is not available from the
CIMOM Repository, it forwards the request to a provider. The
CIMOM Repository only contains static data.
Providers implement a provider interface that supports the type of service
specific to their role. In order to implement the interface, a provider class
must first declare the interface in an implements clause, and then it must
provide an implementation (a body) for all of the abstract methods of
the.interface.


<Services Interfaces</B>

ATTN: Need to put something here.

<B>Repository Interfaces</B>

The repository interface isused by the CIMOM to  interface with implementations of the repository thatstore and
retrieve provide persistence for class and instance information. 

A prototype implementation of both a class and instance provider is provided with Pegasus (ATTN: SEE ALSO). However, it is expected that this will be replaced in many installations.
.
*/

