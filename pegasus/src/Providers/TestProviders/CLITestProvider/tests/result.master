0. +++++ Test For getClass

// ===================================================
// Test_CLITestProviderClass
// ===================================================

    [Version ( "2.5.0" ), 
    Description ( "Class to test input and output of all property types "
        "that can be handled by cimcli. Does not cover embedded types. "
        "See other classes in this file for handling of the embedded "
        "entity classes. The REF data type in methods is also covered "
        "in other classes today." )]
class Test_CLITestProviderClass
{
    
        [key]
    string Id;
    string Name;
    
        [Description ( "Return name value pair defining input parameters "
            "for the operation received by the provider such as propertylist." 
            )]
    string requestInputParameters;
    boolean scalBool;
    uint8 scalUint8;
    sint8 scalSint8;
    uint16 scalUint16;
    sint16 scalSint16;
    uint32 scalUint32;
    sint32 scalSint32;
    uint64 scalUint64;
    sint64 scalSint64;
    real32 scalReal32;
    real64 scalReal64;
    string scalString;
    datetime scalDateTime;
    boolean defaultBool = TRUE;
    uint8 defaultUint8 = 4;
    sint8 defaultSint8 = 4;
    uint16 defaultUint16 = 4;
    sint16 defaultSint16 = 4;
    uint32 defaultUint32 = 4;
    sint32 defaultSint32 = 4;
    uint64 defaultUint64 = 4;
    sint64 defaultSint64 = 4;
    real32 defaultReal32;
    real64 defaultReal64;
    string defaultString = "test\"embedded\"quote";
    datetime defaultDateTime;
    boolean arrayBool[];
    uint8 arrayUint8[];
    sint8 arraySint8[];
    uint16 arrayUint16[];
    sint16 arraySint16[];
    uint32 arrayUint32[];
    sint32 arraySint32[];
    uint64 arrayUint64[];
    sint64 arraySint64[];
    real32 arrayReal32[];
    real64 arrayReal64[];
    string arrayString[];
    datetime arrayDateTime[];
    uint32 ReferenceParamTest([in] Test_CLITestProviderClass REF InParam1, 
        [in] Test_CLITestProviderClass REF InParam2[], [out] Test_CLITestProviderClass 
        REF OutParam1, [out] Test_CLITestProviderClass REF OutParam2[]);
    
        [Description ( "Method to test input and output of all parameter "
            "types except REF and embedded entity. Provider is expected "
            "to return all parameters input." )]
    uint32 InOutParamTest([in, 
    out] boolean scalBool, [in, 
    out] uint8 scalUint8, [in, 
    out] sint8 scalSint8, [in, 
    out] uint16 scalUint16, [in, 
    out] sint16 scalSint16, [in, 
    out] uint32 scalUint32, [in, 
    out] sint32 scalSint32, [in, 
    out] uint64 scalUint64, [in, 
    out] real32 scalReal32, [in, 
    out] real64 scalReal64, [in, 
    out] string scalString, [in, 
    out] datetime scalDateTime, [in, 
    out] boolean arrayBool[], [in, 
    out] uint8 arrayUint8[], [in, 
    out] sint8 arraySint8[], [in, 
    out] uint16 arrayUint16[], [in, 
    out] sint16 arraySint16[], [in, 
    out] uint32 arrayUint32[], [in, 
    out] sint32 arraySint32[], [in, 
    out] uint64 arrayUint64[], [in, 
    out] real32 arrayReal32[], [in, 
    out] real64 arrayReal64[], [in, 
    out] string arrayString[], [in, 
    out] datetime arrayDateTime[], [in, 
    out] uint32 returnValue);
    uint32 FullParamTest([in] boolean inScalBool, [in] uint8 inScalUint8, 
        [in] sint8 inScalSint8, [in] uint16 inScalUint16, [in] sint16 
        inScalSint16, [in] uint32 inScalUint32, [in] sint32 inScalSint32, 
        [in] uint64 inScalUint64, [in] real32 inScalReal32, [in] real64 
        inScalReal64, [in] string inScalString, [in] datetime inScalDateTime, 
        [out] boolean outScalBool, [out] uint8 outScalUint8, [out] 
        sint8 outScalSint8, [out] uint16 outScalUint16, [out] sint16 
        outScalSint16, [out] uint32 outScalUint32, [out] sint32 outScalSint32, 
        [out] uint64 outScalUint64, [out] real32 outScalReal32, [out] 
        real64 outScalReal64, [out] string outScalString, [out] datetime 
        outScalDateTime);
    
        [Description ( "Method to set parameters to modify provider "
            "behavior" ), 
        static]
    uint32 setProviderParameters([in, 
    out, 
    Description ( "Sets a string to be used as the host name for responses "
        "that require a host name" )] string substituteHostName);
    
        [Description ( "Method to reset all parameters that control "
            "provider behavior " ), 
        static]
    uint32 resetProviderParameters();
    
        [Description ( "Method to reset provider to initial state. Resets "
            "parameters same as resetProviderParameters and also restores "
            "internal instance cache to initial state. " ), 
        static]
    uint32 reset();
    
        [Description ( "Method to set or reset debug mode for the provider. "
            "In debug mode, the provider displays information when called. "
            "Parameter is new state. Returns 0 if state changed. Rtn "
            "1 if same state.  Else return 2, as error " ), 
        static]
    uint32 debugMode(boolean newState);
};

// ===================================================
// Test_CLITestProviderLinkClass
// ===================================================

    [Association, 
    Version ( "1.0.0" ), 
    Description ( "Defines the relationship between parents and children. "
        "Used to test Ref/Assoc functions and creation/modification "
        "of instances in cimli" )]
class Test_CLITestProviderLinkClass
{
    
        [key]
    Test_CLITestProviderClass REF parent;
    
        [key]
    Test_CLITestProviderClass REF child;
    
        [Description ( "This property returns a String defining the "
            "input parameters the provider saw on any operation involving "
            "this class." )]
    string requestInputParameters;
};

// ===================================================
// Test_CLITestProviderLinkClass
// ===================================================

class Test_CLITestProviderLinkClass
{
    Test_CLITestProviderClass REF parent;
    Test_CLITestProviderClass REF child;
    string requestInputParameters;
};
<CLASS NAME="Test_CLITestProviderLinkClass">
    <QUALIFIER NAME="Association" TYPE="boolean" OVERRIDABLE="false">
        <VALUE>
            TRUE
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="Version" TYPE="string" TOSUBCLASS="false" TRANSLATABLE="true">
        <VALUE>
            1.0.0
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
        <VALUE>
            Defines the relationship between parents and children. Used to test Ref/Assoc functions and creation/modification of instances in cimli
        </VALUE>
    </QUALIFIER>
    <PROPERTY.REFERENCE NAME="parent" REFERENCECLASS="Test_CLITestProviderClass">
        <QUALIFIER NAME="key" TYPE="boolean" OVERRIDABLE="false">
            <VALUE>
                TRUE
            </VALUE>
        </QUALIFIER>
    </PROPERTY.REFERENCE>
    <PROPERTY.REFERENCE NAME="child" REFERENCECLASS="Test_CLITestProviderClass">
        <QUALIFIER NAME="key" TYPE="boolean" OVERRIDABLE="false">
            <VALUE>
                TRUE
            </VALUE>
        </QUALIFIER>
    </PROPERTY.REFERENCE>
    <PROPERTY NAME="requestInputParameters" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                This property returns a String defining the input parameters the provider saw on any operation involving this class.
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
</CLASS>
<CLASS NAME="Test_CLITestProviderLinkClass">
    <QUALIFIER NAME="Association" TYPE="boolean" OVERRIDABLE="false">
        <VALUE>
            TRUE
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="Version" TYPE="string" TOSUBCLASS="false" TRANSLATABLE="true">
        <VALUE>
            1.0.0
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
        <VALUE>
            Defines the relationship between parents and children. Used to test Ref/Assoc functions and creation/modification of instances in cimli
        </VALUE>
    </QUALIFIER>
    <PROPERTY.REFERENCE NAME="parent" REFERENCECLASS="Test_CLITestProviderClass" CLASSORIGIN="Test_CLITestProviderLinkClass">
        <QUALIFIER NAME="key" TYPE="boolean" OVERRIDABLE="false">
            <VALUE>
                TRUE
            </VALUE>
        </QUALIFIER>
    </PROPERTY.REFERENCE>
    <PROPERTY.REFERENCE NAME="child" REFERENCECLASS="Test_CLITestProviderClass" CLASSORIGIN="Test_CLITestProviderLinkClass">
        <QUALIFIER NAME="key" TYPE="boolean" OVERRIDABLE="false">
            <VALUE>
                TRUE
            </VALUE>
        </QUALIFIER>
    </PROPERTY.REFERENCE>
    <PROPERTY NAME="requestInputParameters" CLASSORIGIN="Test_CLITestProviderLinkClass" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                This property returns a String defining the input parameters the provider saw on any operation involving this class.
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
</CLASS>
8. +++++ Test QualifierDecl Operations

Qualifier Association : boolean = FALSE, Scope(class association), 
    Flavor(DisableOverride, ToSubclass);

Qualifier Abstract : boolean = FALSE, Scope(class association indication), 
    Flavor(DisableOverride, Restricted);

Qualifier Aggregate : boolean = FALSE, Scope(reference), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Aggregation : boolean = FALSE, Scope(association), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Alias : string = null, Scope(property reference method), 
    Flavor(EnableOverride, ToSubclass, Translatable);

Qualifier ArrayType : string = "Bag", Scope(property parameter);

Qualifier Association : boolean = FALSE, Scope(class association), 
    Flavor(DisableOverride, ToSubclass);

Qualifier BitMap : string[], Scope(property method parameter);

Qualifier BitValues : string[], Scope(property method parameter), Flavor(EnableOverride, 
    ToSubclass, Translatable);

Qualifier Counter : boolean = FALSE, Scope(property method parameter);

Qualifier Delete : boolean = FALSE, Scope(association reference);

Qualifier Deprecated : string[], Scope(class association property method);

Qualifier Description : string = null, Scope(any), Flavor(EnableOverride, 
    ToSubclass, Translatable);

Qualifier DisplayName : string = null, Scope(any), Flavor(EnableOverride, 
    ToSubclass, Translatable);

Qualifier DN : boolean = FALSE, Scope(property parameter), Flavor(DisableOverride, 
    ToSubclass);

Qualifier EmbeddedObject : boolean = FALSE, Scope(property);

Qualifier Expensive : boolean = FALSE, Scope(class association property 
    reference method);

Qualifier Experimental : boolean = FALSE, Scope(any), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Gauge : boolean = FALSE, Scope(property method parameter);

Qualifier Ifdeleted : boolean = FALSE, Scope(association reference);

Qualifier In : boolean = TRUE, Scope(parameter), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Indication : boolean = FALSE, Scope(class indication), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Invisible : boolean = FALSE, Scope(class association property 
    reference method);

Qualifier Key : boolean = FALSE, Scope(property reference), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Large : boolean = FALSE, Scope(class property);

Qualifier MappingStrings : string[], Scope(class association indication 
    property reference);

Qualifier Max : uint32 = null, Scope(reference);

Qualifier MaxLen : uint32 = null, Scope(property method parameter);

Qualifier MaxValue : sint64 = null, Scope(property method parameter);

Qualifier Min : uint32 = 0, Scope(reference);

Qualifier MinValue : sint64 = null, Scope(property method parameter);

Qualifier ModelCorrespondence : string[], Scope(property);

Qualifier Nonlocal : string = null, Scope(reference);

Qualifier NonlocalType : string = null, Scope(reference);

Qualifier NullValue : string = null, Scope(property), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Octetstring : boolean = FALSE, Scope(property parameter);

Qualifier Out : boolean = FALSE, Scope(parameter), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Override : string = null, Scope(property reference method), 
    Flavor(DisableOverride, ToSubclass);

Qualifier Propagated : string = null, Scope(property), Flavor(DisableOverride, 
    ToSubclass);

Qualifier PropertyUsage : string = "CurrentContext", Scope(property);

Qualifier Provider : string = null, Scope(any);

Qualifier Read : boolean = TRUE, Scope(property);

Qualifier Required : boolean = FALSE, Scope(property);

Qualifier Revision : string = ".5", Scope(class association indication), 
    Flavor(EnableOverride, ToSubclass, Translatable);

Qualifier Schema : string = null, Scope(property method), Flavor(DisableOverride, 
    ToSubclass, Translatable);

Qualifier Source : string = null, Scope(class association indication);

Qualifier SourceType : string = null, Scope(class association indication 
    reference);

Qualifier Static : boolean = FALSE, Scope(property method), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Syntax : string = null, Scope(property reference method parameter);

Qualifier SyntaxType : string = null, Scope(property reference method 
    parameter);

Qualifier Terminal : boolean = FALSE, Scope(class);

Qualifier TriggerType : string = null, Scope(class association indication 
    property reference method);

Qualifier Units : string = null, Scope(property method parameter), 
    Flavor(EnableOverride, ToSubclass, Translatable);

Qualifier UnknownValues : string[], Scope(property), Flavor(DisableOverride, 
    ToSubclass);

Qualifier UnsupportedValues : string[], Scope(property), Flavor(DisableOverride, 
    ToSubclass);

Qualifier ValueMap : string[], Scope(property method parameter);

Qualifier Values : string[], Scope(property method parameter), Flavor(EnableOverride, 
    ToSubclass, Translatable);

Qualifier Version : string = "V2.5", Scope(class association indication), 
    Flavor(EnableOverride, ToSubclass, Translatable);

Qualifier Weak : boolean = FALSE, Scope(reference), Flavor(DisableOverride, 
    ToSubclass);

Qualifier Write : boolean = FALSE, Scope(property);
<QUALIFIER.DECLARATION NAME="Abstract" TYPE="boolean" OVERRIDABLE="false" TOSUBCLASS="false">
<SCOPE CLASS="true" ASSOCIATION="true" INDICATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Aggregate" TYPE="boolean" OVERRIDABLE="false">
<SCOPE REFERENCE="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Aggregation" TYPE="boolean" OVERRIDABLE="false">
<SCOPE ASSOCIATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Alias" TYPE="string" TRANSLATABLE="true">
<SCOPE REFERENCE="true" PROPERTY="true" METHOD="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="ArrayType" TYPE="string">
<SCOPE PROPERTY="true" PARAMETER="true"/><VALUE>Bag</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Association" TYPE="boolean" OVERRIDABLE="false">
<SCOPE CLASS="true" ASSOCIATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="BitMap" TYPE="string" ISARRAY="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="BitValues" TYPE="string" ISARRAY="true" TRANSLATABLE="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Counter" TYPE="boolean">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Delete" TYPE="boolean">
<SCOPE ASSOCIATION="true" REFERENCE="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Deprecated" TYPE="string" ISARRAY="true">
<SCOPE CLASS="true" ASSOCIATION="true" PROPERTY="true" METHOD="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Description" TYPE="string" TRANSLATABLE="true">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="DisplayName" TYPE="string" TRANSLATABLE="true">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="DN" TYPE="boolean" OVERRIDABLE="false">
<SCOPE PROPERTY="true" PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="EmbeddedObject" TYPE="boolean">
<SCOPE PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Expensive" TYPE="boolean">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Experimental" TYPE="boolean" OVERRIDABLE="false">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true" INDICATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Gauge" TYPE="boolean">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Ifdeleted" TYPE="boolean">
<SCOPE ASSOCIATION="true" REFERENCE="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="In" TYPE="boolean" OVERRIDABLE="false">
<SCOPE PARAMETER="true"/><VALUE>TRUE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Indication" TYPE="boolean" OVERRIDABLE="false">
<SCOPE CLASS="true" INDICATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Invisible" TYPE="boolean">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Key" TYPE="boolean" OVERRIDABLE="false">
<SCOPE REFERENCE="true" PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Large" TYPE="boolean">
<SCOPE CLASS="true" PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="MappingStrings" TYPE="string" ISARRAY="true">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Max" TYPE="uint32">
<SCOPE REFERENCE="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="MaxLen" TYPE="uint32">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="MaxValue" TYPE="sint64">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Min" TYPE="uint32">
<SCOPE REFERENCE="true"/><VALUE>0</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="MinValue" TYPE="sint64">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="ModelCorrespondence" TYPE="string" ISARRAY="true">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Nonlocal" TYPE="string">
<SCOPE REFERENCE="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="NonlocalType" TYPE="string">
<SCOPE REFERENCE="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="NullValue" TYPE="string" OVERRIDABLE="false">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Octetstring" TYPE="boolean">
<SCOPE PROPERTY="true" PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Out" TYPE="boolean" OVERRIDABLE="false">
<SCOPE PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Override" TYPE="string" OVERRIDABLE="false">
<SCOPE REFERENCE="true" PROPERTY="true" METHOD="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Propagated" TYPE="string" OVERRIDABLE="false">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="PropertyUsage" TYPE="string">
<SCOPE PROPERTY="true"/><VALUE>CurrentContext</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Provider" TYPE="string">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Read" TYPE="boolean">
<SCOPE PROPERTY="true"/><VALUE>TRUE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Required" TYPE="boolean">
<SCOPE PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Revision" TYPE="string" TRANSLATABLE="true">
<SCOPE CLASS="true" ASSOCIATION="true" INDICATION="true"/><VALUE>.5</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Schema" TYPE="string" OVERRIDABLE="false" TRANSLATABLE="true">
<SCOPE PROPERTY="true" METHOD="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Source" TYPE="string">
<SCOPE CLASS="true" ASSOCIATION="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="SourceType" TYPE="string">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Static" TYPE="boolean" OVERRIDABLE="false">
<SCOPE PROPERTY="true" METHOD="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Syntax" TYPE="string">
<SCOPE REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="SyntaxType" TYPE="string">
<SCOPE REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Terminal" TYPE="boolean">
<SCOPE CLASS="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="TriggerType" TYPE="string">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Units" TYPE="string" TRANSLATABLE="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="UnknownValues" TYPE="string" ISARRAY="true" OVERRIDABLE="false">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="UnsupportedValues" TYPE="string" ISARRAY="true" OVERRIDABLE="false">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="ValueMap" TYPE="string" ISARRAY="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Values" TYPE="string" ISARRAY="true" TRANSLATABLE="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Version" TYPE="string" TRANSLATABLE="true">
<SCOPE CLASS="true" ASSOCIATION="true" INDICATION="true"/><VALUE>V2.5</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Weak" TYPE="boolean" OVERRIDABLE="false">
<SCOPE REFERENCE="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Write" TYPE="boolean">
<SCOPE PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Abstract" TYPE="boolean" OVERRIDABLE="false" TOSUBCLASS="false">
<SCOPE CLASS="true" ASSOCIATION="true" INDICATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Aggregate" TYPE="boolean" OVERRIDABLE="false">
<SCOPE REFERENCE="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Aggregation" TYPE="boolean" OVERRIDABLE="false">
<SCOPE ASSOCIATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Alias" TYPE="string" TRANSLATABLE="true">
<SCOPE REFERENCE="true" PROPERTY="true" METHOD="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="ArrayType" TYPE="string">
<SCOPE PROPERTY="true" PARAMETER="true"/><VALUE>Bag</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Association" TYPE="boolean" OVERRIDABLE="false">
<SCOPE CLASS="true" ASSOCIATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="BitMap" TYPE="string" ISARRAY="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="BitValues" TYPE="string" ISARRAY="true" TRANSLATABLE="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Counter" TYPE="boolean">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Delete" TYPE="boolean">
<SCOPE ASSOCIATION="true" REFERENCE="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Deprecated" TYPE="string" ISARRAY="true">
<SCOPE CLASS="true" ASSOCIATION="true" PROPERTY="true" METHOD="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Description" TYPE="string" TRANSLATABLE="true">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="DisplayName" TYPE="string" TRANSLATABLE="true">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="DN" TYPE="boolean" OVERRIDABLE="false">
<SCOPE PROPERTY="true" PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="EmbeddedObject" TYPE="boolean">
<SCOPE PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Expensive" TYPE="boolean">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Experimental" TYPE="boolean" OVERRIDABLE="false">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true" INDICATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Gauge" TYPE="boolean">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Ifdeleted" TYPE="boolean">
<SCOPE ASSOCIATION="true" REFERENCE="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="In" TYPE="boolean" OVERRIDABLE="false">
<SCOPE PARAMETER="true"/><VALUE>TRUE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Indication" TYPE="boolean" OVERRIDABLE="false">
<SCOPE CLASS="true" INDICATION="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Invisible" TYPE="boolean">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Key" TYPE="boolean" OVERRIDABLE="false">
<SCOPE REFERENCE="true" PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Large" TYPE="boolean">
<SCOPE CLASS="true" PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="MappingStrings" TYPE="string" ISARRAY="true">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Max" TYPE="uint32">
<SCOPE REFERENCE="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="MaxLen" TYPE="uint32">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="MaxValue" TYPE="sint64">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Min" TYPE="uint32">
<SCOPE REFERENCE="true"/><VALUE>0</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="MinValue" TYPE="sint64">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="ModelCorrespondence" TYPE="string" ISARRAY="true">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Nonlocal" TYPE="string">
<SCOPE REFERENCE="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="NonlocalType" TYPE="string">
<SCOPE REFERENCE="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="NullValue" TYPE="string" OVERRIDABLE="false">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Octetstring" TYPE="boolean">
<SCOPE PROPERTY="true" PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Out" TYPE="boolean" OVERRIDABLE="false">
<SCOPE PARAMETER="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Override" TYPE="string" OVERRIDABLE="false">
<SCOPE REFERENCE="true" PROPERTY="true" METHOD="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Propagated" TYPE="string" OVERRIDABLE="false">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="PropertyUsage" TYPE="string">
<SCOPE PROPERTY="true"/><VALUE>CurrentContext</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Provider" TYPE="string">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Read" TYPE="boolean">
<SCOPE PROPERTY="true"/><VALUE>TRUE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Required" TYPE="boolean">
<SCOPE PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Revision" TYPE="string" TRANSLATABLE="true">
<SCOPE CLASS="true" ASSOCIATION="true" INDICATION="true"/><VALUE>.5</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Schema" TYPE="string" OVERRIDABLE="false" TRANSLATABLE="true">
<SCOPE PROPERTY="true" METHOD="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Source" TYPE="string">
<SCOPE CLASS="true" ASSOCIATION="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="SourceType" TYPE="string">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Static" TYPE="boolean" OVERRIDABLE="false">
<SCOPE PROPERTY="true" METHOD="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Syntax" TYPE="string">
<SCOPE REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="SyntaxType" TYPE="string">
<SCOPE REFERENCE="true" PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Terminal" TYPE="boolean">
<SCOPE CLASS="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="TriggerType" TYPE="string">
<SCOPE CLASS="true" ASSOCIATION="true" REFERENCE="true" PROPERTY="true" METHOD="true" INDICATION="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Units" TYPE="string" TRANSLATABLE="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="UnknownValues" TYPE="string" ISARRAY="true" OVERRIDABLE="false">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="UnsupportedValues" TYPE="string" ISARRAY="true" OVERRIDABLE="false">
<SCOPE PROPERTY="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="ValueMap" TYPE="string" ISARRAY="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Values" TYPE="string" ISARRAY="true" TRANSLATABLE="true">
<SCOPE PROPERTY="true" METHOD="true" PARAMETER="true"/></QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Version" TYPE="string" TRANSLATABLE="true">
<SCOPE CLASS="true" ASSOCIATION="true" INDICATION="true"/><VALUE>V2.5</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Weak" TYPE="boolean" OVERRIDABLE="false">
<SCOPE REFERENCE="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

<QUALIFIER.DECLARATION NAME="Write" TYPE="boolean">
<SCOPE PROPERTY="true"/><VALUE>FALSE</VALUE>
</QUALIFIER.DECLARATION>

9. +++++ getClass Operation
67 class names  returned.

CIM_ActsAsSpare
CIM_CollectedCollections
CIM_CollectionConfiguration
CIM_CollectionSetting
CIM_CompatibleProduct
CIM_Component
CIM_ConfigurationComponent
CIM_Dependency
CIM_DependencyContext
CIM_ElementCapabilities
CIM_ElementConfiguration
CIM_ElementLocation
CIM_ElementProfile
CIM_ElementSetting
CIM_ElementSettingData
CIM_ElementStatisticalData
CIM_Error
CIM_FRUIncludesProduct
CIM_FRUPhysicalElements
CIM_InstalledSoftwareIdentity
CIM_LogicalIdentity
CIM_ManagedElement
CIM_MemberOfCollection
CIM_OwningCollectionElement
CIM_ParameterValueSources
CIM_ParametersForMethod
CIM_ProductFRU
CIM_ProductParentChild
CIM_ProductPhysicalElements
CIM_ProductProductDependency
CIM_ProductSupport
CIM_RelatedStatisticalData
CIM_RelatedStatistics
CIM_ReplaceableProductFRU
CIM_SAPAvailableForElement
CIM_ServiceAffectsElement
CIM_ServiceAvailableToElement
CIM_SettingContext
CIM_SettingsDefineState
CIM_Statistics
CIM_Synchronized
CIM_SystemSettingContext
PG_TestElement
WET_CollectedCollections
WET_CollectionConfiguration
WET_CollectionSetting
WET_CompatibleProduct
WET_Component
WET_ConfigurationComponent
WET_Dependency
WET_DependencyContext
WET_ElementConfiguration
WET_ElementSetting
WET_FRUIncludesProduct
WET_FRUPhysicalElements
WET_LogicalIdentity
WET_ManagedElement
WET_MemberOfCollection
WET_ProductFRU
WET_ProductParentChild
WET_ProductPhysicalElements
WET_ProductProductDependency
WET_ProductSupport
WET_RelatedStatistics
WET_SettingContext
WET_Statistics
WET_Synchronized

// ===================================================
// CIM_ManagedElement
// ===================================================

    [Abstract, 
    Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( "ManagedElement is an abstract class that provides "
        "a common superclass (or top of the inheritance tree) for the "
        "non-association classes in the CIM Schema." )]
class CIM_ManagedElement
{
    
        [Description ( "InstanceID is an optional property that may "
            "be used to opaquely and uniquely identify an instance of "
            "this class within the scope of the instantiating Namespace. "
            "Various subclasses of this class may override this property "
            "to make it required, or a key. Such subclasses may also "
            "modify the preferred algorithms for ensuring uniqueness "
            "that are defined below.\nTo ensure uniqueness within the "
            "NameSpace, the value of InstanceID should be constructed "
            "using the following \"preferred\" algorithm: \n<OrgID>:<LocalID> "
            "\nWhere <OrgID> and <LocalID> are separated by a colon "
            "(:), and where <OrgID> must include a copyrighted, trademarked, "
            "or otherwise unique name that is owned by the business "
            "entity that is creating or defining the InstanceID or that "
            "is a registered ID assigned to the business entity by a "
            "recognized global authority. (This requirement is similar "
            "to the <Schema Name>_<Class Name> structure of Schema class "
            "names.) In addition, to ensure uniqueness, <OrgID> must "
            "not contain a colon (:). When using this algorithm, the "
            "first colon to appear in InstanceID must appear between "
            "<OrgID> and <LocalID>. \n<LocalID> is chosen by the business "
            "entity and should not be reused to identify different underlying "
            "(real-world) elements. If not null and the above \"preferred\" "
            "algorithm is not used, the defining entity must assure "
            "that the resulting InstanceID is not reused across any "
            "InstanceIDs produced by this or other providers for the "
            "NameSpace of this instance. \nIf not set to null for DMTF-defined "
            "instances, the \"preferred\" algorithm must be used with "
            "the <OrgID> set to CIM." )]
    string InstanceID;
    
        [Description ( "The Caption property is a short textual description "
            "(one- line string) of the object." ), 
        MaxLen ( 64 )]
    string Caption;
    
        [Description ( "The Description property provides a textual "
            "description of the object." )]
    string Description;
    
        [Description ( "A user-friendly name for the object. This property "
            "allows each instance to define a user-friendly name in "
            "addition to its key properties, identity data, and description "
            "information. \nNote that the Name property of ManagedSystemElement "
            "is also defined as a user-friendly name. But, it is often "
            "subclassed to be a Key. It is not reasonable that the same "
            "property can convey both identity and a user-friendly name, "
            "without inconsistencies. Where Name exists and is not a "
            "Key (such as for instances of LogicalDevice), the same "
            "information can be present in both the Name and ElementName "
            "properties. Note that if there is an associated instance "
            "of CIM_EnabledLogicalElementCapabilities, restrictions "
            "on this properties may exist as defined in ElementNameMask "
            "and MaxElementNameLen properties defined in that class." 
            )]
    string ElementName;
};
<CLASS NAME="CIM_ManagedElement">
    <QUALIFIER NAME="Abstract" TYPE="boolean" TOSUBCLASS="false">
        <VALUE>
            TRUE
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="Version" TYPE="string" TOSUBCLASS="false" TRANSLATABLE="true">
        <VALUE>
            2.19.0
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="UMLPackagePath" TYPE="string">
        <VALUE>
            CIM::Core::CoreElements
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
        <VALUE>
            ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.
        </VALUE>
    </QUALIFIER>
    <PROPERTY NAME="InstanceID" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.&#10;To ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following &quot;preferred&quot; algorithm: &#10;&lt;OrgID&gt;:&lt;LocalID&gt; &#10;Where &lt;OrgID&gt; and &lt;LocalID&gt; are separated by a colon (:), and where &lt;OrgID&gt; must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the &lt;Schema Name&gt;_&lt;Class Name&gt; structure of Schema class names.) In addition, to ensure uniqueness, &lt;OrgID&gt; must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between &lt;OrgID&gt; and &lt;LocalID&gt;. &#10;&lt;LocalID&gt; is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above &quot;preferred&quot; algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. &#10;If not set to null for DMTF-defined instances, the &quot;preferred&quot; algorithm must be used with the &lt;OrgID&gt; set to CIM.
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
    <PROPERTY NAME="Caption" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                The Caption property is a short textual description (one- line string) of the object.
            </VALUE>
        </QUALIFIER>
        <QUALIFIER NAME="MaxLen" TYPE="uint32">
            <VALUE>
                64
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
    <PROPERTY NAME="Description" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                The Description property provides a textual description of the object.
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
    <PROPERTY NAME="ElementName" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. &#10;Note that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
</CLASS>
<CLASS NAME="CIM_ManagedElement">
    <QUALIFIER NAME="Abstract" TYPE="boolean" TOSUBCLASS="false">
        <VALUE>
            TRUE
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="Version" TYPE="string" TOSUBCLASS="false" TRANSLATABLE="true">
        <VALUE>
            2.19.0
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="UMLPackagePath" TYPE="string">
        <VALUE>
            CIM::Core::CoreElements
        </VALUE>
    </QUALIFIER>
    <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
        <VALUE>
            ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.
        </VALUE>
    </QUALIFIER>
    <PROPERTY NAME="InstanceID" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.&#10;To ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following &quot;preferred&quot; algorithm: &#10;&lt;OrgID&gt;:&lt;LocalID&gt; &#10;Where &lt;OrgID&gt; and &lt;LocalID&gt; are separated by a colon (:), and where &lt;OrgID&gt; must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the &lt;Schema Name&gt;_&lt;Class Name&gt; structure of Schema class names.) In addition, to ensure uniqueness, &lt;OrgID&gt; must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between &lt;OrgID&gt; and &lt;LocalID&gt;. &#10;&lt;LocalID&gt; is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above &quot;preferred&quot; algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. &#10;If not set to null for DMTF-defined instances, the &quot;preferred&quot; algorithm must be used with the &lt;OrgID&gt; set to CIM.
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
    <PROPERTY NAME="Caption" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                The Caption property is a short textual description (one- line string) of the object.
            </VALUE>
        </QUALIFIER>
        <QUALIFIER NAME="MaxLen" TYPE="uint32">
            <VALUE>
                64
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
    <PROPERTY NAME="Description" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                The Description property provides a textual description of the object.
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
    <PROPERTY NAME="ElementName" TYPE="string">
        <QUALIFIER NAME="Description" TYPE="string" TRANSLATABLE="true">
            <VALUE>
                A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. &#10;Note that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
            </VALUE>
        </QUALIFIER>
    </PROPERTY>
</CLASS>
1. +++++ Test For Reference params
2. +++++ Test Getproperty and setProperty
Returned Path  Test_CLITestProviderClass.Id="PropertyOpTest"
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalBool = FALSE
scalBool = FALSE
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalUint8 = 99
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalSint8 = -99
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalUint16 = 999
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalSint16 = -999
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalUint32 = 99999999
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalSint32 = -99999999
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalUint64 = 9999999999999999
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalSint64 = -9999999999999999
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
scalString = setProperty
Test instance Test_CLITestProviderClass.Id="PropertyOpTest" OK
Returned Path  Test_CLITestProviderClass.Id="PropertyArrayOpTest"
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arrayBool = FALSE FALSE FALSE TRUE FALSE 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arrayUint8 = 1 127 254 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arraySint8 = -127 -2 0 127 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arrayUint16 = 1 127 255 65534 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arraySint16 = -32767 -2 1 32767 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arrayUint32 = 0 127 255 65535 4294967294 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arraySint32 = -2147483647 -2 1 2147483647 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arrayUint64 = 0 127 255 65535 4294967295 18446744073709551614 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arrayUint64 = 0 127 255 65535 4294967295 18446744073709551614 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arraySint64 = -9223372036854775807 -2 1 9223372036854775807 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arrayDateTime = 20080928000000.000000+480 00000397000000.000000:000 20091030145800.110114+480 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
arrayString = testSting03 testSting04 
Test instance Test_CLITestProviderClass.Id="PropertyArrayOpTest" OK
3. +++++ Tests Instances create Instance
Returned Path  Test_CLITestProviderClass.Id="ScalarTest"
Test instance Test_CLITestProviderClass.Id="ScalarTest" OK
Returned Path  Test_CLITestProviderClass.Id="arrayTest"
Test instance Test_CLITestProviderClass.Id="arrayTest" OK
Test_CLITestProviderClass.Id="Mike"
Test_CLITestProviderClass.Id="ScalarTest"
Test_CLITestProviderClass.Id="arrayTest"

// path= Test_CLITestProviderClass.Id="Mike"

instance of Test_CLITestProviderClass
{
    Id = "Mike";
    Name = "Bob";
    requestInputParameters = "propertyList=Id, Name, requestInputParameters, "
        "scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, "
        "scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, "
        "scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, "
        "defaultUint16, defaultSint16, defaultUint32, defaultSint32, "
        "defaultUint64, defaultSint64, defaultReal32, defaultReal64, "
        "defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, "
        "arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, "
        "arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; "
        "includeQualifiers=false; includeClassOrigin=false";
    scalBool = TRUE;
    scalUint8 = 220;
    scalSint8 = 124;
    scalUint16 = 100;
    scalSint16 = 100;
    scalUint32 = 100;
    scalSint32 = 100;
    scalUint64 = 100;
    scalSint64 = NULL;
    scalReal32 = 1.0000000000000000e+02;
    scalReal64 = 1.0000000000000000e+02;
    scalString = "teststring";
    scalDateTime = "19991224120000.000000+360";
    defaultBool = TRUE;
    defaultUint8 = 4;
    defaultSint8 = 4;
    defaultUint16 = 4;
    defaultSint16 = 4;
    defaultUint32 = 4;
    defaultSint32 = 4;
    defaultUint64 = 4;
    defaultSint64 = 4;
    defaultReal32 = NULL;
    defaultReal64 = NULL;
    defaultString = "test\"embedded\"quote";
    defaultDateTime = NULL;
    arrayBool = {TRUE, FALSE, TRUE};
    arrayUint8 = {4, 128, 240};
    arraySint8 = {4, 126, -126};
    arrayUint16 = {4, 128, 240};
    arraySint16 = {4, 126, -126};
    arrayUint32 = {4, 128, 240};
    arraySint32 = {4, 126, -126};
    arrayUint64 = {4, 128, 240};
    arraySint64 = NULL;
    arrayReal32 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayReal64 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayString = {"First", "Second", "Third"};
    arrayDateTime = {"19991224120000.000000+360", "19991224120000.000000+360", 
        "19991224120000.000000+360"};
};

// path= Test_CLITestProviderClass.Id="ScalarTest"

instance of Test_CLITestProviderClass
{
    Id = "ScalarTest";
    requestInputParameters = "propertyList=Id, Name, requestInputParameters, "
        "scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, "
        "scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, "
        "scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, "
        "defaultUint16, defaultSint16, defaultUint32, defaultSint32, "
        "defaultUint64, defaultSint64, defaultReal32, defaultReal64, "
        "defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, "
        "arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, "
        "arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; "
        "includeQualifiers=false; includeClassOrigin=false";
    scalBool = TRUE;
    scalUint8 = 12;
    scalSint8 = 12;
    scalUint16 = 500;
    scalSint16 = 500;
    scalUint32 = 9999;
    scalSint32 = 9999;
    scalUint64 = 99999;
    scalSint64 = 99999;
    scalString = "testString";
};

// path= Test_CLITestProviderClass.Id="arrayTest"

instance of Test_CLITestProviderClass
{
    Id = "arrayTest";
    requestInputParameters = "propertyList=Id, Name, requestInputParameters, "
        "scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, "
        "scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, "
        "scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, "
        "defaultUint16, defaultSint16, defaultUint32, defaultSint32, "
        "defaultUint64, defaultSint64, defaultReal32, defaultReal64, "
        "defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, "
        "arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, "
        "arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; "
        "includeQualifiers=false; includeClassOrigin=false";
    scalString = "testString";
    scalDateTime = "19991224120000.000000+360";
    arrayBool = {TRUE, TRUE, TRUE, FALSE, TRUE};
    arrayUint8 = {12};
    arraySint8 = {-127, 0, 12, 127};
    arrayUint32 = {99, 0, 31000, 63000, 4294967295};
    arraySint32 = {-32000, 0, 32000, -2147483648, 2147483647};
    arrayUint64 = {99, 0, 31000, 63000, 18446744073709551615};
    arraySint64 = {-32000, 0, 32000, -9223372036854775808};
};
Test_CLITestProviderClass.Id="Mike"
Test_CLITestProviderClass.Id="ScalarTest"
Test_CLITestProviderClass.Id="arrayTest"

path= Test_CLITestProviderClass.Id="Mike"
<INSTANCE CLASSNAME="Test_CLITestProviderClass" >
<PROPERTY NAME="Id"  TYPE="string">
<VALUE>Mike</VALUE>
</PROPERTY>
<PROPERTY NAME="Name"  TYPE="string">
<VALUE>Bob</VALUE>
</PROPERTY>
<PROPERTY NAME="requestInputParameters"  TYPE="string">
<VALUE>propertyList=Id, Name, requestInputParameters, scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, defaultUint16, defaultSint16, defaultUint32, defaultSint32, defaultUint64, defaultSint64, defaultReal32, defaultReal64, defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; includeQualifiers=false; includeClassOrigin=false</VALUE>
</PROPERTY>
<PROPERTY NAME="scalBool"  TYPE="boolean">
<VALUE>TRUE</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint8"  TYPE="uint8">
<VALUE>220</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint8"  TYPE="sint8">
<VALUE>124</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint16"  TYPE="uint16">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint16"  TYPE="sint16">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint32"  TYPE="uint32">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint32"  TYPE="sint32">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint64"  TYPE="uint64">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint64"  TYPE="sint64">
</PROPERTY>
<PROPERTY NAME="scalReal32"  TYPE="real32">
<VALUE>1.0000000e+02</VALUE>
</PROPERTY>
<PROPERTY NAME="scalReal64"  TYPE="real64">
<VALUE>1.0000000000000000e+02</VALUE>
</PROPERTY>
<PROPERTY NAME="scalString"  TYPE="string">
<VALUE>teststring</VALUE>
</PROPERTY>
<PROPERTY NAME="scalDateTime"  TYPE="datetime">
<VALUE>19991224120000.000000+360</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultBool"  TYPE="boolean">
<VALUE>TRUE</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultUint8"  TYPE="uint8">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultSint8"  TYPE="sint8">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultUint16"  TYPE="uint16">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultSint16"  TYPE="sint16">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultUint32"  TYPE="uint32">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultSint32"  TYPE="sint32">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultUint64"  TYPE="uint64">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultSint64"  TYPE="sint64">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultReal32"  TYPE="real32">
</PROPERTY>
<PROPERTY NAME="defaultReal64"  TYPE="real64">
</PROPERTY>
<PROPERTY NAME="defaultString"  TYPE="string">
<VALUE>test&quot;embedded&quot;quote</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultDateTime"  TYPE="datetime">
</PROPERTY>
<PROPERTY.ARRAY NAME="arrayBool"  TYPE="boolean">
<VALUE.ARRAY>
<VALUE>TRUE</VALUE>
<VALUE>FALSE</VALUE>
<VALUE>TRUE</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint8"  TYPE="uint8">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>128</VALUE>
<VALUE>240</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint8"  TYPE="sint8">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>126</VALUE>
<VALUE>-126</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint16"  TYPE="uint16">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>128</VALUE>
<VALUE>240</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint16"  TYPE="sint16">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>126</VALUE>
<VALUE>-126</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint32"  TYPE="uint32">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>128</VALUE>
<VALUE>240</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint32"  TYPE="sint32">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>126</VALUE>
<VALUE>-126</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint64"  TYPE="uint64">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>128</VALUE>
<VALUE>240</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint64"  TYPE="sint64">
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayReal32"  TYPE="real32">
<VALUE.ARRAY>
<VALUE>4.0000000e+00</VALUE>
<VALUE>1.2800000e+02</VALUE>
<VALUE>2.4000000e+02</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayReal64"  TYPE="real64">
<VALUE.ARRAY>
<VALUE>4.0000000000000000e+00</VALUE>
<VALUE>1.2800000000000000e+02</VALUE>
<VALUE>2.4000000000000000e+02</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayString"  TYPE="string">
<VALUE.ARRAY>
<VALUE>First</VALUE>
<VALUE>Second</VALUE>
<VALUE>Third</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayDateTime"  TYPE="datetime">
<VALUE.ARRAY>
<VALUE>19991224120000.000000+360</VALUE>
<VALUE>19991224120000.000000+360</VALUE>
<VALUE>19991224120000.000000+360</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
</INSTANCE>


path= Test_CLITestProviderClass.Id="ScalarTest"
<INSTANCE CLASSNAME="Test_CLITestProviderClass" >
<PROPERTY NAME="Id"  TYPE="string">
<VALUE>ScalarTest</VALUE>
</PROPERTY>
<PROPERTY NAME="requestInputParameters"  TYPE="string">
<VALUE>propertyList=Id, Name, requestInputParameters, scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, defaultUint16, defaultSint16, defaultUint32, defaultSint32, defaultUint64, defaultSint64, defaultReal32, defaultReal64, defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; includeQualifiers=false; includeClassOrigin=false</VALUE>
</PROPERTY>
<PROPERTY NAME="scalBool"  TYPE="boolean">
<VALUE>TRUE</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint8"  TYPE="uint8">
<VALUE>12</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint8"  TYPE="sint8">
<VALUE>12</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint16"  TYPE="uint16">
<VALUE>500</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint16"  TYPE="sint16">
<VALUE>500</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint32"  TYPE="uint32">
<VALUE>9999</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint32"  TYPE="sint32">
<VALUE>9999</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint64"  TYPE="uint64">
<VALUE>99999</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint64"  TYPE="sint64">
<VALUE>99999</VALUE>
</PROPERTY>
<PROPERTY NAME="scalString"  TYPE="string">
<VALUE>testString</VALUE>
</PROPERTY>
</INSTANCE>


path= Test_CLITestProviderClass.Id="arrayTest"
<INSTANCE CLASSNAME="Test_CLITestProviderClass" >
<PROPERTY NAME="Id"  TYPE="string">
<VALUE>arrayTest</VALUE>
</PROPERTY>
<PROPERTY NAME="requestInputParameters"  TYPE="string">
<VALUE>propertyList=Id, Name, requestInputParameters, scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, defaultUint16, defaultSint16, defaultUint32, defaultSint32, defaultUint64, defaultSint64, defaultReal32, defaultReal64, defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; includeQualifiers=false; includeClassOrigin=false</VALUE>
</PROPERTY>
<PROPERTY NAME="scalString"  TYPE="string">
<VALUE>testString</VALUE>
</PROPERTY>
<PROPERTY NAME="scalDateTime"  TYPE="datetime">
<VALUE>19991224120000.000000+360</VALUE>
</PROPERTY>
<PROPERTY.ARRAY NAME="arrayBool"  TYPE="boolean">
<VALUE.ARRAY>
<VALUE>TRUE</VALUE>
<VALUE>TRUE</VALUE>
<VALUE>TRUE</VALUE>
<VALUE>FALSE</VALUE>
<VALUE>TRUE</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint8"  TYPE="uint8">
<VALUE.ARRAY>
<VALUE>12</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint8"  TYPE="sint8">
<VALUE.ARRAY>
<VALUE>-127</VALUE>
<VALUE>0</VALUE>
<VALUE>12</VALUE>
<VALUE>127</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint32"  TYPE="uint32">
<VALUE.ARRAY>
<VALUE>99</VALUE>
<VALUE>0</VALUE>
<VALUE>31000</VALUE>
<VALUE>63000</VALUE>
<VALUE>4294967295</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint32"  TYPE="sint32">
<VALUE.ARRAY>
<VALUE>-32000</VALUE>
<VALUE>0</VALUE>
<VALUE>32000</VALUE>
<VALUE>-2147483648</VALUE>
<VALUE>2147483647</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint64"  TYPE="uint64">
<VALUE.ARRAY>
<VALUE>99</VALUE>
<VALUE>0</VALUE>
<VALUE>31000</VALUE>
<VALUE>63000</VALUE>
<VALUE>18446744073709551615</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint64"  TYPE="sint64">
<VALUE.ARRAY>
<VALUE>-32000</VALUE>
<VALUE>0</VALUE>
<VALUE>32000</VALUE>
<VALUE>-9223372036854775808</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
</INSTANCE>

Test_CLITestProviderClass.Id="Mike"
Test_CLITestProviderClass.Id="ScalarTest"
Test_CLITestProviderClass.Id="arrayTest"

path= Test_CLITestProviderClass.Id="Mike"
<INSTANCE CLASSNAME="Test_CLITestProviderClass" >
<PROPERTY NAME="Id"  TYPE="string">
<VALUE>Mike</VALUE>
</PROPERTY>
<PROPERTY NAME="Name"  TYPE="string">
<VALUE>Bob</VALUE>
</PROPERTY>
<PROPERTY NAME="requestInputParameters"  TYPE="string">
<VALUE>propertyList=Id, Name, requestInputParameters, scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, defaultUint16, defaultSint16, defaultUint32, defaultSint32, defaultUint64, defaultSint64, defaultReal32, defaultReal64, defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; includeQualifiers=false; includeClassOrigin=false</VALUE>
</PROPERTY>
<PROPERTY NAME="scalBool"  TYPE="boolean">
<VALUE>TRUE</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint8"  TYPE="uint8">
<VALUE>220</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint8"  TYPE="sint8">
<VALUE>124</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint16"  TYPE="uint16">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint16"  TYPE="sint16">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint32"  TYPE="uint32">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint32"  TYPE="sint32">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint64"  TYPE="uint64">
<VALUE>100</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint64"  TYPE="sint64">
</PROPERTY>
<PROPERTY NAME="scalReal32"  TYPE="real32">
<VALUE>1.0000000e+02</VALUE>
</PROPERTY>
<PROPERTY NAME="scalReal64"  TYPE="real64">
<VALUE>1.0000000000000000e+02</VALUE>
</PROPERTY>
<PROPERTY NAME="scalString"  TYPE="string">
<VALUE>teststring</VALUE>
</PROPERTY>
<PROPERTY NAME="scalDateTime"  TYPE="datetime">
<VALUE>19991224120000.000000+360</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultBool"  TYPE="boolean">
<VALUE>TRUE</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultUint8"  TYPE="uint8">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultSint8"  TYPE="sint8">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultUint16"  TYPE="uint16">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultSint16"  TYPE="sint16">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultUint32"  TYPE="uint32">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultSint32"  TYPE="sint32">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultUint64"  TYPE="uint64">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultSint64"  TYPE="sint64">
<VALUE>4</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultReal32"  TYPE="real32">
</PROPERTY>
<PROPERTY NAME="defaultReal64"  TYPE="real64">
</PROPERTY>
<PROPERTY NAME="defaultString"  TYPE="string">
<VALUE>test&quot;embedded&quot;quote</VALUE>
</PROPERTY>
<PROPERTY NAME="defaultDateTime"  TYPE="datetime">
</PROPERTY>
<PROPERTY.ARRAY NAME="arrayBool"  TYPE="boolean">
<VALUE.ARRAY>
<VALUE>TRUE</VALUE>
<VALUE>FALSE</VALUE>
<VALUE>TRUE</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint8"  TYPE="uint8">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>128</VALUE>
<VALUE>240</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint8"  TYPE="sint8">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>126</VALUE>
<VALUE>-126</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint16"  TYPE="uint16">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>128</VALUE>
<VALUE>240</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint16"  TYPE="sint16">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>126</VALUE>
<VALUE>-126</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint32"  TYPE="uint32">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>128</VALUE>
<VALUE>240</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint32"  TYPE="sint32">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>126</VALUE>
<VALUE>-126</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint64"  TYPE="uint64">
<VALUE.ARRAY>
<VALUE>4</VALUE>
<VALUE>128</VALUE>
<VALUE>240</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint64"  TYPE="sint64">
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayReal32"  TYPE="real32">
<VALUE.ARRAY>
<VALUE>4.0000000e+00</VALUE>
<VALUE>1.2800000e+02</VALUE>
<VALUE>2.4000000e+02</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayReal64"  TYPE="real64">
<VALUE.ARRAY>
<VALUE>4.0000000000000000e+00</VALUE>
<VALUE>1.2800000000000000e+02</VALUE>
<VALUE>2.4000000000000000e+02</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayString"  TYPE="string">
<VALUE.ARRAY>
<VALUE>First</VALUE>
<VALUE>Second</VALUE>
<VALUE>Third</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayDateTime"  TYPE="datetime">
<VALUE.ARRAY>
<VALUE>19991224120000.000000+360</VALUE>
<VALUE>19991224120000.000000+360</VALUE>
<VALUE>19991224120000.000000+360</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
</INSTANCE>


path= Test_CLITestProviderClass.Id="ScalarTest"
<INSTANCE CLASSNAME="Test_CLITestProviderClass" >
<PROPERTY NAME="Id"  TYPE="string">
<VALUE>ScalarTest</VALUE>
</PROPERTY>
<PROPERTY NAME="requestInputParameters"  TYPE="string">
<VALUE>propertyList=Id, Name, requestInputParameters, scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, defaultUint16, defaultSint16, defaultUint32, defaultSint32, defaultUint64, defaultSint64, defaultReal32, defaultReal64, defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; includeQualifiers=false; includeClassOrigin=false</VALUE>
</PROPERTY>
<PROPERTY NAME="scalBool"  TYPE="boolean">
<VALUE>TRUE</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint8"  TYPE="uint8">
<VALUE>12</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint8"  TYPE="sint8">
<VALUE>12</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint16"  TYPE="uint16">
<VALUE>500</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint16"  TYPE="sint16">
<VALUE>500</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint32"  TYPE="uint32">
<VALUE>9999</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint32"  TYPE="sint32">
<VALUE>9999</VALUE>
</PROPERTY>
<PROPERTY NAME="scalUint64"  TYPE="uint64">
<VALUE>99999</VALUE>
</PROPERTY>
<PROPERTY NAME="scalSint64"  TYPE="sint64">
<VALUE>99999</VALUE>
</PROPERTY>
<PROPERTY NAME="scalString"  TYPE="string">
<VALUE>testString</VALUE>
</PROPERTY>
</INSTANCE>


path= Test_CLITestProviderClass.Id="arrayTest"
<INSTANCE CLASSNAME="Test_CLITestProviderClass" >
<PROPERTY NAME="Id"  TYPE="string">
<VALUE>arrayTest</VALUE>
</PROPERTY>
<PROPERTY NAME="requestInputParameters"  TYPE="string">
<VALUE>propertyList=Id, Name, requestInputParameters, scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, defaultUint16, defaultSint16, defaultUint32, defaultSint32, defaultUint64, defaultSint64, defaultReal32, defaultReal64, defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; includeQualifiers=false; includeClassOrigin=false</VALUE>
</PROPERTY>
<PROPERTY NAME="scalString"  TYPE="string">
<VALUE>testString</VALUE>
</PROPERTY>
<PROPERTY NAME="scalDateTime"  TYPE="datetime">
<VALUE>19991224120000.000000+360</VALUE>
</PROPERTY>
<PROPERTY.ARRAY NAME="arrayBool"  TYPE="boolean">
<VALUE.ARRAY>
<VALUE>TRUE</VALUE>
<VALUE>TRUE</VALUE>
<VALUE>TRUE</VALUE>
<VALUE>FALSE</VALUE>
<VALUE>TRUE</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint8"  TYPE="uint8">
<VALUE.ARRAY>
<VALUE>12</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint8"  TYPE="sint8">
<VALUE.ARRAY>
<VALUE>-127</VALUE>
<VALUE>0</VALUE>
<VALUE>12</VALUE>
<VALUE>127</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint32"  TYPE="uint32">
<VALUE.ARRAY>
<VALUE>99</VALUE>
<VALUE>0</VALUE>
<VALUE>31000</VALUE>
<VALUE>63000</VALUE>
<VALUE>4294967295</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint32"  TYPE="sint32">
<VALUE.ARRAY>
<VALUE>-32000</VALUE>
<VALUE>0</VALUE>
<VALUE>32000</VALUE>
<VALUE>-2147483648</VALUE>
<VALUE>2147483647</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arrayUint64"  TYPE="uint64">
<VALUE.ARRAY>
<VALUE>99</VALUE>
<VALUE>0</VALUE>
<VALUE>31000</VALUE>
<VALUE>63000</VALUE>
<VALUE>18446744073709551615</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
<PROPERTY.ARRAY NAME="arraySint64"  TYPE="sint64">
<VALUE.ARRAY>
<VALUE>-32000</VALUE>
<VALUE>0</VALUE>
<VALUE>32000</VALUE>
<VALUE>-9223372036854775808</VALUE>
</VALUE.ARRAY>
</PROPERTY.ARRAY>
</INSTANCE>

4. +++++ Test Instances modify Instance
modified
Test instance Test_CLITestProviderClass.Id="ScalarTest" OK
modified
Test instance Test_CLITestProviderClass.Id="ScalarTest" OK
5. +++++ Test delete instance
Returned Path  Test_CLITestProviderClass.Id="ScalarTest"
Test instance Test_CLITestProviderClass.Id="ScalarTest" OK
6. +++++ Test invokeMethod
Return Value= 0
scalBool=TRUE
arrayBool=TRUE FALSE TRUE 
scalUint32=99
arrayUint32=99 0 31000 63000 
scalSint32=-99
arraySint32=-32000 0 32000 
scalString=ThisIsMyTest
arrayString=one two three multiword string 
scalDateTime=19991224120000.000000+360
arrayDateTime=19991224120000.000000+360 19991224120000.000000+360 
Return Value= 0
OutParam1=test/TestProvider:class.key1="aaa",key2=0
OutParam2=test/TestProvider:class.key1="aaa01",key2=1 test/TestProvider:class.key1="aaa02",key2=2 
Return Value= <VALUE>0</VALUE>


<PARAMVALUE NAME="OutParam1" PARAMTYPE="reference">
<VALUE.REFERENCE>
<LOCALINSTANCEPATH>
<LOCALNAMESPACEPATH>
<NAMESPACE NAME="test"/>
<NAMESPACE NAME="TestProvider"/>
</LOCALNAMESPACEPATH>
<INSTANCENAME CLASSNAME="class">
<KEYBINDING NAME="key1">
<KEYVALUE VALUETYPE="string">aaa</KEYVALUE>
</KEYBINDING>
<KEYBINDING NAME="key2">
<KEYVALUE VALUETYPE="numeric">0</KEYVALUE>
</KEYBINDING>
</INSTANCENAME>
</LOCALINSTANCEPATH>
</VALUE.REFERENCE>
</PARAMVALUE>

<PARAMVALUE NAME="OutParam2" PARAMTYPE="reference">
<VALUE.REFARRAY>
<VALUE.REFERENCE>
<LOCALINSTANCEPATH>
<LOCALNAMESPACEPATH>
<NAMESPACE NAME="test"/>
<NAMESPACE NAME="TestProvider"/>
</LOCALNAMESPACEPATH>
<INSTANCENAME CLASSNAME="class">
<KEYBINDING NAME="key1">
<KEYVALUE VALUETYPE="string">aaa01</KEYVALUE>
</KEYBINDING>
<KEYBINDING NAME="key2">
<KEYVALUE VALUETYPE="numeric">1</KEYVALUE>
</KEYBINDING>
</INSTANCENAME>
</LOCALINSTANCEPATH>
</VALUE.REFERENCE>
<VALUE.REFERENCE>
<LOCALINSTANCEPATH>
<LOCALNAMESPACEPATH>
<NAMESPACE NAME="test"/>
<NAMESPACE NAME="TestProvider"/>
</LOCALNAMESPACEPATH>
<INSTANCENAME CLASSNAME="class">
<KEYBINDING NAME="key1">
<KEYVALUE VALUETYPE="string">aaa02</KEYVALUE>
</KEYBINDING>
<KEYBINDING NAME="key2">
<KEYVALUE VALUETYPE="numeric">2</KEYVALUE>
</KEYBINDING>
</INSTANCENAME>
</LOCALINSTANCEPATH>
</VALUE.REFERENCE>
</VALUE.REFARRAY>
</PARAMVALUE>

Return Value= <VALUE>0</VALUE>


<PARAMVALUE NAME="OutParam1" PARAMTYPE="reference">
<VALUE.REFERENCE>
<LOCALINSTANCEPATH>
<LOCALNAMESPACEPATH>
<NAMESPACE NAME="test"/>
<NAMESPACE NAME="TestProvider"/>
</LOCALNAMESPACEPATH>
<INSTANCENAME CLASSNAME="class">
<KEYBINDING NAME="key1">
<KEYVALUE VALUETYPE="string">aaa</KEYVALUE>
</KEYBINDING>
<KEYBINDING NAME="key2">
<KEYVALUE VALUETYPE="numeric">0</KEYVALUE>
</KEYBINDING>
</INSTANCENAME>
</LOCALINSTANCEPATH>
</VALUE.REFERENCE>
</PARAMVALUE>

<PARAMVALUE NAME="OutParam2" PARAMTYPE="reference">
<VALUE.REFARRAY>
<VALUE.REFERENCE>
<LOCALINSTANCEPATH>
<LOCALNAMESPACEPATH>
<NAMESPACE NAME="test"/>
<NAMESPACE NAME="TestProvider"/>
</LOCALNAMESPACEPATH>
<INSTANCENAME CLASSNAME="class">
<KEYBINDING NAME="key1">
<KEYVALUE VALUETYPE="string">aaa01</KEYVALUE>
</KEYBINDING>
<KEYBINDING NAME="key2">
<KEYVALUE VALUETYPE="numeric">1</KEYVALUE>
</KEYBINDING>
</INSTANCENAME>
</LOCALINSTANCEPATH>
</VALUE.REFERENCE>
<VALUE.REFERENCE>
<LOCALINSTANCEPATH>
<LOCALNAMESPACEPATH>
<NAMESPACE NAME="test"/>
<NAMESPACE NAME="TestProvider"/>
</LOCALNAMESPACEPATH>
<INSTANCENAME CLASSNAME="class">
<KEYBINDING NAME="key1">
<KEYVALUE VALUETYPE="string">aaa02</KEYVALUE>
</KEYBINDING>
<KEYBINDING NAME="key2">
<KEYVALUE VALUETYPE="numeric">2</KEYVALUE>
</KEYBINDING>
</INSTANCENAME>
</LOCALINSTANCEPATH>
</VALUE.REFERENCE>
</VALUE.REFARRAY>
</PARAMVALUE>

10. +++++ testPropertyListOptions

// ===================================================
// CIM_ManagedElement
// ===================================================

    [Abstract, 
    Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( "ManagedElement is an abstract class that provides "
        "a common superclass (or top of the inheritance tree) for the "
        "non-association classes in the CIM Schema." )]
class CIM_ManagedElement
{
    
        [Description ( "The Caption property is a short textual description "
            "(one- line string) of the object." ), 
        MaxLen ( 64 )]
    string Caption;
};

// ===================================================
// CIM_ManagedElement
// ===================================================

    [Abstract, 
    Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( "ManagedElement is an abstract class that provides "
        "a common superclass (or top of the inheritance tree) for the "
        "non-association classes in the CIM Schema." )]
class CIM_ManagedElement
{
    
        [Description ( "The Caption property is a short textual description "
            "(one- line string) of the object." ), 
        MaxLen ( 64 )]
    string Caption;
    
        [Description ( "The Description property provides a textual "
            "description of the object." )]
    string Description;
};

// ===================================================
// CIM_ManagedElement
// ===================================================

    [Abstract, 
    Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( "ManagedElement is an abstract class that provides "
        "a common superclass (or top of the inheritance tree) for the "
        "non-association classes in the CIM Schema." )]
class CIM_ManagedElement
{
    
        [Description ( "The Caption property is a short textual description "
            "(one- line string) of the object." ), 
        MaxLen ( 64 )]
    string Caption;
    
        [Description ( "The Description property provides a textual "
            "description of the object." )]
    string Description;
    
        [Description ( "A user-friendly name for the object. This property "
            "allows each instance to define a user-friendly name in "
            "addition to its key properties, identity data, and description "
            "information. \nNote that the Name property of ManagedSystemElement "
            "is also defined as a user-friendly name. But, it is often "
            "subclassed to be a Key. It is not reasonable that the same "
            "property can convey both identity and a user-friendly name, "
            "without inconsistencies. Where Name exists and is not a "
            "Key (such as for instances of LogicalDevice), the same "
            "information can be present in both the Name and ElementName "
            "properties. Note that if there is an associated instance "
            "of CIM_EnabledLogicalElementCapabilities, restrictions "
            "on this properties may exist as defined in ElementNameMask "
            "and MaxElementNameLen properties defined in that class." 
            )]
    string ElementName;
};

// ===================================================
// CIM_ManagedElement
// ===================================================

    [Abstract, 
    Version ( "2.19.0" ), 
    UMLPackagePath ( "CIM::Core::CoreElements" ), 
    Description ( "ManagedElement is an abstract class that provides "
        "a common superclass (or top of the inheritance tree) for the "
        "non-association classes in the CIM Schema." )]
class CIM_ManagedElement
{
};

// path= Test_CLITestProviderClass.Id="Mike"

instance of Test_CLITestProviderClass
{
    scalBool = TRUE;
    arrayUint64 = {4, 128, 240};
};

// path= Test_CLITestProviderClass.Id="Mike"

instance of Test_CLITestProviderClass
{
};

// path= Test_CLITestProviderClass

instance of Test_CLITestProviderClass
{
    scalBool = TRUE;
    arrayUint64 = {4, 128, 240};
    scalString = "teststring";
};
12. +++++ test getInstance Operation

// path= Test_CLITestProviderClass

instance of Test_CLITestProviderClass
{
    Id = "Mike";
    Name = "Bob";
    requestInputParameters = "propertyList=NULL; includeQualifiers=false; "
        "includeClassOrigin=false";
    scalBool = TRUE;
    scalUint8 = 220;
    scalSint8 = 124;
    scalUint16 = 100;
    scalSint16 = 100;
    scalUint32 = 100;
    scalSint32 = 100;
    scalUint64 = 100;
    scalSint64 = NULL;
    scalReal32 = 1.0000000000000000e+02;
    scalReal64 = 1.0000000000000000e+02;
    scalString = "teststring";
    scalDateTime = "19991224120000.000000+360";
    defaultBool = TRUE;
    defaultUint8 = 4;
    defaultSint8 = 4;
    defaultUint16 = 4;
    defaultSint16 = 4;
    defaultUint32 = 4;
    defaultSint32 = 4;
    defaultUint64 = 4;
    defaultSint64 = 4;
    defaultReal32 = NULL;
    defaultReal64 = NULL;
    defaultString = "test\"embedded\"quote";
    defaultDateTime = NULL;
    arrayBool = {TRUE, FALSE, TRUE};
    arrayUint8 = {4, 128, 240};
    arraySint8 = {4, 126, -126};
    arrayUint16 = {4, 128, 240};
    arraySint16 = {4, 126, -126};
    arrayUint32 = {4, 128, 240};
    arraySint32 = {4, 126, -126};
    arrayUint64 = {4, 128, 240};
    arraySint64 = NULL;
    arrayReal32 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayReal64 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayString = {"First", "Second", "Third"};
    arrayDateTime = {"19991224120000.000000+360", "19991224120000.000000+360", 
        "19991224120000.000000+360"};
};

// path= Test_CLITestProviderClass

instance of Test_CLITestProviderClass
{
    Name = "Bob";
    scalBool = TRUE;
};

// path= Test_CLITestProviderClass

instance of Test_CLITestProviderClass
{
    Name = "Bob";
    scalBool = TRUE;
};

path= Test_CLITestProviderClass
<INSTANCE CLASSNAME="Test_CLITestProviderClass" >
<PROPERTY NAME="Name"  TYPE="string">
<VALUE>Bob</VALUE>
</PROPERTY>
<PROPERTY NAME="scalBool"  TYPE="boolean">
<VALUE>TRUE</VALUE>
</PROPERTY>
</INSTANCE>


path= Test_CLITestProviderClass
<INSTANCE CLASSNAME="Test_CLITestProviderClass" >
<PROPERTY NAME="Name"  TYPE="string">
<VALUE>Bob</VALUE>
</PROPERTY>
<PROPERTY NAME="scalBool"  TYPE="boolean">
<VALUE>TRUE</VALUE>
</PROPERTY>
</INSTANCE>

13. +++++ test TestInstance Operations
Test instance Test_CLITestProviderClass.Id="Mike" OK
Test instance Test_CLITestProviderClass.Id="Mike" OK
Test instance Test_CLITestProviderClass.Id="Mike" OK
Test instance Test_CLITestProviderClass.Id="Mike" OK
Test instance Test_CLITestProviderClass.Id="Mike" OK
Test instance Test_CLITestProviderClass.Id="Mike" OK
Test instance Test_CLITestProviderClass.Id="Mike" OK
14. +++++ test Integer Variations
Returned Path  Test_CLITestProviderClass.Id="integerVariationTest"

// path= Test_CLITestProviderClass

instance of Test_CLITestProviderClass
{
    Id = "integerVariationTest";
    scalBool = TRUE;
    scalUint8 = 12;
    scalUint16 = 100;
    scalUint32 = 9999;
    scalUint64 = 99999;
    arrayUint32 = {99, 0, 31000, 63000, 4294967295, 64, 7};
    requestInputParameters = "propertyList=NULL; includeQualifiers=false; "
        "includeClassOrigin=false";
};
Test instance Test_CLITestProviderClass.Id="integerVariationTest" OK
Test instance Test_CLITestProviderClass.Id="integerVariationTest" OK
Test instance Test_CLITestProviderClass.Id="integerVariationTest" OK
Test instance Test_CLITestProviderClass.Id="integerVariationTest" OK
15. +++++ referencetests

// ===================================================
// Test_CLITestProviderLinkClass
// ===================================================

class Test_CLITestProviderLinkClass
{
    Test_CLITestProviderClass REF parent;
    Test_CLITestProviderClass REF child;
    string requestInputParameters;
};
1 referenceNames
//ChangedHostName/test/TestProvider:Test_CLITestProviderLinkClass
Return Value= 0
substituteHostName=

// path= //localhost/test/TestProvider:Test_CLITestProviderLinkClass.child="//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"",parent="//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\""


    [Association, 
    Version ( "1.0.0" ), 
    Description ( "Defines the relationship between parents and children. "
        "Used to test Ref/Assoc functions and creation/modification "
        "of instances in cimli" )]
instance of Test_CLITestProviderLinkClass
{
    
        [key]
    parent = "//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"";
    
        [key]
    child = "//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"";
    
        [Description ( "This property returns a String defining the "
            "input parameters the provider saw on any operation involving "
            "this class." )]
    requestInputParameters = "role=; resultClass=Test_CLITestProviderLinkClass; "
        "includeQualifiers=true; includeClassOrigin=false; propertyList=NULL";
};

// path= //localhost/test/TestProvider:Test_CLITestProviderLinkClass.child="//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"",parent="//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\""


    [Association, 
    Version ( "1.0.0" ), 
    Description ( "Defines the relationship between parents and children. "
        "Used to test Ref/Assoc functions and creation/modification "
        "of instances in cimli" )]
instance of Test_CLITestProviderLinkClass
{
    
        [key]
    parent = "//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"";
    
        [key]
    child = "//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"";
    
        [Description ( "This property returns a String defining the "
            "input parameters the provider saw on any operation involving "
            "this class." )]
    requestInputParameters = "role=parent; resultClass=Test_CLITestProviderLinkClass; "
        "includeQualifiers=true; includeClassOrigin=false; propertyList=NULL";
};
1 referenceNames
//localhost/test/TestProvider:Test_CLITestProviderLinkClass.child="//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"",parent="//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\""

// path= //localhost/test/TestProvider:Test_CLITestProviderLinkClass.child="//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"",parent="//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\""


    [Association, 
    Version ( "1.0.0" ), 
    Description ( "Defines the relationship between parents and children. "
        "Used to test Ref/Assoc functions and creation/modification "
        "of instances in cimli" )]
instance of Test_CLITestProviderLinkClass
{
    
        [key]
    parent = "//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"";
    
        [key]
    child = "//localhost/test/TestProvider:Test_CLITestProviderClass.Id=\"Mike\"";
    
        [Description ( "This property returns a String defining the "
            "input parameters the provider saw on any operation involving "
            "this class." )]
    requestInputParameters = "role=child; resultClass=Test_CLITestProviderLinkClass; "
        "includeQualifiers=true; includeClassOrigin=false; propertyList=parent, "
        "child, requestInputParameters";
};
Return Value= 0
16. +++++ associationtests

// ===================================================
// Test_CLITestProviderClass
// ===================================================

class Test_CLITestProviderClass
{
    string Id;
    string Name;
    string requestInputParameters;
    boolean scalBool;
    uint8 scalUint8;
    sint8 scalSint8;
    uint16 scalUint16;
    sint16 scalSint16;
    uint32 scalUint32;
    sint32 scalSint32;
    uint64 scalUint64;
    sint64 scalSint64;
    real32 scalReal32;
    real64 scalReal64;
    string scalString;
    datetime scalDateTime;
    boolean defaultBool = TRUE;
    uint8 defaultUint8 = 4;
    sint8 defaultSint8 = 4;
    uint16 defaultUint16 = 4;
    sint16 defaultSint16 = 4;
    uint32 defaultUint32 = 4;
    sint32 defaultSint32 = 4;
    uint64 defaultUint64 = 4;
    sint64 defaultSint64 = 4;
    real32 defaultReal32;
    real64 defaultReal64;
    string defaultString = "test\"embedded\"quote";
    datetime defaultDateTime;
    boolean arrayBool[];
    uint8 arrayUint8[];
    sint8 arraySint8[];
    uint16 arrayUint16[];
    sint16 arraySint16[];
    uint32 arrayUint32[];
    sint32 arraySint32[];
    uint64 arrayUint64[];
    sint64 arraySint64[];
    real32 arrayReal32[];
    real64 arrayReal64[];
    string arrayString[];
    datetime arrayDateTime[];
    uint32 ReferenceParamTest(Test_CLITestProviderClass REF InParam1, 
        Test_CLITestProviderClass REF InParam2[], Test_CLITestProviderClass 
        REF OutParam1, Test_CLITestProviderClass REF OutParam2[]);
    uint32 InOutParamTest(boolean scalBool, uint8 scalUint8, sint8 
        scalSint8, uint16 scalUint16, sint16 scalSint16, uint32 scalUint32, 
        sint32 scalSint32, uint64 scalUint64, real32 scalReal32, real64 
        scalReal64, string scalString, datetime scalDateTime, boolean 
        arrayBool[], uint8 arrayUint8[], sint8 arraySint8[], uint16 
        arrayUint16[], sint16 arraySint16[], uint32 arrayUint32[], 
        sint32 arraySint32[], uint64 arrayUint64[], real32 arrayReal32[], 
        real64 arrayReal64[], string arrayString[], datetime arrayDateTime[], 
        uint32 returnValue);
    uint32 FullParamTest(boolean inScalBool, uint8 inScalUint8, sint8 
        inScalSint8, uint16 inScalUint16, sint16 inScalSint16, uint32 
        inScalUint32, sint32 inScalSint32, uint64 inScalUint64, real32 
        inScalReal32, real64 inScalReal64, string inScalString, datetime 
        inScalDateTime, boolean outScalBool, uint8 outScalUint8, sint8 
        outScalSint8, uint16 outScalUint16, sint16 outScalSint16, uint32 
        outScalUint32, sint32 outScalSint32, uint64 outScalUint64, 
        real32 outScalReal32, real64 outScalReal64, string outScalString, 
        datetime outScalDateTime);
    uint32 setProviderParameters(string substituteHostName);
    uint32 resetProviderParameters();
    uint32 reset();
    uint32 debugMode(boolean newState);
};
1 associatorNames
//ChangedHostName/test/TestProvider:Test_CLITestProviderClass
Return Value= 0
substituteHostName=

// path= //localhost/test/TestProvider:Test_CLITestProviderClass.Id="Mike"

instance of Test_CLITestProviderClass
{
    Id = "Mike";
    Name = "Bob";
    requestInputParameters = "role=; resultRole=; associationClass=Test_CLITestProviderLinkClass; "
        "resultClass=; includeQualifiers=false; includeClassOrigin=false; "
        "propertyList=NULL";
    scalBool = TRUE;
    scalUint8 = 220;
    scalSint8 = 124;
    scalUint16 = 100;
    scalSint16 = 100;
    scalUint32 = 100;
    scalSint32 = 100;
    scalUint64 = 100;
    scalSint64 = NULL;
    scalReal32 = 1.0000000000000000e+02;
    scalReal64 = 1.0000000000000000e+02;
    scalString = "teststring";
    scalDateTime = "19991224120000.000000+360";
    defaultBool = TRUE;
    defaultUint8 = 4;
    defaultSint8 = 4;
    defaultUint16 = 4;
    defaultSint16 = 4;
    defaultUint32 = 4;
    defaultSint32 = 4;
    defaultUint64 = 4;
    defaultSint64 = 4;
    defaultReal32 = NULL;
    defaultReal64 = NULL;
    defaultString = "test\"embedded\"quote";
    defaultDateTime = NULL;
    arrayBool = {TRUE, FALSE, TRUE};
    arrayUint8 = {4, 128, 240};
    arraySint8 = {4, 126, -126};
    arrayUint16 = {4, 128, 240};
    arraySint16 = {4, 126, -126};
    arrayUint32 = {4, 128, 240};
    arraySint32 = {4, 126, -126};
    arrayUint64 = {4, 128, 240};
    arraySint64 = NULL;
    arrayReal32 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayReal64 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayString = {"First", "Second", "Third"};
    arrayDateTime = {"19991224120000.000000+360", "19991224120000.000000+360", 
        "19991224120000.000000+360"};
};
1 associatorNames
//localhost/test/TestProvider:Test_CLITestProviderClass.Id="Mike"

// path= //localhost/test/TestProvider:Test_CLITestProviderClass.Id="Mike"

instance of Test_CLITestProviderClass
{
};

// path= //localhost/test/TestProvider:Test_CLITestProviderClass.Id="Mike"

instance of Test_CLITestProviderClass
{
    requestInputParameters = "role=child; resultRole=parent; associationClass=Test_CLITestProviderLinkClass; "
        "resultClass=Test_CLITestProviderClass; includeQualifiers=false; "
        "includeClassOrigin=false; propertyList=requestInputParameters";
};
Return Value= 0
18. +++++ nullvaluetests
Returned Path  Test_CLITestProviderClass.Id="NullValueTest"

// path= Test_CLITestProviderClass

instance of Test_CLITestProviderClass
{
    Id = "NullValueTest";
    scalBool = NULL;
    scalUint32 = NULL;
    scalString = NULL;
    defaultBool = TRUE;
    defaultUint32 = 4;
    defaultString = "test\"embedded\"quote";
    requestInputParameters = "propertyList=NULL; includeQualifiers=false; "
        "includeClassOrigin=false";
};
Test instance Test_CLITestProviderClass.Id="NullValueTest" OK
Returned Path  Test_CLITestProviderClass.Id="EmptyStringTest"

// path= Test_CLITestProviderClass

instance of Test_CLITestProviderClass
{
    Id = "EmptyStringTest";
    scalUint32 = NULL;
    scalUint64 = 99999;
    scalString = NULL;
    defaultString = "";
    arrayUint32 = {99, 0, 31000, 63000, 4294967295};
    requestInputParameters = "propertyList=NULL; includeQualifiers=false; "
        "includeClassOrigin=false";
};
Test instance Test_CLITestProviderClass.Id="EmptyStringTest" OK
20. +++++ objectCounterTests
Return Value= 0
substituteHostName=
1 instances of class Test_CLITestProviderClass returned.

1  Test_CLITestProviderClass returned.


// path= Test_CLITestProviderClass.Id="Mike"

instance of Test_CLITestProviderClass
{
    Id = "Mike";
    Name = "Bob";
    requestInputParameters = "propertyList=Id, Name, requestInputParameters, "
        "scalBool, scalUint8, scalSint8, scalUint16, scalSint16, scalUint32, "
        "scalSint32, scalUint64, scalSint64, scalReal32, scalReal64, "
        "scalString, scalDateTime, defaultBool, defaultUint8, defaultSint8, "
        "defaultUint16, defaultSint16, defaultUint32, defaultSint32, "
        "defaultUint64, defaultSint64, defaultReal32, defaultReal64, "
        "defaultString, defaultDateTime, arrayBool, arrayUint8, arraySint8, "
        "arrayUint16, arraySint16, arrayUint32, arraySint32, arrayUint64, "
        "arraySint64, arrayReal32, arrayReal64, arrayString, arrayDateTime; "
        "includeQualifiers=false; includeClassOrigin=false";
    scalBool = TRUE;
    scalUint8 = 220;
    scalSint8 = 124;
    scalUint16 = 100;
    scalSint16 = 100;
    scalUint32 = 100;
    scalSint32 = 100;
    scalUint64 = 100;
    scalSint64 = NULL;
    scalReal32 = 1.0000000000000000e+02;
    scalReal64 = 1.0000000000000000e+02;
    scalString = "teststring";
    scalDateTime = "19991224120000.000000+360";
    defaultBool = TRUE;
    defaultUint8 = 4;
    defaultSint8 = 4;
    defaultUint16 = 4;
    defaultSint16 = 4;
    defaultUint32 = 4;
    defaultSint32 = 4;
    defaultUint64 = 4;
    defaultSint64 = 4;
    defaultReal32 = NULL;
    defaultReal64 = NULL;
    defaultString = "test\"embedded\"quote";
    defaultDateTime = NULL;
    arrayBool = {TRUE, FALSE, TRUE};
    arrayUint8 = {4, 128, 240};
    arraySint8 = {4, 126, -126};
    arrayUint16 = {4, 128, 240};
    arraySint16 = {4, 126, -126};
    arrayUint32 = {4, 128, 240};
    arraySint32 = {4, 126, -126};
    arrayUint64 = {4, 128, 240};
    arraySint64 = NULL;
    arrayReal32 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayReal64 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayString = {"First", "Second", "Third"};
    arrayDateTime = {"19991224120000.000000+360", "19991224120000.000000+360", 
        "19991224120000.000000+360"};
};
Test_CLITestProviderClass.Id="Mike"
1 instances of class Test_CLITestProviderClass returned.

Failed instances of class count test. Expected 10. Received 1.
1  Test_CLITestProviderClass returned.

Failed  count test. Expected 10. Received 1.
1 associators  returned.

Failed associators count test. Expected 10. Received 1.
1 references  returned.

Failed references count test. Expected 10. Received 1.
1 associatorNames Test_CLITestProviderClass returned.

Failed associatorNames count test. Expected 10. Received 1.
1 referenceNames Test_CLITestProviderClass returned.

Failed referenceNames count test. Expected 10. Received 1.
Return Value= 0
21. +++++ SortInstancesTest
Test_CLITestProviderClass.Id="Andy"
Test_CLITestProviderClass.Id="Fred"
Test_CLITestProviderClass.Id="Judy"
Test_CLITestProviderClass.Id="Mike"
Test_CLITestProviderClass.Id="Norman"
Test_CLITestProviderClass.Id="Thomas"
Test_CLITestProviderClass.Id="Zed"

// path= Test_CLITestProviderClass.Id="Andy"

instance of Test_CLITestProviderClass
{
    Id = "Andy";
    Name = "Blue";
};

// path= Test_CLITestProviderClass.Id="Fred"

instance of Test_CLITestProviderClass
{
    Id = "Fred";
    Name = "Jones";
};

// path= Test_CLITestProviderClass.Id="Judy"

instance of Test_CLITestProviderClass
{
    Id = "Judy";
    Name = "blah";
};

// path= Test_CLITestProviderClass.Id="Mike"

instance of Test_CLITestProviderClass
{
    Id = "Mike";
    Name = "Bob";
};

// path= Test_CLITestProviderClass.Id="Norman"

instance of Test_CLITestProviderClass
{
    Id = "Norman";
    Name = "Susan";
};

// path= Test_CLITestProviderClass.Id="Thomas"

instance of Test_CLITestProviderClass
{
    Id = "Thomas";
    Name = "Peter";
};

// path= Test_CLITestProviderClass.Id="Zed"

instance of Test_CLITestProviderClass
{
    Id = "Zed";
    Name = "Futz";
};
22. +++++ Test For enumerateClasses
CIM_ActsAsSpare
CIM_CollectedCollections
CIM_CollectionConfiguration
CIM_CollectionSetting
CIM_CompatibleProduct
CIM_Component
CIM_ConfigurationComponent
CIM_Dependency
CIM_DependencyContext
CIM_ElementCapabilities
CIM_ElementConfiguration
CIM_ElementLocation
CIM_ElementProfile
CIM_ElementSetting
CIM_ElementSettingData
CIM_ElementStatisticalData
CIM_Error
CIM_FRUIncludesProduct
CIM_FRUPhysicalElements
CIM_InstalledSoftwareIdentity
CIM_LogicalIdentity
CIM_ManagedElement
CIM_MemberOfCollection
CIM_OwningCollectionElement
CIM_ParameterValueSources
CIM_ParametersForMethod
CIM_ProductFRU
CIM_ProductParentChild
CIM_ProductPhysicalElements
CIM_ProductProductDependency
CIM_ProductSupport
CIM_RelatedStatisticalData
CIM_RelatedStatistics
CIM_ReplaceableProductFRU
CIM_SAPAvailableForElement
CIM_ServiceAffectsElement
CIM_ServiceAvailableToElement
CIM_SettingContext
CIM_SettingsDefineState
CIM_Statistics
CIM_Synchronized
CIM_SystemSettingContext
PG_TestElement
WET_CollectedCollections
WET_CollectionConfiguration
WET_CollectionSetting
WET_CompatibleProduct
WET_Component
WET_ConfigurationComponent
WET_Dependency
WET_DependencyContext
WET_ElementConfiguration
WET_ElementSetting
WET_FRUIncludesProduct
WET_FRUPhysicalElements
WET_LogicalIdentity
WET_ManagedElement
WET_MemberOfCollection
WET_ProductFRU
WET_ProductParentChild
WET_ProductPhysicalElements
WET_ProductProductDependency
WET_ProductSupport
WET_RelatedStatistics
WET_SettingContext
WET_Statistics
WET_Synchronized
23. +++++ Test execQuery
24. +++++ Test Errors on Input
INPUT ERROR: Invalid keyword for boolean value = blah. Must be "true" or "false" upper or lower case
INPUT ERROR: Value conversion error. 1234blah. type uint32

INPUT ERROR: Value conversion error. 9999999. type uint8

24. +++++ Test Errors on Input
25. +++++ Test niall operation
test/cimv2 Total Classes=777, with Instances=0, Instances=0
25. +++++ Test niall operation
26. +++++ Test pull Operations
1  Test_CLITestProviderClass returned.

1 instances of class Test_CLITestProviderClass returned.


// path= //ChangedHostName/test/TestProvider:Test_CLITestProviderClass.Id="Mike"

instance of Test_CLITestProviderClass
{
    Id = "Mike";
    Name = "Bob";
    requestInputParameters = "role=; resultRole=; associationClass=Test_CLITestProviderLinkClass; "
        "resultClass=; includeQualifiers=false; includeClassOrigin=false; "
        "propertyList=NULL";
    scalBool = TRUE;
    scalUint8 = 220;
    scalSint8 = 124;
    scalUint16 = 100;
    scalSint16 = 100;
    scalUint32 = 100;
    scalSint32 = 100;
    scalUint64 = 100;
    scalSint64 = NULL;
    scalReal32 = 1.0000000000000000e+02;
    scalReal64 = 1.0000000000000000e+02;
    scalString = "teststring";
    scalDateTime = "19991224120000.000000+360";
    defaultBool = TRUE;
    defaultUint8 = 4;
    defaultSint8 = 4;
    defaultUint16 = 4;
    defaultSint16 = 4;
    defaultUint32 = 4;
    defaultSint32 = 4;
    defaultUint64 = 4;
    defaultSint64 = 4;
    defaultReal32 = NULL;
    defaultReal64 = NULL;
    defaultString = "test\"embedded\"quote";
    defaultDateTime = NULL;
    arrayBool = {TRUE, FALSE, TRUE};
    arrayUint8 = {4, 128, 240};
    arraySint8 = {4, 126, -126};
    arrayUint16 = {4, 128, 240};
    arraySint16 = {4, 126, -126};
    arrayUint32 = {4, 128, 240};
    arraySint32 = {4, 126, -126};
    arrayUint64 = {4, 128, 240};
    arraySint64 = NULL;
    arrayReal32 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayReal64 = {4.0000000000000000e+00, 1.2800000000000000e+02, 
        2.4000000000000000e+02};
    arrayString = {"First", "Second", "Third"};
    arrayDateTime = {"19991224120000.000000+360", "19991224120000.000000+360", 
        "19991224120000.000000+360"};
};
1 pullInstancePaths
//ChangedHostName/test/TestProvider:Test_CLITestProviderClass.Id="Mike"
26. +++++ Test pull Operations
