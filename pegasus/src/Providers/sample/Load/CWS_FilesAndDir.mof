//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
//
//%/////////////////////////////////////////////////////////////////////////////

// ===================================================================
// Title:	Class Definitions for CMPI Workshop Excersize	
// Filename:	CWS_Excercise.mof
// Date:	02/03/2003
//
// ===================================================================

// ===================================================================
// PlainFile
// ===================================================================
[ Description("Class representing plain files. We are not inheriting "
              "from UnixFile in order to avoid unnecessary "
	      "complexities with FileIdentity"),
  Provider("cmpi:CWS_PlainFile")
]
class CWS_PlainFile : CIM_DataFile
{
    [Propagated ("CIM_FileSystem.CSCreationClassName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's CreationClassName.") ]
    string CSCreationClassName;

    [Propagated ("CIM_FileSystem.CSName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's Name.") ]
    string CSName;

    [Propagated ("CIM_FileSystem.CreationClassName"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's CreationClassName.") ]
    string FSCreationClassName;

    [Propagated ("CIM_FileSystem.Name"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's Name.") ]
    string FSName;

    [Key, MaxLen (256),
        Description (
        "CreationClassName indicates the name of the class or the "
        "subclass used in the creation of an instance. When used "
        "with the other key properties of this class, this property "
        "allows all instances of this class and its subclasses to "
        "be uniquely identified.") ]
    string CreationClassName;

    [Override ("Name"), Key, MaxLen (1024),
       Description (
       "The inherited Name serves as part of the key of a LogicalFile "
       "instance within a FileSystem. A unique identifier (such as a "
       "full path name) is required as a Name value.  Since Files are "
       "weak to their FileSystem (and not to a Directory which would "
       "provide a more granular naming algorithm), care must be "
       "taken to make LogicalFile's Name unique for a given Creation"
       "ClassName and FileSystem. A full path name is one way "
       "to do this.") ]

    string Name;
    [Gauge, Description ("Size of the File in bytes."),
        Units ("Bytes") ]
    uint64 FileSize;

    [Description (
        "File's creation date.") ]
    datetime CreationDate;

    [Description (
        "Time that the File was last modified.") ]
    datetime LastModified;

    [Description (
        "Time that the File was last accessed.") ]
    datetime LastAccessed;

    [Description (
        "Boolean indicating that the File can be read.") ]
    boolean Readable;

    [Description (
        "Boolean indicating that the File can be written.") ]
    boolean Writeable;

    [Description (
        "Indicates the file is executable.") ]
    boolean Executable;
	
    [Description (
 	"this method returns the file's type."),
     Provider ("cmpi:CWS_PlainFile") ]
    string fileType();
};

[ Description("Class representing plain files. We are not inheriting "
              "from UnixFile in order to avoid unnecessary "
	      "complexities with FileIdentity")
]
class CWS_PlainFile_CXX : CIM_DataFile
{
    [Propagated ("CIM_FileSystem.CSCreationClassName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's CreationClassName.") ]
    string CSCreationClassName;

    [Propagated ("CIM_FileSystem.CSName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's Name.") ]
    string CSName;

    [Propagated ("CIM_FileSystem.CreationClassName"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's CreationClassName.") ]
    string FSCreationClassName;

    [Propagated ("CIM_FileSystem.Name"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's Name.") ]
    string FSName;

    [Key, MaxLen (256),
        Description (
        "CreationClassName indicates the name of the class or the "
        "subclass used in the creation of an instance. When used "
        "with the other key properties of this class, this property "
        "allows all instances of this class and its subclasses to "
        "be uniquely identified.") ]
    string CreationClassName;

    [Override ("Name"), Key, MaxLen (1024),
       Description (
       "The inherited Name serves as part of the key of a LogicalFile "
       "instance within a FileSystem. A unique identifier (such as a "
       "full path name) is required as a Name value.  Since Files are "
       "weak to their FileSystem (and not to a Directory which would "
       "provide a more granular naming algorithm), care must be "
       "taken to make LogicalFile's Name unique for a given Creation"
       "ClassName and FileSystem. A full path name is one way "
       "to do this.") ]

    string Name;
    [Gauge, Description ("Size of the File in bytes."),
        Units ("Bytes") ]
    uint64 FileSize;

    [Description (
        "File's creation date.") ]
    datetime CreationDate;

    [Description (
        "Time that the File was last modified.") ]
    datetime LastModified;

    [Description (
        "Time that the File was last accessed.") ]
    datetime LastAccessed;

    [Description (
        "Boolean indicating that the File can be read.") ]
    boolean Readable;

    [Description (
        "Boolean indicating that the File can be written.") ]
    boolean Writeable;

    [Description (
        "Indicates the file is executable.") ]
    boolean Executable;
	
    [Description (
 	"this method returns the file's type."),
     Provider ("cmpi:CWS_PlainFile") ]
    string fileType();
};
// ===================================================================
// Directory
// ===================================================================
[ Description("Class representing directories. We are not inheriting "
              "from UnixDirectory in order to keep things simple."),
  Provider("cmpi:CWS_Directory")
]
class CWS_Directory : CIM_Directory
{
    [Propagated ("CIM_FileSystem.CSCreationClassName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's CreationClassName.") ]
    string CSCreationClassName;

    [Propagated ("CIM_FileSystem.CSName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's Name.") ]
    string CSName;

    [Propagated ("CIM_FileSystem.CreationClassName"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's CreationClassName.") ]
    string FSCreationClassName;

    [Propagated ("CIM_FileSystem.Name"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's Name.") ]
    string FSName;

    [Key, MaxLen (256),
        Description (
        "CreationClassName indicates the name of the class or the "
        "subclass used in the creation of an instance. When used "
        "with the other key properties of this class, this property "
        "allows all instances of this class and its subclasses to "
        "be uniquely identified.") ]
    string CreationClassName;

    [Override ("Name"), Key, MaxLen (1024),
       Description (
       "The inherited Name serves as part of the key of a LogicalFile "
       "instance within a FileSystem. A unique identifier (such as a "
       "full path name) is required as a Name value.  Since Files are "
       "weak to their FileSystem (and not to a Directory which would "
       "provide a more granular naming algorithm), care must be "
       "taken to make LogicalFile's Name unique for a given Creation"
       "ClassName and FileSystem. A full path name is one way "
       "to do this.") ]
    string Name;

    [Gauge, Description ("Size of the File in bytes."),
        Units ("Bytes") ]
    uint64 FileSize;

    [Description (
        "File's creation date.") ]
    datetime CreationDate;

    [Description (
        "Time that the File was last modified.") ]
    datetime LastModified;

    [Description (
        "Time that the File was last accessed.") ]
    datetime LastAccessed;

    [Description (
        "Boolean indicating that the File can be read.") ]
    boolean Readable;

    [Description (
        "Boolean indicating that the File can be written.") ]
    boolean Writeable;

    [Description (
        "Indicates the file is executable.") ]
    boolean Executable;
};

class CWS_Directory_CXX : CIM_Directory
{
    [Propagated ("CIM_FileSystem.CSCreationClassName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's CreationClassName.") ]
    string CSCreationClassName;

    [Propagated ("CIM_FileSystem.CSName"),
        Key, MaxLen (256),
        Description (
            "The scoping ComputerSystem's Name.") ]
    string CSName;

    [Propagated ("CIM_FileSystem.CreationClassName"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's CreationClassName.") ]
    string FSCreationClassName;

    [Propagated ("CIM_FileSystem.Name"),
        Key, MaxLen (256),
        Description ("The scoping FileSystem's Name.") ]
    string FSName;

    [Key, MaxLen (256),
        Description (
        "CreationClassName indicates the name of the class or the "
        "subclass used in the creation of an instance. When used "
        "with the other key properties of this class, this property "
        "allows all instances of this class and its subclasses to "
        "be uniquely identified.") ]
    string CreationClassName;

    [Override ("Name"), Key, MaxLen (1024),
       Description (
       "The inherited Name serves as part of the key of a LogicalFile "
       "instance within a FileSystem. A unique identifier (such as a "
       "full path name) is required as a Name value.  Since Files are "
       "weak to their FileSystem (and not to a Directory which would "
       "provide a more granular naming algorithm), care must be "
       "taken to make LogicalFile's Name unique for a given Creation"
       "ClassName and FileSystem. A full path name is one way "
       "to do this.") ]
    string Name;

    [Gauge, Description ("Size of the File in bytes."),
        Units ("Bytes") ]
    uint64 FileSize;

    [Description (
        "File's creation date.") ]
    datetime CreationDate;

    [Description (
        "Time that the File was last modified.") ]
    datetime LastModified;

    [Description (
        "Time that the File was last accessed.") ]
    datetime LastAccessed;

    [Description (
        "Boolean indicating that the File can be read.") ]
    boolean Readable;

    [Description (
        "Boolean indicating that the File can be written.") ]
    boolean Writeable;

    [Description (
        "Indicates the file is executable.") ]
    boolean Executable;
};

// ===================================================================
// DirectoryContainsFile
// ===================================================================
[ Association, Aggregation,
  Description("Link between Directories and their contents, which "
              "can be plain files or other directories."),
  Provider("cmpi:CWS_DirectoryContainsFile")
]
class CWS_DirectoryContainsFile : CIM_DirectoryContainsFile
{
    [Override ("GroupComponent"), Aggregate, Max (1),
        Description ("The Directory.") ]
    CWS_Directory REF GroupComponent;

    [Override ("PartComponent"),
        Description (
            "The LogicalFile 'contained within' the Directory.") ]
    CIM_LogicalFile REF PartComponent;
};

[ Association, Aggregation,
  Description("Link between Directories and their contents, which "
              "can be plain files or other directories."),
  Provider("cmpi:CWS_DirectoryContainsFile")
]
class CWS_DirectoryContainsFile_CXX : CIM_DirectoryContainsFile
{
    [Override ("GroupComponent"), Aggregate, Max (1),
        Description ("The Directory.") ]
    CWS_Directory REF GroupComponent;

    [Override ("PartComponent"),
        Description (
            "The LogicalFile 'contained within' the Directory.") ]
    CIM_LogicalFile REF PartComponent;
};
