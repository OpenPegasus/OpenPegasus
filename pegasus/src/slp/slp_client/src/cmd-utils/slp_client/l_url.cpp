/*NOCHKSRC */
#line 2 "l_url.c"

#line 4 "l_url.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer url_create_buffer
#define yy_delete_buffer url_delete_buffer
#define yy_flex_debug url_flex_debug
#define yy_init_buffer url_init_buffer
#define yy_flush_buffer url_flush_buffer
#define yy_load_buffer_state url_load_buffer_state
#define yy_switch_to_buffer url_switch_to_buffer
#define yyin urlin
#define yyleng urlleng
#define yylex urllex
#define yylineno urllineno
#define yyout urlout
#define yyrestart urlrestart
#define yytext urltext
#define yywrap urlwrap
#define yyalloc urlalloc
#define yyrealloc urlrealloc
#define yyfree urlfree

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE urlrestart(urlin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int urlleng;

extern FILE *urlin, *urlout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up urltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up urltext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via urlrestart()), so that the user can continue scanning by
	 * just pointing urlin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when urltext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int urlleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow urlwrap()'s to do buffer switches
 * instead of setting up a fresh urlin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void urlrestart (FILE *input_file  );
void url_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE url_create_buffer (FILE *file,int size  );
void url_delete_buffer (YY_BUFFER_STATE b  );
void url_flush_buffer (YY_BUFFER_STATE b  );
void urlpush_buffer_state (YY_BUFFER_STATE new_buffer  );
void urlpop_buffer_state (void );

static void urlensure_buffer_stack (void );
static void url_load_buffer_state (void );
static void url_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER url_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE url_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE url_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE url_scan_bytes (yyconst char *bytes,int len  );

void *urlalloc (yy_size_t  );
void *urlrealloc (void *,yy_size_t  );
void urlfree (void *  );

#define yy_new_buffer url_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        urlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            url_create_buffer(urlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        urlensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            url_create_buffer(urlin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define urlwrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *urlin = (FILE *) 0, *urlout = (FILE *) 0;

typedef int yy_state_type;

extern int urllineno;

int urllineno = 1;

extern char *urltext;
#define yytext_ptr urltext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up urltext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	urlleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 24
#define YY_END_OF_BUFFER 25
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[292] =
    {   0,
       21,   21,    3,    3,    0,    0,    0,    0,   25,   23,
       17,   14,   16,   18,   21,   10,   19,   12,    9,   15,
       11,   13,   23,   24,    3,    2,   24,    5,   24,    7,
        6,   22,   23,   21,    1,    0,    0,   21,   19,   23,
        0,    3,    0,    0,    5,    0,    0,   22,    0,    0,
       21,   19,   23,    0,   20,    0,    0,    0,    3,    0,
        5,    0,    0,    5,    4,    0,   21,   21,   19,   23,
        0,    0,    0,    0,    0,   20,    0,    0,    0,    0,
        0,    0,    5,    0,    0,    0,   21,   21,   23,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    5,    0,    0,    0,   21,   21,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,    0,
        0,    0,   20,   21,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    5,    0,    0,    0,   20,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    5,    0,    0,    0,   20,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    5,    0,

        0,    0,    0,    0,    5,    0,    0,    0,    0,    0,
        5,    0,    0,    0,    5,    0,    0,    0,    5,    0,
        0,    0,    5,    0,    0,    0,    5,    0,    0,    0,
        5,    0,    0,    0,    5,    0,    0,    0,    5,    0,
        0,    0,    5,    0,    0,    0,    5,    0,    0,    0,
        5,    0,    0,    0,    5,    0,    0,    0,    5,    0,
        0,    0,    5,    0,    0,    0,    5,    0,    0,    0,
        5,    0,    0,    0,    5,    0,    0,    0,    5,    0,
        0,    0,    5,    0,    0,    8,    5,    0,    0,    0,
        0

    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    2,    3,    3,    4,    5,    6,    2,    2,
        2,    2,    7,    8,    9,   10,   11,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,   14,    3,
       15,    3,   16,   17,   18,   19,   19,   19,   19,   19,
        9,    9,   20,    9,    9,    9,    9,    9,    9,   21,
        9,    9,    9,   22,    9,    9,    9,   23,    9,    9,
       24,    3,   25,    3,   26,    3,   18,   19,   19,   19,

       19,   19,    9,    9,   20,    9,    9,    9,    9,    9,
        9,   21,    9,    9,    9,   22,    9,    9,    9,   23,
        9,    9,    3,    3,    3,   26,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[27] =
    {   0,
        1,    2,    3,    4,    5,    6,    6,    7,    5,    5,
        7,    8,    9,    6,    6,    7,    7,    8,    8,    5,
        5,    5,    5,    3,   10,    5
    } ;

static yyconst flex_int16_t yy_base[347] =
    {   0,
        0,    0,   26,   51,   76,    0,  784,  783,  768,    0,
      913,  913,  913,  913,  102,   20,  119,  913,  913,  913,
      913,  913,  127,  913,    0,  913,  754,  746,   29,  913,
      913,    0,    0,    0,  913,  728,  710,   51,   53,  135,
      717,    0,   19,  704,  711,   97,  123,    0,  689,  676,
      151,  131,  139,  159,    0,   20,   33,  167,  913,   36,
      688,  147,  155,  685,  913,  678,  163,  171,  175,  179,
      189,   93,   98,  119,  674,  913,  139,  205,  143,  107,
      163,  672,  678,  191,  193,  201,  221,  671,  171,  643,
      209,  124,  179,  209,  217,  231,  212,  642,  226,  236,

      229,  234,  237,  240,  648,  239,  248,  250,  252,  260,
      251,  262,  631,  240,  264,  260,  276,  265,  280,  281,
      284,  618,  274,  286,  284,  300,  296,  304,  610,  303,
      305,  308,  316,  592,  577,  319,  317,  319,  335,  326,
      324,  321,  331,  566,  551,  340,  333,  338,  354,  345,
      343,  357,  349,  540,  532,  359,  362,  370,  372,  373,
      514,  373,  375,  385,  384,  501,  389,  488,  379,  388,
      398,  393,  475,  467,  397,  401,  405,    0,  447,  415,
      410,  446,    0,  436,  420,  419,  436,    0,  431,  421,
      423,  431,   41,  416,    0,   48,  408,    0,  409,  433,

      435,  443,  409,  432,  365,  446,  448,  451,  340,  337,
      306,  456,  459,  294,  295,  461,  464,  469,  279,  472,
      474,  477,  227,  482,  485,  487,  221,  490,  495,  498,
      211,  500,  503,  508,  201,  511,  513,  516,  195,  521,
      524,  526,  190,  529,  534,  537,  157,  539,  542,  547,
      150,  550,  552,  555,  128,  560,  563,  565,  125,  568,
      573,  576,  108,  578,  581,   61,   52,  586,  589,  591,
       51,  594,  599,  602,   31,  604,  607,  612,   30,  615,
      617,  620,   23,  625,  628,  913,  913,  630,  633,  638,
      913,  657,  667,  677,  686,  687,  693,  700,  703,  710,

      711,  714,  717,  724,  725,  728,  731,  734,  737,  744,
      745,  748,  751,  754,  761,  762,  765,  768,  771,  778,
      779,  782,  789,  794,  799,  804,  809,  814,  819,  824,
      829,  834,  839,  844,  849,  854,  859,  864,  869,  874,
      879,  884,  889,  894,  899,  904
    } ;

static yyconst flex_int16_t yy_def[347] =
    {   0,
      291,    1,  292,  292,  291,    5,  293,  293,  291,  294,
      291,  291,  291,  291,  291,  291,   15,  291,  291,  291,
      291,  291,  294,  291,  295,  291,  296,  297,  291,  291,
      291,  298,  294,   15,  291,  291,  291,   15,   17,  294,
      291,  295,  299,  291,  300,  291,  291,  298,  291,  291,
       17,   17,   40,  291,  294,  301,  302,  291,  291,  303,
      304,  291,  291,  297,  291,  291,   15,   51,   15,   40,
      291,  305,   71,  306,  291,  291,  307,  291,  308,   78,
      309,  291,  310,  291,  291,  291,   15,   15,  294,  291,
       71,   91,  311,  312,  291,  291,  291,  291,   78,   99,

      313,  314,  291,  291,  315,  291,  291,  291,   15,   87,
      291,   91,  112,  316,  291,  317,  291,  117,  291,  291,
       99,  121,  318,  291,  319,  291,  126,  291,  320,  291,
      291,  291,   15,   15,  291,  291,  291,  321,  291,  139,
      317,  117,  142,  291,  291,  291,  291,  322,  291,  149,
      319,  126,  152,  291,  323,  291,  291,  291,   15,  291,
      291,  321,  139,  163,  142,  165,  291,  291,  322,  149,
      170,  152,  172,  324,  291,  291,  291,   15,  291,  291,
      163,  181,  141,  291,  291,  170,  186,  151,  325,  291,
      291,  291,  291,  291,  162,  291,  291,  169,  326,  291,

      291,  291,  291,  291,  327,  291,  291,  291,  291,  291,
      328,  291,  291,  291,  329,  291,  291,  291,  330,  291,
      291,  291,  331,  291,  291,  291,  332,  291,  291,  291,
      333,  291,  291,  291,  334,  291,  291,  291,  335,  291,
      291,  291,  336,  291,  291,  291,  337,  291,  291,  291,
      338,  291,  291,  291,  339,  291,  291,  291,  340,  291,
      291,  291,  341,  291,  291,  291,  342,  291,  291,  291,
      343,  291,  291,  291,  344,  291,  291,  291,  345,  291,
      291,  291,  346,  291,  291,  291,  291,  291,  291,  291,
        0,  291,  291,  291,  291,  291,  291,  291,  291,  291,

      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291
    } ;

static yyconst flex_int16_t yy_nxt[940] =
    {   0,
       10,   10,   10,   11,   10,   12,   13,   14,   15,   15,
       16,   17,   18,   19,   20,   21,   22,   17,   17,   15,
       15,   15,   15,   23,   10,   10,   24,  288,   24,   24,
       35,   58,   75,   24,  284,  280,   26,   36,   24,   37,
       47,   24,   24,   59,   76,   58,   47,   47,   82,   27,
       24,   24,  203,   24,   24,  276,  272,   59,   24,  204,
       59,   26,   51,   24,   52,   76,   24,   24,   51,   51,
       52,   52,   59,  270,   27,   24,   24,   24,   24,   28,
       29,   24,   24,   24,   28,   28,   30,   28,   31,   24,
       24,   24,   24,   28,   28,   28,   28,   28,   28,   24,

       24,   28,   33,   33,   33,   75,   33,  291,   63,   92,
       34,   34,  268,   34,   63,   63,  291,   76,  100,   34,
       34,   34,   34,   34,   34,   33,   33,   33,   38,  264,
       39,   95,  260,  291,   64,  113,   39,   39,   40,   41,
       64,   64,   69,   76,   40,   40,   53,   54,   69,   69,
       70,   58,   53,   53,  256,   82,   70,   70,   85,   55,
       67,  252,   68,   59,   85,   85,   45,   59,   68,   68,
       71,   72,   45,   45,   87,  103,   73,   73,   78,   79,
       87,   87,   88,   54,   80,   80,   69,   59,   88,   88,
       89,  115,   69,   69,  248,   55,   89,   89,   90,  244,

       91,   54,  107,   76,   61,  240,   92,   92,  107,  107,
       61,   61,  108,   76,   98,  236,   99,   58,  108,  108,
      112,   95,  100,  100,   58,  232,  113,  113,  117,   59,
      109,  228,  110,   76,  118,  118,   59,  121,  110,  110,
       90,  124,  119,  122,  122,  291,  103,  122,  126,   98,
      131,  128,  115,   59,  127,  127,  131,  131,   59,   83,
      135,  132,  136,  133,   76,   83,   83,  132,  132,  133,
      133,  134,   95,  137,  291,  139,  143,  134,  134,  137,
      137,  140,  140,  224,   76,   90,  124,  142,   95,   90,
      145,  144,  146,  143,  143,  147,  103,  149,   59,  220,

       76,  147,  147,  150,  150,  291,  218,  153,   59,   98,
      216,  152,  103,   98,  157,  154,  105,  153,  153,  158,
      157,  157,  105,  105,   59,  158,  158,  159,  135,   54,
      161,  115,  165,  159,  159,  291,   95,  164,  166,  166,
      291,   76,  166,   76,   90,   58,  163,  115,   76,  145,
      124,  168,  164,  164,  291,  103,  171,   59,  291,   76,
      173,   59,   59,   98,   76,  170,  124,   59,  172,  212,
      176,  171,  171,  129,  173,  173,  176,  176,   59,  129,
      129,  177,  179,  178,  180,  115,  181,  177,  177,  178,
      178,  124,  182,  182,  291,  183,  182,   76,  184,  186,

      185,  183,  183,   59,  188,  187,  187,  291,  191,  187,
      188,  188,  155,  206,  191,  191,  192,  184,  155,  155,
      209,  195,  192,  192,  179,  179,  194,  195,  195,  184,
      198,  197,  201,   76,  174,  200,  198,  198,  201,  201,
      174,  174,  202,  210,  207,  291,  189,  196,  202,  202,
      207,  207,  189,  189,  208,  291,   59,  213,  193,  199,
      208,  208,  214,  213,  213,  199,  199,  217,  214,  214,
      205,  190,  221,  217,  217,  211,  205,  205,  221,  221,
      222,  211,  211,  225,  291,  215,  222,  222,  226,  225,
      225,  215,  215,  229,  226,  226,  219,  145,  230,  229,

      229,  233,  219,  219,  230,  230,  223,  233,  233,  234,
      291,  237,  223,  223,  227,  234,  234,  237,  237,  238,
      227,  227,  241,  135,  231,  238,  238,  242,  241,  241,
      231,  231,  245,  242,  242,  235,  175,  246,  245,  245,
      249,  235,  235,  246,  246,  239,  249,  249,  250,   98,
      253,  239,  239,  243,  250,  250,  253,  253,  254,  243,
      243,  257,  167,  247,  254,  254,  258,  257,  257,  247,
      247,  261,  258,  258,  251,   90,  262,  261,  261,  265,
      251,  251,  262,  262,  255,  265,  265,  266,  160,  269,
      255,  255,  259,  266,  266,  269,  269,  273,  259,  259,

      263,  109,  274,  273,  273,  277,  263,  263,  274,  274,
      267,  277,  277,  278,  156,  281,  267,  267,  271,  278,
      278,  281,  281,  282,  271,  271,  285,  291,  275,  282,
      282,  286,  285,  285,  275,  275,  289,  286,  286,  279,
      291,  290,  289,  289,  283,  279,  279,  290,  290,  287,
      283,  283,  130,  120,  111,  287,  287,   25,   25,   25,
       25,   25,   25,   25,   25,   25,   25,   32,   32,   32,
       32,   32,   32,   32,   32,   32,   32,   33,   33,   33,
       67,   33,  106,  104,   33,   96,   33,   42,   86,   46,
       42,   42,   84,   42,   43,   43,   45,   45,   66,   65,

       45,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       57,   57,   57,   61,   61,   62,   60,   61,   74,   74,
       74,   77,   77,   77,   81,   81,   81,   83,   83,   56,
       50,   83,   93,   93,   93,   94,   94,   94,   97,   97,
       97,  101,  101,  101,  102,  102,  102,  105,  105,   49,
       46,  105,  114,  114,  114,  116,  116,  116,  123,  123,
      123,  125,  125,  125,  129,  129,   44,  291,  129,  138,
      138,  138,  141,  141,  141,  148,  148,  148,  151,  151,
      151,  155,  155,   24,   24,  155,  162,  162,  162,  169,
      169,  169,  174,  174,  291,  291,  174,  189,  189,  291,

      291,  189,  199,  199,  291,  291,  199,  205,  205,  291,
      291,  205,  211,  211,  291,  291,  211,  215,  215,  291,
      291,  215,  219,  219,  291,  291,  219,  223,  223,  291,
      291,  223,  227,  227,  291,  291,  227,  231,  231,  291,
      291,  231,  235,  235,  291,  291,  235,  239,  239,  291,
      291,  239,  243,  243,  291,  291,  243,  247,  247,  291,
      291,  247,  251,  251,  291,  291,  251,  255,  255,  291,
      291,  255,  259,  259,  291,  291,  259,  263,  263,  291,
      291,  263,  267,  267,  291,  291,  267,  271,  271,  291,
      291,  271,  275,  275,  291,  291,  275,  279,  279,  291,

      291,  279,  283,  283,  291,  291,  283,  287,  287,  291,
      291,  287,    9,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291
    } ;

static yyconst flex_int16_t yy_chk[940] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,  283,    3,    3,
       16,   43,   56,    3,  279,  275,    3,   16,    3,   16,
       29,    3,    3,   43,   56,   57,   29,   29,   60,    3,
        3,    4,  193,    4,    4,  271,  267,   57,    4,  196,
       60,    4,   38,    4,   39,  193,    4,    4,   38,   38,
       39,   39,  196,  266,    4,    4,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,   15,   15,   15,   72,   15,   73,   46,   73,
       15,   15,  263,   15,   46,   46,   80,   72,   80,   15,
       15,   15,   15,   15,   15,   15,   15,   15,   17,  259,
       17,   74,  255,   92,   47,   92,   17,   17,   23,   23,
       47,   47,   52,   74,   23,   23,   40,   40,   52,   52,
       53,   77,   40,   40,  251,   79,   53,   53,   62,   40,
       51,  247,   51,   77,   62,   62,   63,   79,   51,   51,
       54,   54,   63,   63,   67,   81,   54,   54,   58,   58,
       67,   67,   68,   89,   58,   58,   69,   81,   68,   68,
       70,   93,   69,   69,  243,   89,   70,   70,   71,  239,

       71,   71,   84,   93,   85,  235,   71,   71,   84,   84,
       85,   85,   86,   71,   78,  231,   78,   78,   86,   86,
       91,   94,   78,   78,   97,  227,   91,   91,   95,   78,
       87,  223,   87,   94,   95,   95,   97,   99,   87,   87,
       96,  101,   96,   99,   99,  100,  102,  100,  103,  104,
      106,  104,  114,  101,  103,  103,  106,  106,  102,  107,
      111,  108,  111,  109,  114,  107,  107,  108,  108,  109,
      109,  110,  116,  112,  118,  115,  118,  110,  110,  112,
      112,  115,  115,  219,  116,  117,  123,  117,  117,  119,
      120,  119,  120,  117,  117,  121,  125,  124,  123,  215,

      117,  121,  121,  124,  124,  127,  214,  127,  125,  126,
      211,  126,  126,  128,  130,  128,  131,  126,  126,  132,
      130,  130,  131,  131,  126,  132,  132,  133,  136,  137,
      136,  138,  142,  133,  133,  140,  141,  140,  142,  142,
      143,  137,  143,  138,  139,  147,  139,  139,  141,  146,
      148,  146,  139,  139,  150,  151,  150,  147,  153,  139,
      153,  210,  148,  149,  209,  149,  149,  151,  152,  205,
      156,  149,  149,  157,  152,  152,  156,  156,  149,  157,
      157,  158,  160,  159,  160,  162,  163,  158,  158,  159,
      159,  169,  163,  163,  164,  165,  164,  162,  167,  170,

      167,  165,  165,  169,  172,  170,  170,  171,  175,  171,
      172,  172,  176,  199,  175,  175,  177,  197,  176,  176,
      203,  181,  177,  177,  180,  194,  180,  181,  181,  185,
      186,  185,  190,  203,  191,  189,  186,  186,  190,  190,
      191,  191,  192,  204,  200,  187,  201,  184,  192,  192,
      200,  200,  201,  201,  202,  182,  204,  206,  179,  207,
      202,  202,  208,  206,  206,  207,  207,  212,  208,  208,
      213,  174,  216,  212,  212,  217,  213,  213,  216,  216,
      218,  217,  217,  220,  173,  221,  218,  218,  222,  220,
      220,  221,  221,  224,  222,  222,  225,  168,  226,  224,

      224,  228,  225,  225,  226,  226,  229,  228,  228,  230,
      166,  232,  229,  229,  233,  230,  230,  232,  232,  234,
      233,  233,  236,  161,  237,  234,  234,  238,  236,  236,
      237,  237,  240,  238,  238,  241,  155,  242,  240,  240,
      244,  241,  241,  242,  242,  245,  244,  244,  246,  154,
      248,  245,  245,  249,  246,  246,  248,  248,  250,  249,
      249,  252,  145,  253,  250,  250,  254,  252,  252,  253,
      253,  256,  254,  254,  257,  144,  258,  256,  256,  260,
      257,  257,  258,  258,  261,  260,  260,  262,  135,  264,
      261,  261,  265,  262,  262,  264,  264,  268,  265,  265,

      269,  134,  270,  268,  268,  272,  269,  269,  270,  270,
      273,  272,  272,  274,  129,  276,  273,  273,  277,  274,
      274,  276,  276,  278,  277,  277,  280,  122,  281,  278,
      278,  282,  280,  280,  281,  281,  284,  282,  282,  285,
      113,  288,  284,  284,  289,  285,  285,  288,  288,  290,
      289,  289,  105,   98,   90,  290,  290,  292,  292,  292,
      292,  292,  292,  292,  292,  292,  292,  293,  293,  293,
      293,  293,  293,  293,  293,  293,  293,  294,  294,  294,
       88,  294,   83,   82,  294,   75,  294,  295,   66,   64,
      295,  295,   61,  295,  296,  296,  297,  297,   50,   49,

      297,  298,  298,  298,  298,  298,  298,  298,  298,  298,
      299,  299,  299,  300,  300,   45,   44,  300,  301,  301,
      301,  302,  302,  302,  303,  303,  303,  304,  304,   41,
       37,  304,  305,  305,  305,  306,  306,  306,  307,  307,
      307,  308,  308,  308,  309,  309,  309,  310,  310,   36,
       28,  310,  311,  311,  311,  312,  312,  312,  313,  313,
      313,  314,  314,  314,  315,  315,   27,    9,  315,  316,
      316,  316,  317,  317,  317,  318,  318,  318,  319,  319,
      319,  320,  320,    8,    7,  320,  321,  321,  321,  322,
      322,  322,  323,  323,    0,    0,  323,  324,  324,    0,

        0,  324,  325,  325,    0,    0,  325,  326,  326,    0,
        0,  326,  327,  327,    0,    0,  327,  328,  328,    0,
        0,  328,  329,  329,    0,    0,  329,  330,  330,    0,
        0,  330,  331,  331,    0,    0,  331,  332,  332,    0,
        0,  332,  333,  333,    0,    0,  333,  334,  334,    0,
        0,  334,  335,  335,    0,    0,  335,  336,  336,    0,
        0,  336,  337,  337,    0,    0,  337,  338,  338,    0,
        0,  338,  339,  339,    0,    0,  339,  340,  340,    0,
        0,  340,  341,  341,    0,    0,  341,  342,  342,    0,
        0,  342,  343,  343,    0,    0,  343,  344,  344,    0,

        0,  344,  345,  345,    0,    0,  345,  346,  346,    0,
        0,  346,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291,  291,
      291,  291,  291,  291,  291,  291,  291,  291,  291
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int url_flex_debug;
int url_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *urltext;
#line 1 "url.l"
/*
//%LICENSE////////////////////////////////////////////////////////////////
//
// Licensed to The Open Group (TOG) under one or more contributor license
// agreements.  Refer to the OpenPegasusNOTICE.txt file distributed with
// this work for additional information regarding copyright ownership.
// Each contributor licenses this file to you under the OpenPegasus Open
// Source License; you may not use this file except in compliance with the
// License.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the "Software"),
// to deal in the Software without restriction, including without limitation
// the rights to use, copy, modify, merge, publish, distribute, sublicense,
// and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//////////////////////////////////////////////////////////////////////////
*/
/* NOCHKSRC */
/*****************************************************************************
 *  Description: encode/decode attribute urls
 *
 *  Originated: February 25, 2000
 *	Original Author: Mike Day md@soft-hackle.net
 *                                mdd@us.ibm.com
 *
 *  Copyright (c) 2001 - 2003  IBM
 *  Copyright (c) 2000 - 2003 Michael Day
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 *
 *****************************************************************************/
#line 65 "url.l"
#undef YYLMAX
#define YYLMAX 2048
#define YY_NEVER_INTERACTIVE 1
#undef YY_INPUT
#define YY_INPUT(b, r, m) abort()
#define exit(i) abort()
#include "slp_client.h"
#include "y_url.h"
#include <stdarg.h>

#define urlless yyless
void urlerror(const char *, ...);

static int16 heapIndex;
static char *heap;
static char *buf;
/* special counter to exit the appletalk state */
char atalk_state = 0;

static char *_lslp_strdup(const char *s);
void url_close_lexer(size_t handle);
size_t url_init_lexer(const char *s);

/* {}	*/
/* IPv6 definitions */



#define YY_NO_INPUT 1
#line 875 "l_url.c"

#define INITIAL 0
#define IP_SITE 1
#define AT_SITE 2
#define ATTRIBUTE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int urllex_destroy (void );

int urlget_debug (void );

void urlset_debug (int debug_flag  );

YY_EXTRA_TYPE urlget_extra (void );

void urlset_extra (YY_EXTRA_TYPE user_defined  );

FILE *urlget_in (void );

void urlset_in  (FILE * in_str  );

FILE *urlget_out (void );

void urlset_out  (FILE * out_str  );

int urlget_leng (void );

char *urlget_text (void );

int urlget_lineno (void );

void urlset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int urlwrap (void );
#else
extern int urlwrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( urltext, urlleng, 1, urlout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		unsigned n; \
		for ( n = 0; n < max_size && \
			     (c = getc( urlin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( urlin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, urlin))==0 && ferror(urlin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(urlin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int urllex (void);

#define YY_DECL int urllex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after urltext and urlleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 121 "url.l"


 /* the ip user @ host syntax is a special state because some reserved */
 /* characters are valid - but user the string itself is optional so we can't */
 /* build it into a full-time rule */

#line 1065 "l_url.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! urlin )
			urlin = stdin;

		if ( ! urlout )
			urlout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			urlensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				url_create_buffer(urlin,YY_BUF_SIZE );
		}

		url_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of urltext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 292 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 913 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 127 "url.l"
{
                          BEGIN IP_SITE;
			  urlless(0);
			}
	YY_BREAK
/* return the slash as a token */
case 2:
YY_RULE_SETUP
#line 132 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
/* this next rule needs to kick in even if it matches a zero-length string */
/* i.e., it needs to be guaranteed even if there is no user @ host production */
case 3:
YY_RULE_SETUP
#line 136 "url.l"
{
			BEGIN INITIAL;
			if (urlleng > 0)
			{
                            if(NULL != (urllval._s = _lslp_strdup(urltext)))
                                return(_RESNAME);
			    else
				return(0L);
			}
		}
	YY_BREAK
/* appletalk syntax includes three reserved characters - give the lexer a chance */
/* to match an appletalk production before it starts returning reserved */
/* chars as tokens. */
case 4:
YY_RULE_SETUP
#line 151 "url.l"
{
			BEGIN AT_SITE;
 			if(NULL != (urllval._s	= _lslp_strdup(urltext)))
				return(_AT);
			else
				return(0L);
			}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 159 "url.l"
{
 			atalk_state++;
			if (atalk_state == 3)
				{BEGIN INITIAL;}
 			if(NULL != (urllval._s	= _lslp_strdup(urltext)))
				return(_ZONE);
			else
				return(0L);
			}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 169 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 170 "url.l"
{BEGIN INITIAL; urlless(0);}
	YY_BREAK
/* ipx syntax includes two reserved characters - give the lexer a chance */
/* to match an ipx production before it starts returning reserved chars */
/* as tokens */
case 8:
YY_RULE_SETUP
#line 176 "url.l"
{
 			if(NULL != (urllval._s	= _lslp_strdup(urltext)))
				return(_IPX);
			else
				return(0L);
			}
	YY_BREAK
/* reserved characters  - always a token in normal state unless part of */
/* one of the productions above */
case 9:
YY_RULE_SETUP
#line 185 "url.l"
{BEGIN ATTRIBUTE; urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 186 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 187 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 188 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 189 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 190 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 191 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 192 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 193 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 194 "url.l"
{urllval._i = *urltext; return(urllval._i);}
	YY_BREAK
/* a string consisting of only hex digits */
case 19:
YY_RULE_SETUP
#line 197 "url.l"
{
 			if(NULL != (urllval._s	= _lslp_strdup(urltext)))
				return(_HEXDIG);
			else
				return(0L);
			}
	YY_BREAK
/* an ipv4 address */
case 20:
YY_RULE_SETUP
#line 205 "url.l"
{
 			if(NULL != (urllval._s	= _lslp_strdup(urltext)))
				return(_IPADDR);
			else
				return(0L);
			}
	YY_BREAK
/* resource names start with alpha and include alphanum and '+' or '-' */
/* but '+' is reserved and must be escaped */
case 21:
YY_RULE_SETUP
#line 214 "url.l"
{
 			if(NULL != (urllval._s	= _lslp_strdup(urltext)))
				return(_RESNAME);
			else
				return(0L);
			}
	YY_BREAK
/* anything else that is not reserved */
case 22:
YY_RULE_SETUP
#line 223 "url.l"
{
 			BEGIN INITIAL;
 			if(NULL != (urllval._s	= _lslp_strdup(urltext)))
				return(_ELEMENT);
			else
				return(0L);
			}
	YY_BREAK
/* anything else that is not reserved */
case 23:
/* rule 23 can match eol */
YY_RULE_SETUP
#line 232 "url.l"
{
 			if(NULL != (urllval._s	= _lslp_strdup(urltext)))
				return(_ELEMENT);
			else
				return(0L);
			}
	YY_BREAK
/* anything else is an error */
case 24:
YY_RULE_SETUP
#line 241 "url.l"
ECHO;
	YY_BREAK
#line 1344 "l_url.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(IP_SITE):
case YY_STATE_EOF(AT_SITE):
case YY_STATE_EOF(ATTRIBUTE):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed urlin at a new source and called
			 * urllex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = urlin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( urlwrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * urltext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of urllex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					urlrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			urlrestart(urlin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) urlrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 292 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 292 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 291);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					urlrestart(urlin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( urlwrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve urltext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void urlrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        urlensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            url_create_buffer(urlin,YY_BUF_SIZE );
	}

	url_init_buffer(YY_CURRENT_BUFFER,input_file );
	url_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void url_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		urlpop_buffer_state();
	 *		urlpush_buffer_state(new_buffer);
     */
	urlensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	url_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (urlwrap()) processing, but the only time this flag
	 * is looked at is after urlwrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void url_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	urlin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE url_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) urlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in url_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) urlalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in url_create_buffer()" );

	b->yy_is_our_buffer = 1;

	url_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with url_create_buffer()
 * 
 */
    void url_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		urlfree((void *) b->yy_ch_buf  );

	urlfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a urlrestart() or at EOF.
 */
    static void url_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	url_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then url_init_buffer was _probably_
     * called from urlrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void url_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		url_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void urlpush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	urlensure_buffer_stack();

	/* This block is copied from url_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from url_switch_to_buffer. */
	url_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void urlpop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	url_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		url_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void urlensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)urlalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in urlensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)urlrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in urlensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE url_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) urlalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in url_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	url_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to urllex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       url_scan_bytes() instead.
 */
YY_BUFFER_STATE url_scan_string (yyconst char * yystr )
{
    
	return url_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to urllex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE url_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) urlalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in url_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = url_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in url_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up urltext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		urltext[urlleng] = (yy_hold_char); \
		(yy_c_buf_p) = urltext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		urlleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int urlget_lineno  (void)
{
        
    return urllineno;
}

/** Get the input stream.
 * 
 */
FILE *urlget_in  (void)
{
        return urlin;
}

/** Get the output stream.
 * 
 */
FILE *urlget_out  (void)
{
        return urlout;
}

/** Get the length of the current token.
 * 
 */
int urlget_leng  (void)
{
        return urlleng;
}

/** Get the current token.
 * 
 */

char *urlget_text  (void)
{
        return urltext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void urlset_lineno (int  line_number )
{
    
    urllineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see url_switch_to_buffer
 */
void urlset_in (FILE *  in_str )
{
        urlin = in_str ;
}

void urlset_out (FILE *  out_str )
{
        urlout = out_str ;
}

int urlget_debug  (void)
{
        return url_flex_debug;
}

void urlset_debug (int  bdebug )
{
        url_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from urllex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    urlin = stdin;
    urlout = stdout;
#else
    urlin = (FILE *) 0;
    urlout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * urllex_init()
     */
    return 0;
}

/* urllex_destroy is for both reentrant and non-reentrant scanners. */
int urllex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		url_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		urlpop_buffer_state();
	}

	/* Destroy the stack itself. */
	urlfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * urllex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *urlalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *urlrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void urlfree (void * ptr )
{
	free( (char *) ptr );	/* see urlrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 241 "url.l"



static char *_lslp_strdup(const char *s)
{
  char *p = &heap[heapIndex];

  while ((heap[heapIndex++] = *s++))
      ;
  return p;
}

void url_close_lexer(size_t handle)
{
  PEGASUS_ASSERT(handle);
  PEGASUS_ASSERT(buf);
  PEGASUS_ASSERT(heap);
  url_delete_buffer((YY_BUFFER_STATE)handle);
  free(buf);
  free(heap);
  buf = heap = 0;
}

size_t url_init_lexer(const char *s)
{
  size_t len = strlen(s) + 2;

  if (!(heap = (char*)malloc(len)))
  {
      return 0;
  }
  if (!(buf = (char*)malloc(len)))
  {
      free (heap);
      return 0;
  }
  heapIndex = 0;
  strcpy(buf, s);
  buf[len - 1] = 0;

  return ((size_t) url_scan_buffer(buf, len));
}

void urlerror(const char *s, ...)
{
 return;
}	


